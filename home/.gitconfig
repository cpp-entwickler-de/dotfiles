[user]
# Do not try to guess user information
useConfigOnly = true


[core]
# Modify line endings on commit only
autocrlf = input

# Honor executable bit
filemode = true

# Handle whitespace
whitespace = fix,-indent-with-non-tab,trailing-space,cr-at-eol,space-before-tab,tab-in-indent,tabwidth=4

# Use custom ignore patterns
excludesfile = ~/.gitignore

# Use custom attributes file
attributesFile = ~/.gitattributes

# Do not quote characters > 0x80
quotepath = false

# Use emacs for editing
editor = "emacsclient"

# Use filesystem cache on Windows
fscache = true

# Use FSMonitor daemon
fsmonitor = true

# Always cache untracked files
untrackedCache = true


[init]
templateDir  = ~/.git-templates


[color]
# Detect color availability
ui = auto

[pager]
    diff = delta
    log = delta
    reflog = delta
    show = delta

[interactive]
    diffFilter = delta --color-only --features=interactive

[delta]
    features = decorations navigate relative-paths
    line-numbers = true
    side-by-side = true

[status]
# Show paths from project root
relativePaths = false

# Use short format
short = true

# Show all untracked files 
showUntrackedFiles = all

# Show submodule info
submoduleSummary = true


[log]
# Use short commit IDs
abbrevCommit = true

# Use relative date
date = relative

# Print ref names
decorate = short


[grep]
# Show line numbers
lineNumber = true

# Allow extended Regexps
extendedRegexp = true


[help]
# Correct misspellings of commands automatically
autocorrect = 1

# Use HTML help
format = web


[web]
# Use Firefox as browser
browser = firefox


[versionsort]
# Proper sorting of version suffixes
prereleaseSuffix = -alpha
prereleaseSuffix = -beta
prereleaseSuffix = -pre
prereleaseSuffix = -rc
prereleaseSuffix = -demo


[branch]
# Setup tracking
autosetupmerge = true

# Always rebase when pulling
autosetuprebase = always


[rebase]
# Apply fixups automatically
autosquash = true

# Allow rebase on dirty working copy
autoStash = true

# Do not apply rebase if commits were removed via line removal (force drop to remove)
missingCommitsCheck=error

# Automatically update dependent branches when rebasing
updateRefs = true


[diff]
tool = meld

# Detect renames, including copies
renames = copies

# use mnemonic prefixes instead of a/b
mnemonicPrefix = true

# Use histogram diff algorithm
algorithm = histogram

# Highlight moved text
colorMoved = default

# Show log of submodules
submodule = log

[diff "lisp"]
# Use function name in diff
xfuncname = "^(\\(.*)$"

[diff "org"]
# Use org headline in diff
xfuncname = "^\\*+ ([a-zA-Z0-9]+.+)$"


[diff "ini"]
# Use section name in diff
xfuncname = "^\\[([a-zA-Z0-9]+)\\]$"


[difftool]
# Do not ask to start diff tool
prompt = false


[merge]
tool = meld

# Merge upstream branches when called without argument
defaultToUpstream = true

# Use diff3 style
conflictStyle = diff3


[merge "keep-local"]
# Pseudo-driver to always keep local changes on merge
# Needs to be activated with "<file> merge=keep-local" in .gitattributes
driver = true


[mergetool "meld"]
cmd = meld --auto-merge "$LOCAL" "$MERGED" "$REMOTE" --output "$MERGED"


[fetch]
# Update submodule if reference in parent was updated
recurseSubmodules = on-demand

# Remove deleted remote branches
prune = true


[push]
# Push without target refspec
default = simple

# Check if all submodules are pushed
recurseSubmodules = check

# Always push tags
followTags = true


[rerere]
# record/replay resolutions
enabled = true


[submodule]
recurse = true


[remote]
# automatically fetch pull requests to refs/pull/origin/<number>
fetch = +refs/pull/*/head:refs/pull/origin/*


[url "https://github.com/"]
insteadOf = github:


[url "https://github.com/cpp-entwickler-de/"]
insteadOf = cpped:


[github]
user = cpp-entwickler-de


[credential]
# store credentials in memory
helper = cache


[credential "https://github.com"]
username = cpp-entwickler-de


[lfs]
storage = ~/.cache/lfs


[alias]
root = rev-parse --show-toplevel

# show abbreviated status message
st = status -sb
stat = status -sb

markers = log --decorate --oneline --simplify-by-decoration --all
branch-info = branch -av

df = diff --word-diff=color
colordiff = diff --word-diff=color

last-commit = log -n1 -p --format=fuller
diff-log = log -p
commit-log = log --oneline --graph --decorate
changed-files = diff-tree --no-commit-id --name-only -r
file-history = log --follow -p --

# show commits by curent user
lastweek = !git log --all --no-merges --since='7 days ago' --abbrev-commit
lastmonth = !git log --all --no-merges --since='31 days ago' --abbrev-commit

# show all commits in week/month
worklog = !git log --all --no-merges --since='7 days ago' --format='%<(28,trunc)%Cgreen%cr %C(auto)%d %s' --author=$(git config user.email)
worklog-month = !git log --all --no-merges --since='31 days ago' --format='%<(28,trunc)%Cgreen%cr %C(auto)%d %s' --author=$(git config user.email)

# show tags by date
tag-dates = log --tags --simplify-by-decoration --pretty='format:%ai %d'

# show latest tag
latest-tag = describe --abbrev=0 --tags

# switch branch with selection
switch-branch = !git checkout $(git branch -a | sed -r 's/^[\\* \\(]*([^ ]+).*$/\\1/' | peco --select-1 --prompt 'Branch:')

find-change = log -p -S
unpushed = log --branches --not --remotes

# remove deleted files from git
remove-deleted = !git rm $(git ls-files -d)

# list all branches merge into current
list-merged = branch --merged

# remove selected merged branches
remove-merged = !git branch -D $(git branch --no-color --merged | grep -Fv '*' | grep -v master | peco --prompt 'Remove:')

# Clone submodules
clone-recursive = clone --recurse-submodules

# update submodules
pull-recursive = pull --recurse-submodules
update-submodules = submodule update --init --recursive

# add with file selection
add-files = !git add $(git status | sed -e 's/^[[:blank:][:alnum:][:punct:]].[[:blank:]]//g' | peco --prompt 'Files to add:')

# Mark commit as fix for given revision
fix = commit --fixup
fixup = "!git log -n 100 --pretty=format:'%h %s' --no-merges | fzf | cut -c -7 | xargs -o git commit --fixup"

# create zip archive
zip = archive --format zip

# unstage
unstage = reset HEAD --

# undo last commit
uncommit = reset soft HEAD~1

# Safe forced push
force-push = push --force-with-lease


[filter "lfs"]
smudge = git-lfs smudge -- %f
process = git-lfs filter-process
required = true
clean = git-lfs clean -- %f


[include]
# Read user-specific data from separate file
path = ~/.gitconfig.user

[include]
# Read user-specific data from separate file
path = ~/.gitconfig.customers
