#+TITLE: Emacs config
#+OPTIONS: toc:4
#+PROPERTY: header-args :results silent :tangle yes :comments yes
#+STARTUP: showeverything
#+auto_tangle: t

*  Custom configuration
#+begin_src emacs-lisp
(load (expand-file-name "user-config.el" user-emacs-directory) t t)
#+end_src

*  Package Management
** Set priorities
#+begin_src emacs-lisp
(setq package-archive-priorities '(("melpa"  . 100)
                                   ("gnu"    .  50)
                                   ("nongnu" .  25)))
#+end_src

** Automatically update
#+begin_src emacs-lisp
(use-package auto-package-update
  :custom
  (auto-package-update-interval 7)
  (auto-package-update-prompt-before-update t)
  (auto-package-update-hide-results t)
  (auto-package-update-delete-old-versions t)
  :config
  (auto-package-update-maybe)
  (auto-package-update-at-time "12:00"))
#+end_src

** [[https://github.com/tarsius/auto-compile][Automatically compile packages]]
Do not load outdated byte code
#+begin_src emacs-lisp
(setq load-prefer-newer t)
#+end_src

#+begin_src emacs-lisp
(use-package auto-compile
  :custom
  (auto-compile-ding nil)
  (auto-compile-display-buffer nil)
  (auto-compile-use-mode-line nil)
  :config
  (auto-compile-on-load-mode)
  (auto-compile-on-save-mode))
#+end_src

** [[https://gitlab.com/jabranham/system-packages][System packages]]
Do not ask for confirmation for new shell buffers
#+begin_src emacs-lisp
(setq async-shell-command-buffer 'new-buffer)
#+end_src

#+begin_src emacs-lisp
(use-package use-package-ensure-system-package)

(use-package system-packages
  :ensure-system-package ((pip . python3-pip) npm (gem . rubygems))
  :custom (system-packages-noconfirm t)
  :config
  (require 'tramp)
  (defun shark-bytes/run-command-sync-logged (wrapped-function &rest arguments)
    "Run a command synchronously and return the output."
    (shell-command-to-string (car arguments)))
    (advice-add 'async-shell-command :around #'shark-bytes/run-command-sync-logged)
    (add-hook 'after-init-hook '(lambda ()
                                  (advice-remove 'async-shell-command #'shark-bytes/run-command-sync-logged)))
    (defun shark-bytes/install-system-package (package &rest arguments)
      "Wrapper around system-packages-install to install only missing packages."
      (let ((system-packages-packagemanager (or (plist-get arguments :package-manager)
                                                system-packages-packagemanager)))
        (if (not (or (executable-find (or (plist-get arguments :executable)
                                          package))
                     (string-match (concat ".*" package ".*") (system-packages--run-command 'list-installed-packages nil package))))
            (progn
              (message (concat "Installing system package '" package "'."))
              (system-packages-install package))
          (message (concat "System package '" package "' is already installed. Skipping."))))
      nil)
    (add-to-list 'system-packages-supported-package-managers
                 '(dnf .
                       ((default-sudo . t)
                        (install . "dnf install --assumeyes")
                        (search . "dnf search")
                        (uninstall . "dnf remove --assumeyes")
                        (update . ("dnf upgrade --assumeyes"))
                        (clean-cache . "dnf clean all --assumeyes")
                        (log . "dnf history")
                        (get-info . "rpm -qi")
                        (get-info-remote . "dnf info")
                        (list-files-provided-by . "rpm -ql")
                        (verify-all-packages . "rpm -Va")
                        (verify-all-dependencies . "dnf repoquery --requires")
                        (remove-orphaned . "dnf autoremove")
                        (list-installed-packages . "dnf list --installed")
                        (list-installed-packages-all . nil)
                        (list-dependencies-of . "rpm -qR"))))
    (add-to-list 'system-packages-supported-package-managers
                 '(pip .
                       ((default-sudo . nil)
                        (install . "pip3 install")
                        (search . "pip3 search")
                        (uninstall . "pip3 uninstall")
                        (update . nil)
                        (clean-cache . nil)
                        (log . nil)
                        (get-info . nil)
                        (get-info-remote . nil)
                        (list-files-provided-by . nil)
                        (verify-all-packages . nil)
                        (verify-all-dependencies . nil)
                        (remove-orphaned . nil)
                        (list-installed-packages . "pip3 list")
                        (list-installed-packages-all . nil)
                        (list-dependencies-of . nil)))
                 t)
    (add-to-list 'system-packages-supported-package-managers
                 '(npm .
                       ((default-sudo . t)
                        (install . "npm --global install")
                        (search . "npm --global search")
                        (uninstall . "npm --global uninstall")
                        (update . "npm --global update")
                        (clean-cache . "npm --global cache clean")
                        (log . nil)
                        (get-info . nil)
                        (get-info-remote . nil)
                        (list-files-provided-by . nil)
                        (verify-all-packages . nil)
                        (verify-all-dependencies . nil)
                        (remove-orphaned . nil)
                        (list-installed-packages . "npm --global list")
                        (list-installed-packages-all . nil)
                        (list-dependencies-of . nil)))
                 t)
    (add-to-list 'system-packages-supported-package-managers
                 '(gem .
                       ((default-sudo . nil)
                        (install . "gem install")
                        (search . "gem query")
                        (uninstall . "gem uninstall")
                        (update . "gem update")
                        (clean-cache . "npm cache clean")
                        (log . nil)
                        (get-info . "gem query")
                        (get-info-remote . "gem search")
                        (system-packages-list-files-provided-by . nil)
                        (verify-all-packages . nil)
                        (verify-all-dependencies . nil)
                        (remove-orphaned . nil)
                        (list-installed-packages . "gem list")
                        (list-installed-packages-all . nil)
                        (list-dependencies-of . "gem dependency")))
                 t))
#+end_src

*  Internals
** Include cl package
#+begin_src emacs-lisp
(use-package cl-lib)
#+end_src

** Silence native compilation warnings
#+begin_src emacs-lisp
(setq native-comp-async-report-warnings-errors nil)
#+end_src

** Utilities
#+begin_src emacs-lisp
(defun shark-bytes/word-or-region-bounds()
  "Get the bounds of the current region or word under point."
  (if (use-region-p)
      (cons (region-beginning) (region-end))
    (bounds-of-thing-at-point 'word)))
#+end_src

#+begin_src emacs-lisp
(defun shark-bytes/truncate (string max-length)
  "Truncate STRING to MAX-LENGTH charcaters by replacing characters in the middle with an ellipsis."
  (if (< (length string) max-length)
      string
    (let ((len (min (/ (length string) 2) (/ (- max-length 1) 2))))
      (concat (substring string 0 len) "…" (substring string (- 0 (+ len (- max-length 1 (* len 2)))) nil)))))
#+end_src

** Increase subprocess read chunk size
#+begin_src emacs-lisp
(setq read-process-output-max (* 16 1024 1024))
#+end_src

** [[https://github.com/jschaf/esup][Startup Profiler]]
#+begin_src emacs-lisp
(use-package esup
  :commands (esup))
#+end_src

** [[https://github.com/lastquestion/explain-pause-mode][Waiting time information]]
#+begin_src emacs-lisp
(use-package explain-pause-mode
  :straight (explain-pause-mode
             :type git
             :host github
             :repo "lastquestion/explain-pause-mode")
  :init (explain-pause-mode))
#+end_src

** Debug on error
#+begin_src emacs-lisp
(setq debug-on-error init-file-debug
      eval-expression-debug-on-error init-file-debug)
#+end_src

** Debug on message
#+begin_src emacs-lisp
;; (setq debug-on-message "")
#+end_src

*  User Interface
** Startup
*** Disable startup screen
#+begin_src emacs-lisp
(setq inhibit-startup-screen t)
#+end_src

*** Disable startup message
#+begin_src emacs-lisp
(when (boundp 'username)
  (setq inhibit-startup-echo-area-message username))
#+end_src

** Frame Setup
Show normal for single monitor, fullscreen for non-4k monitor
#+begin_src emacs-lisp
(defvar shark-bytes/is-4k-monitor nil "Indicates if a 4k monitor is available.")

(set-frame-name "IDE")

(add-hook 'before-make-frame-hook '(lambda ()
                                     (setq default-frame-alist `((title . "IDE")
                                                                 (name . "IDE")
                                                                 (background-color . "#121212")
                                                                 (internal-border-width . 8))

                                           shark-bytes/is-4k-monitor (>= (x-display-pixel-width) 3840))
                                     (unless shark-bytes/is-4k-monitor
                                       (push '(fullscreen . fullboth) default-frame-alist))))
#+end_src

Show below other windows
#+begin_src emacs-lisp
(defun shark-bytes/move-frame-below-others (&optional frame)
  "Move frame below others in window system."
  (interactive)
  (with-selected-frame (or frame (selected-frame))
    (when (and window-system
               (not shark-bytes/is-4k-monitor))
      (x-send-client-message nil 0 nil "_NET_WM_STATE" 32 '(1 "_NET_WM_STATE_BELOW" 0)))))

(add-hook 'after-make-frame-functions #'shark-bytes/move-frame-below-others t)
#+end_src

** Do not auto-raise minibuffer
#+begin_src emacs-lisp
(setq minibuffer-auto-raise nil)
#+end_src

** Do not allow cursor in minibuffer
#+begin_src emacs-lisp
(setq minibuffer-prompt-properties '(read-only t point-entered minibuffer-avoid-prompt face minibuffer-prompt))
#+end_src

** GTK+ interface
*** Disable Menus, Toolbars, Scrollbars and Dialogs
#+begin_src emacs-lisp
(menu-bar-mode -1)
(tool-bar-mode -1)
(scroll-bar-mode -1)
(setq use-file-dialog nil
      use-dialog-box nil)
#+end_src

*** Use GTK+ Tooltips
#+begin_src emacs-lisp
(setq x-gtk-use-system-tooltips t)
#+end_src

** Notifications
#+begin_src emacs-lisp
(use-package notifications)
#+end_src

** Disable bell
#+begin_src emacs-lisp
(setq ring-bell-function 'ignore)
#+end_src

** Disable messages
#+begin_src emacs-lisp
(setq inhibit-message t)
#+end_src

** Keep more lines in message buffer
#+begin_src emacs-lisp
(setq message-log-max 16384)
#+end_src

** Remove annoying ellipsis when printing SEXP in message buffer
#+begin_src emacs-lisp
(setq eval-expression-print-length nil
      eval-expression-print-level nil
      edebug-print-length nil
      edebug-print-level nil
      print-length nil
      print-level nil)
#+end_src

** Disable mouse
#+begin_src emacs-lisp
(use-package disable-mouse
  :config
  (mouse-wheel-mode -1)
  (global-disable-mouse-mode))
#+end_src

*** Hide mouse pointer
#+begin_src emacs-lisp
(setq make-pointer-invisible t)
#+end_src

*** Do not copy highlighted text to the kill ring
#+begin_src emacs-lisp
(setq mouse-drag-copy-region nil)
#+end_src

** Use y/n instead of yes/no
#+begin_src emacs-lisp
(fset 'yes-or-no-p 'y-or-n-p)
#+end_src

** Do not show unusable commands
#+begin_src emacs-lisp
(setq read-extended-command-predicate #'command-completion-default-include-p)
#+end_src

** Show keystrokes earlier
#+begin_src emacs-lisp
(setq echo-keystrokes 0.1)
#+end_src

** History
#+begin_src emacs-lisp
(use-package savehist
  :custom
  (history-length 10000)
  (history-delete-duplicates t)
  (savehist-save-minibuffer-history t)
  (savehist-additional-variables '(kill-ring
                                   search-ring
                                   regexp-search-ring
                                   extended-command-history))
  (savehist-autosave-interval 180)
  :config
  (savehist-mode t))
#+end_src

** Fonts
*** Disable font cache compacting
#+begin_src emacs-lisp
(setq inhibit-compacting-font-caches t)
#+end_src

*** [[https://github.com/mickeynp/ligature.el][Support Ligatures]]
#+begin_src emacs-lisp
(use-package ligature
  :straight (ligature
             :type git
             :host github
             :repo "mickeynp/ligature.el")
  :config
  (ligature-set-ligatures 't '("www"))
  (ligature-set-ligatures 'eww-mode '("ff" "fi" "ffi"))
  (ligature-set-ligatures 'prog-mode '("|||>" "<|||" "<==>" "<!--" "####" "~~>" "***" "||=" "||>"
                                       ":::" "::=" "=:=" "===" "==>" "=!=" "=>>" "=<<" "=/=" "!=="
                                       "!!." ">=>" ">>=" ">>>" ">>-" ">->" "->>" "-->" "---" "-<<"
                                       "<~~" "<~>" "<*>" "<||" "<|>" "<$>" "<==" "<=>" "<=<" "<->"
                                       "<--" "<-<" "<<=" "<<-" "<<<" "<+>" "</>" "###" "#_(" "..<"
                                       "..." "+++" "/==" "///" "_|_" "www" "&&" "^=" "~~" "~@" "~="
                                       "~>" "~-" "**" "*>" "*/" "**/" "||" "|}" "|]" "|=" "|>" "|-" "{|"
                                       "[|" "]#" "::" ":::" ":=" ":>" ":<" "$>" "==" "=>" "!=" "!!" ">:"
                                       ">=" ">>" ">-" "-~" "-|" "->" "--" "..<" "-<" "<~" "<*" "<|" "<:"
                                       "<$" "<=" "<>" "<-" "<<" ">>" "<+" "</" "#{" "#[" "#:" "#=" "#!"
                                       "##" "###" "####" "#(" "#?" "#_" "%%" ".=" ".-" ".." ".?" "+>" "++" "?:"
                                       "^=" "?=" "?." "??" ";;" "/*" "/**" "/=" "/>" "//" "///" "__" "~~" "(*" "*)"
                                       "\\\\" "\\\\\\" "://" "[]" "{-" "-}" "<<<" ">>>" ">>-" ">>=" "<<-" "<<="  "<~"))
  (ligature-set-ligatures '(html-mode nxml-mode web-mode) '("<!--" "-->" "</>" "</" "/>" "://"))
  (global-ligature-mode t))
#+end_src

*** Show pretty symbols
Do not disable prettification if cursor is at edge of expression
#+begin_src emacs-lisp
(setq prettify-symbols-unprettify-at-point nil)
#+end_src

Allow prettification in comments
#+begin_src emacs-lisp
(defun shark-bytes/prettify-symbols-default-compose-p (start end _match)
  "Same as `prettify-symbols-default-compose-p', except compose symbols in comments as well."
  (let* ((syntaxes-beg (if (memq (char-syntax (char-after start)) '(?w ?_))
                           '(?w ?_) '(?. ?\\)))
         (syntaxes-end (if (memq (char-syntax (char-before end)) '(?w ?_))
                           '(?w ?_) '(?. ?\\))))
    (not (or (memq (char-syntax (or (char-before start) ?\s)) syntaxes-beg)
             (memq (char-syntax (or (char-after end) ?\s)) syntaxes-end)
             (nth 3 (syntax-ppss))))))

(add-hook 'prog-mode-hook '(lambda ()
                             (setq prettify-symbols-compose-predicate 'shark-bytes/prettify-symbols-default-compose-p)))
#+end_src

Prettify common symbols
#+begin_src emacs-lisp
(add-hook 'find-file-hook (lambda ()
                            (push '("\t" . ?) prettify-symbols-alist)
                            (push '("lambda" . ?λ) prettify-symbols-alist)
                            (push '("\r" . ?) prettify-symbols-alist)))

(global-prettify-symbols-mode)
#+end_src

Prettify escaped newline
#+begin_src emacs-lisp
(add-to-list 'font-lock-extra-managed-props 'display)

(font-lock-add-keywords nil
                        `((,(rx (group "\\") eol) 1 '(face nil display "﬌"))))
#+end_src

** Faces
*** Info
#+begin_src emacs-lisp
(defface info '((t :inherit default))
  "Face used for info text."
  :group 'basic-faces)
#+end_src

*** [[github:Fuco1/fontify-face][Fontify symbols representing faces]]
#+begin_src emacs-lisp
(use-package fontify-face
  :hook (emacs-lisp-mode . fontify-face-mode)
  :straight (fontify-face
             :type git
             :host github
             :repo "Fuco1/fontify-face"))
#+end_src

** Icons
*** [[https://github.com/domtronn/all-the-icons.el][Show icons]]
#+begin_src emacs-lisp
(defconst shark-bytes/faicon5-data-file (expand-file-name "data-faicon5.el" user-emacs-directory) "The data file for FontAwesome 5 icon names.")

(defun shark-bytes/update-faicon5-data ()
  (delete-file shark-bytes/faicon5-data-file)
  (write-region "(defvar fa5-icon-alist\n'(\n" nil shark-bytes/faicon5-data-file 'append)
  (with-current-buffer (url-retrieve-synchronously "https://raw.githubusercontent.com/FortAwesome/Font-Awesome/master/css/all.css")
    (widen)
    (goto-char 1)
    (save-match-data
      (while (search-forward-regexp (rx bol (0+ space) ".fa-" (group (+ (not (in ":")))) ":before" (0+ space) "{" (+ space) "content:" (0+ space) "\"\\" (group (+ (not (in "\""))))) nil t)
        (write-region (format "(\"%s\" . \"\\x%s\")\n" (match-string 1) (match-string 2)) nil shark-bytes/faicon5-data-file 'append)))
    (kill-buffer))
  (write-region "\n))\n(provide 'data-faicon5)" nil shark-bytes/faicon5-data-file 'append))

(defconst shark-bytes/material-icon-data-file (expand-file-name "data-material-icon.el" user-emacs-directory) "The data file for material icon names.")

(defun shark-bytes/update-material-icon-data ()
  (delete-file shark-bytes/material-icon-data-file)
  (write-region "(defvar material-icon-alist\n'(\n" nil shark-bytes/material-icon-data-file 'append)
  (with-current-buffer (url-retrieve-synchronously "https://raw.githubusercontent.com/google/material-design-icons/master/iconfont/codepoints")
    (widen)
    (goto-char 1)
    (save-match-data
      (while (search-forward-regexp (rx bol (0+ space) (group (+ (or (in alphanumeric) "_"))) (+ space) (group (+ (in hex-digit)))) nil t)
        (write-region (format "(\"%s\" . \"\\x%s\")\n" (match-string 1) (match-string 2)) nil shark-bytes/material-icon-data-file 'append)))
    (kill-buffer))
  (write-region "\n))\n(provide 'data-material-icon)" nil shark-bytes/material-icon-data-file 'append))

(use-package all-the-icons
  :config
  (unless (file-exists-p shark-bytes/faicon5-data-file)
    (shark-bytes/update-faicon5-data))
  (require 'data-faicon5 shark-bytes/faicon5-data-file)
  (define-icon faicon5 fa5-icon-alist "Font Awesome 5 Free" "fa-regular-400")
  (define-icon faicon-brands fa5-icon-alist "Font Awesome 5 Brands" "fa-brands-400")
  (unless (file-exists-p shark-bytes/material-icon-data-file)
    (shark-bytes/update-material-icon-data))
  (require 'data-material-icon shark-bytes/material-icon-data-file)
  (define-icon material-icon material-icon-alist "Material Icons" "MaterialIcons-Regular"))
#+end_src

** SVG Tag support
#+begin_src emacs-lisp
(use-package svg-tag-mode
  :demand t
  :custom (svg-tag-action-at-point 'edit)
  ;:config (global-svg-tag-mode)
  )
#+end_src

** Theme
*** Colors
Taken from SharkBytes background image.
#+begin_src emacs-lisp
(defvar shark-bytes-ok-saturated           "#35E356" "Color for okay messages (saturated).")
(defvar shark-bytes-info-saturated         "#E3D835" "Color for information (saturated).")
(defvar shark-bytes-warning-saturated      "#E38635" "Color for warnings (saturated).")
(defvar shark-bytes-error-saturated        "#E3353C" "Color for errors (saturated).")
(defvar shark-bytes-burning-saturated      "#E335A6" "Color for burning priority (saturated).")
(defvar shark-bytes-hot-saturated          "#CA36BB" "Color for hot priority (saturated).")
(defvar shark-bytes-warm-saturated         "#B137CF" "Color for warm priority (saturated).")
(defvar shark-bytes-cozy-saturated         "#9939E2" "Color for cozy priority (saturated).")
(defvar shark-bytes-mild-saturated         "#8139F4" "Color for mild priority (saturated).")
(defvar shark-bytes-bleak-saturated        "#6F3BFD" "Color for bleak priority (saturated).")
(defvar shark-bytes-chilly-saturated       "#563DF9" "Color for chilly priority (saturated).")
(defvar shark-bytes-cold-saturated         "#3D3FF3" "Color for cold priority (saturated).")
(defvar shark-bytes-icy-saturated          "#2442ED" "Color for icy priority (saturated).")
(defvar shark-bytes-freezing-saturated     "#0C43E8" "Color for freezinh priority (saturated).")
#+end_src

The saturation for non-saturated colors is 60.
#+begin_src emacs-lisp
(defvar shark-bytes-ok                     "#5BE375" "Color for okay messages.")
(defvar shark-bytes-info                   "#E3DA5B" "Color for information.")
(defvar shark-bytes-warning                "#E39A5B" "Color for warnings.")
(defvar shark-bytes-error                  "#E35B60" "Color for errors.")
(defvar shark-bytes-burning                "#E35BB3" "Color for burning priority.")
(defvar shark-bytes-hot                    "#CA51BE" "Color for hot priority.")
(defvar shark-bytes-warm                   "#B653CF" "Color for warm priority.")
(defvar shark-bytes-cozy                   "#A75AE2" "Color for cozy priority.")
(defvar shark-bytes-mild                   "#9A62F4" "Color for mild priority.")
(defvar shark-bytes-bleak                  "#8E65FD" "Color for bleak priority.")
(defvar shark-bytes-chilly                 "#7764F9" "Color for chilly priority.")
(defvar shark-bytes-cold                   "#6163F3" "Color for cold priority.")
(defvar shark-bytes-icy                    "#5F74ED" "Color for icy priority.")
(defvar shark-bytes-freezing               "#5D80E8" "Color for freezing priority.")
#+end_src

#+begin_src emacs-lisp
(defvar shark-bytes-window-background      "#121212" "Background color for windows.")
(defvar shark-bytes-block-background       "#212121" "Background for blocks.")
(defvar shark-bytes-menu-window-background "#303030" "Background color for menu windows.")
(defvar shark-bytes-current-line           "#424242" "Background color for the current line.")
(defvar shark-bytes-highlight              "#757575" "Color for normal text.")

(defvar shark-bytes-irrelevant             "#212121" "Color for shadow text.")
(defvar shark-bytes-insignificant          "#303030" "Color for shadow text.")
(defvar shark-bytes-minor                  "#424242" "Color for shadow text.")
(defvar shark-bytes-detail                 "#757575" "Color for shadow text.")

(defvar shark-bytes-shadow                 "#606060" "Color for shadow text.")
(defvar shark-bytes-text                   "#F1F1F1" "Color for normal text.")
#+end_src

***  Faces
#+begin_src emacs-lisp
(defface shark-bytes-ui '((t :inherit default)) "" :group 'user-interface)
(defface shark-bytes-ui-title '((t :inherit shark-bytes-ui :height 1.7 :weight bold)) "" :group 'user-interface)
(defface shark-bytes-ui-section '((t :inherit shark-bytes-ui :height 1.2 :weight bold)) "" :group 'user-interface)
(defface shark-bytes-ui-subsection '((t :inherit shark-bytes-ui :height 1.1 :weight bold)) "" :group 'user-interface)
(defface shark-bytes-ui-entry '((t :inherit shark-bytes-ui)) "" :group 'user-interface)
(defface shark-bytes-ui-info '((t :inherit shark-bytes-ui :weight light)) "" :group 'user-interface)
(defface shark-bytes-ui-insignificant `((t :inherit shark-bytes-ui :foreground ,shark-bytes-insignificant :weight light)) "" :group 'user-interface)
#+end_src

*** Load default theme
#+begin_src emacs-lisp
(defvar shark-bytes-theme 'shark-bytes "The default theme")

(setq custom-safe-themes shark-bytes-theme)

(load-theme shark-bytes-theme t)
#+end_src

** [[https://github.com/rakanalh/emacs-dashboard][Dashboard]]
#+begin_src emacs-lisp
(defvar shark-bytes/dashboard-footer nil "The dashboard footer text")

(use-package dashboard
  :after consult
  :custom
  (initial-buffer-choice (lambda () (get-buffer-create "*dashboard*")))
  (dashboard-startup-banner (let ((logo (expand-file-name "~/.logo.svg")))
                              (if (file-exists-p logo)
                                  logo
                                nil)))
  (dashboard-banner-logo-title "")
  (dashboard-page-separator "\n\n")
  (dashboard-items '((agenda . 15)
                     (recents . 20)
                     (projects . 10)))
  (dashboard-heading-icons '((recents   . "")
                             (bookmarks . "")
                             (agenda    . "")
                             (projects . "")
                             (registers . "")))
   (dashboard-set-heading-icons t)
   (dashboard-set-init-info nil)
   (dashboard-set-footer nil)
   (dashboard-footer-icon "")
   (dashboard-footer-messages (let ((file (expand-file-name "~/.dashboard-messages")))
                                (if (file-exists-p file)
                                  (with-temp-buffer
                                    (insert-file-contents file)
                                    (split-string (buffer-string) "\n" t))
                                  '(""))))
   :config
   (setq shark-bytes/dashboard-footer (dashboard-random-footer))
   (advice-add 'dashboard-insert-banner :after #'(lambda ()
                                                   (insert "\n")
                                                   (dashboard-center-line shark-bytes/dashboard-footer)
                                                   (insert " ")
                                                   (insert (propertize shark-bytes/dashboard-footer 'face 'dashboard-footer))
                                                   (insert "\n")))
   (defun shark-bytes/dashboard-insert-heading (heading &optional shortcut)
     "Insert a widget HEADING in dashboard buffer, adding SHORTCUT if provided."
     (when (and (display-graphic-p)
                dashboard-set-heading-icons)
       (insert (cond
                ((string-equal heading "Recent Files:")
                 (cdr (assoc 'recents dashboard-heading-icons)))
                ((string-equal heading "Bookmarks:")
                 (cdr (assoc 'bookmarks dashboard-heading-icons)))
                ((or (string-equal heading "Agenda for today:")
                     (string-equal heading "Agenda for the coming week:"))
                 (cdr (assoc 'agenda dashboard-heading-icons)))
                ((string-equal heading "Registers:")
                 (cdr (assoc 'registers dashboard-heading-icons)))
                ((string-equal heading "Projects:")
                 (cdr (assoc 'projects dashboard-heading-icons)))
                (t " ")))
       (insert " "))
     (insert (propertize heading 'face 'dashboard-heading))
     (when shortcut (insert (format " (%s)" shortcut))))
   (advice-add 'dashboard-insert-heading :override 'shark-bytes/dashboard-insert-heading)
   (push (regexp-quote dashboard-buffer-name) consult-buffer-filter)
   (defun shark-bytes/show-dashboard ()
     "Show the dashboard."
     (interactive)
     (switch-to-buffer "*dashboard*"))
   (dashboard-setup-startup-hook))
#+end_src

** Mode Line
#+begin_src emacs-lisp
(defun shark-bytes/buffer-name ()
  "Returns a (virtual) buffer name, for non-file modes."
  (pcase major-mode
    ('shell-mode default-directory)
    ('term-mode default-directory)
    ('dired-mode default-directory)
    (_ (or buffer-file-name
           (buffer-name)))))
#+end_src

*** Base Location
#+begin_src emacs-lisp
(defvar-local shark-bytes/project-dir-checked nil)
(defvar-local shark-bytes/project-dir nil)

(defun shark-bytes/tramp-file-remote-p (file)
  "Checks if a tramp file is actually remote."
  (and (tramp-tramp-file-p file)
       (not (string-equal (tramp-file-name-host (tramp-dissect-file-name file)) "localhost"))))

(with-eval-after-load "projectile"
  (defun shark-bytes/project-dir ()
    (interactive)
    (unless shark-bytes/project-dir-checked
      (setq shark-bytes/project-dir (or (when (and (ignore-errors (projectile-project-p))
                                                   (fboundp 'projectile-project-root))
                                          (projectile-project-root))
                                        (when vc-mode
                                          (let ((backend (vc-deduce-backend)))
                                            (when backend
                                              (ignore-errors (vc-call-backend backend 'root default-directory)))))))
      (setq shark-bytes/project-dir-checked t))
    shark-bytes/project-dir)

  (defun shark-bytes/modeline-project-id ()
    (let ((buffer-location (shark-bytes/buffer-name)))
      (when buffer-location
        (let* ((project-root (shark-bytes/project-dir))
               (project-name (projectile-project-name project-root))
               (remote (if (shark-bytes/tramp-file-remote-p buffer-location)
                           (tramp-file-name-host (tramp-dissect-file-name buffer-location))))
               (localname (if (tramp-tramp-file-p buffer-location)
                              (tramp-file-local-name buffer-location)
                            buffer-location)))
          (concat (when remote ((format " %s " remote))
                  (if (string-prefix-p (getenv "HOME") localname)
                      (replace-regexp-in-string "/Projects/" "🗐 " (concat "/"
                                                                           (file-name-directory (directory-file-name (file-relative-name (file-name-directory (or project-root
                                                                                                                                                           (file-name-directory localname)))
                                                                                                                                         (getenv "HOME"))))))
                    (concat "" (file-name-directory (directory-file-name (file-name-directory (tramp-file-local-name (or project-root
                                                                                                                          localname)))))))
                  (when (not (= 0 (length project-name))) (concat " " project-name)))))))))
#+end_src

*** Major mode icon
#+begin_src emacs-lisp
(defun shark-bytes/modeline-mode-icon ()
  (let ((icon (all-the-icons-icon-for-buffer)))
    (unless (symbolp icon)
      (propertize icon
                  'face `(:family ,(all-the-icons-icon-family-for-buffer)
                          :background ,(face-attribute 'header-line :background)
                          :height 1.2)
                  'display '(raise 0.0)
                  'help-echo (format "%s" major-mode)))))
#+end_src

*** Buffer name
Helper function to figure out version control root directory
#+begin_src emacs-lisp
(defvar shark-bytes/special-buffer-names-alist nil "A list of buffer name transformations.")

(with-eval-after-load "projectile"
  (defun shark-bytes/modeline-buffer-id ()
    (let* ((home-dir (getenv "HOME"))
           (buffer-virtual-name (shark-bytes/buffer-name))
           (buffer-name (let ((name (if buffer-virtual-name
                                        (if (tramp-tramp-file-p buffer-virtual-name)
                                            (tramp-file-local-name buffer-virtual-name)
                                          buffer-virtual-name)
                                      (format-mode-line "%b"))))
                          (or (cdr (assoc name shark-bytes/special-buffer-names-alist))
                              name)))
           (filename (if buffer-virtual-name
                         (file-truename buffer-name)))
           (project-root (or (shark-bytes/project-dir)
                             (when (and filename
                                        home-dir
                                        (string-equal (substring filename 0 (length home-dir)) home-dir))
                               home-dir)))
           (relative-path (when filename
                            (shark-bytes/truncate (file-name-directory (if project-root
                                                                           (file-relative-name filename project-root)
                                                                         filename)) 20)))
           (special-buffer (string-match "^\\*.*\\*?$" buffer-name)))
      (if special-buffer
          (propertize (replace-regexp-in-string "^\\*\\([^\*]*\\)\\*?$" "\\1" buffer-name)
                      'face `(:background ,(face-attribute 'header-line :background)
                                          :weight normal
                                          :slant italic))
        (concat
         (when relative-path
           (propertize relative-path
                       'face `(:background ,(face-attribute 'header-line :background)
                                           :weight light)))
         (propertize (file-name-nondirectory buffer-name)
                     'face `(:background ,(face-attribute 'header-line :background)
                                         :weight black)))))))
#+end_src

*** Docker project
#+begin_src emacs-lisp
(defun shark-bytes/modeline-docker-project ()
  (when (shark-bytes/is-docker-project-p)
    ""))
#+end_src

*** Git Info
#+begin_src emacs-lisp
(with-eval-after-load "magit"
  (defun shark-bytes/modeline-version-control ()
    (when (and buffer-file-name (magit-inside-worktree-p t))
      (let* ((branch (shark-bytes/truncate (magit-get-current-branch) 10))
             (branch-head (magit-rev-parse "--short" branch))
             (revision (magit-rev-parse "--short" "HEAD")))
        (concat " " branch (unless (string= revision branch-head)
                              (format " · %s (%s)" revision (magit-git-string "rev-list"
                                                                              "--count"
                                                                              (concat revision ".." branch-head)))))))))
#+end_src

*** Running process
#+begin_src emacs-lisp
(defvar-local shark-bytes/process-running nil "Flag to indicate if a process is running for the current buffer.")
(defvar-local shark-bytes/current-process-start-time nil)

(defun shark-bytes/get-run-time ()
  (time-subtract (current-time)
                 shark-bytes/current-process-start-time))

(defun shark-bytes/format-run-time (time)
  (let* ((run-time (truncate (float-time time)))
         (days (/ run-time 60 60 24))
         (hours (% (/ run-time 60 60) 24))
         (minutes (% (/ run-time 60) 60))
         (seconds (% run-time 60)))
    (concat (when (> days 0)
              (format "%d days " days))
            (when (or (> days 0)
                      (> hours 0))
              (format "%d:" hours))
            (if (or (> days 0)
                    (> hours 0))
                (format "%02d:" minutes)
              (when (> minutes 0)
                (format "%d:" minutes)))
            (if (or (> days 0)
                    (> hours 0)
                    (> minutes 0))
                (format "%02ds" seconds)
              (format "%ds" seconds)))))

(defun shark-bytes/modeline-process-running ()
  (when shark-bytes/process-running
    (concat "  " (shark-bytes/format-run-time (shark-bytes/get-run-time)))))
#+end_src

*** Show if file is opened in su-mode
#+begin_src emacs-lisp
(defun shark-bytes/modeline-su ()
  (when (string-match "^/su\\(do\\)?:" default-directory)
    ""))
#+end_src

*** Modification
#+begin_src emacs-lisp
(defun shark-bytes/modeline-modified ()
  (pcase (format-mode-line "%*")
    (`"*" "")
    (`"-" (if buffer-file-name
              (if vc-mode
                  (if (string-equal (vc-state buffer-file-name) 'edited)
                      ""
                    "")
                "")
            ""))
    (`"%" "")
    (_ "")))
#+end_src

*** Auto-format
#+begin_src emacs-lisp
(defun shark-bytes/modeline-auto-format ()
  (when (bound-and-true-p format-all-mode)
    ""))
#+end_src

*** Cursor position
#+begin_src emacs-lisp
(defun shark-bytes/modeline-position-info ()
  (format "%s %s" (format-mode-line "%4l ") (format-mode-line "%3c")))
#+end_src

*** Selected region
#+begin_src emacs-lisp
(defun shark-bytes/modeline-region-info ()
  (when mark-active
    (format " %s/%s/%s"
            (count-lines (region-beginning) (region-end))
            (count-words (region-end) (region-beginning))
            (- (region-end) (region-beginning)))))
#+end_src

*** IEdit Info
#+begin_src emacs-lisp
(defun shark-bytes/modeline-iedit-info ()
  (when (bound-and-true-p iedit-mode)
    (format " %s/%s"
            iedit-occurrence-index
            (iedit-counter))))
#+end_src

*** Show if overwrite mode is active
#+begin_src emacs-lisp
(defun shark-bytes/modeline-overwrite-mode ()
  (when overwrite-mode
    "סּ"))
#+end_src

*** Show if typo mode is active
#+begin_src emacs-lisp
(with-eval-after-load "typo"
  (defun shark-bytes/modeline-typo-mode ()
    (when typo-mode
      "")))
#+end_src

*** Show if buffer is narrowed
#+begin_src emacs-lisp
(defun shark-bytes/modeline-narrowed ()
    (when (buffer-narrowed-p)
      ""))
#+end_src

*** Show if buffer is filtered
#+begin_src emacs-lisp
(defun shark-bytes/modeline-filtered ()
    (when loccur-mode
      ""))
#+end_src

*** Key Lock
#+begin_src emacs-lisp
(defvar shark-bytes/caps-lock-active nil "Indicates if caps lock is enabled.")
(defvar shark-bytes/num-lock-active nil "Indicates if num lock is enabled.")

(add-hook 'after-init-hook '(lambda ()
                              (run-with-timer 60 3 '(lambda ()
                                                      (with-temp-buffer
                                                        (call-process "xset" nil t nil "q")
                                                        (let ((led-mask (string-to-number (save-match-data
                                                                                            (and (string-match ".*LED mask:[[:space:]]*\\([[:alnum:]]+\\).*" (buffer-string))
                                                                                                 (match-string 1 (buffer-string))))
                                                                                          16)))
                                                          (setq shark-bytes/caps-lock-active (eq (logand led-mask 1) 1)
                                                                shark-bytes/num-lock-active (eq (logand led-mask 2) 2))))))))

(defun shark-bytes/modeline-key-lock (lock icon)
   (when lock
     icon))
#+end_src

*** Line/Character Mode
#+begin_src emacs-lisp
(make-local-variable 'shark-bytes/term-char-mode)

(advice-add 'term-char-mode :after (lambda ()
                                     (setq shark-bytes/term-char-mode t)))

(advice-add 'term-line-mode :after (lambda ()
                                     (setq shark-bytes/term-char-mode nil)))

(defun shark-bytes/modeline-term-input-mode ()
  (when (and (equal major-mode 'term-mode)
             shark-bytes/term-char-mode)
    ""))
#+end_src

*** Current function
#+begin_src emacs-lisp
(defun shark-bytes/modeline-which-function ()
  "Print current function in hte mode line."
  (when-let ((current-function (when (bound-and-true-p which-function-mode)
                                 (which-function))))
    (concat " " (shark-bytes/truncate (substring-no-properties current-function) 30))))
#+end_src

*** Check Status
#+begin_src emacs-lisp
(defvar shark-bytes/modeline-check-status-functions nil "A list of functions that format mode line status data.")

(defun shark-bytes/check-process-status()
  "Format generic mode line status information."
  (format-mode-line mode-line-process))

(add-to-list 'shark-bytes/modeline-check-status-functions 'shark-bytes/check-process-status)

(defface shark-bytes/check-status-info `((t :inherit info
                                      :weight ultra-bold))
  "Face used for modeline check info status."
  :group 'shark-bytes/modeline-check-status)

(defface shark-bytes/check-status-warning `((t :inherit warning
                                         :foreground ,shark-bytes-warning-saturated
                                         :weight ultra-bold))
  "Face used for modeline check warning status."
  :group 'shark-bytes/modeline-check-status)

(defface shark-bytes/check-status-error `((t :inherit error
                                       :weight ultra-bold))
  "Face used for modeline check error status."
  :group 'shark-bytes/modeline-check-status)

(defun shark-bytes/modeline-check-status ()
  "Collect check status information."
  (let ((status (mapconcat 'identity
                           (-non-nil (mapcar 'funcall shark-bytes/modeline-check-status-functions))
                           " ")))
    (add-face-text-property 0 (length status) (list ':background (face-attribute 'header-line :background)) nil status)
    status))
#+end_src

*** Display on top
#+begin_src emacs-lisp
(defface shark-bytes-mode-line-emphasis '((t :inherit mode-line :weight bold)) "")
(defface shark-bytes-mode-line-de-emphasis '((t :inherit mode-line :height 0.7 :weight extra-light)) "")

(defvar shark-bytes/selected-window nil)
(add-function :before pre-redisplay-function (lambda (_wins) (setq shark-bytes/selected-window (selected-window))))

(setq-default mode-line-format nil)
(setq-default header-line-format
              '((:eval
                 (let* ((mode-line-face (if (eq (frame-selected-window) shark-bytes/selected-window)
                                       'mode-line
                                     'mode-line-inactive))
                        (left-side (mapconcat #'identity
                                              (-non-nil (list (shark-bytes/modeline-mode-icon)
                                                              (shark-bytes/truncate (shark-bytes/modeline-project-id) 20)
                                                              (propertize (or (when (fboundp 'shark-bytes/modeline-version-control)
                                                                                (shark-bytes/modeline-version-control))
                                                                              "")
                                                                          'face 'shark-bytes-mode-line-de-emphasis)
                                                              (propertize (or (shark-bytes/modeline-buffer-id)
                                                                              "")
                                                                          'face 'shark-bytes-mode-line-emphasis)
                                                              (propertize (or (shark-bytes/modeline-which-function)
                                                                              "")
                                                                          'face 'shark-bytes-mode-line-de-emphasis
                                                                          'display '(raise 0.0))))
                                              "  "))
                        (right-side (mapconcat #'identity
                                          (-non-nil (list (shark-bytes/modeline-process-running)
                                                          (shark-bytes/modeline-su)
                                                          (shark-bytes/modeline-modified)
                                                          (shark-bytes/modeline-overwrite-mode)
                                                          (shark-bytes/modeline-auto-format)
                                                          (shark-bytes/modeline-typo-mode)
                                                          (shark-bytes/modeline-narrowed)
                                                          (shark-bytes/modeline-filtered)
                                                          (shark-bytes/modeline-key-lock (symbol-value 'shark-bytes/caps-lock-active) "")
                                                          (shark-bytes/modeline-key-lock (symbol-value 'shark-bytes/num-lock-active) "")
                                                          (shark-bytes/modeline-term-input-mode)
                                                          (shark-bytes/modeline-position-info)
                                                          (shark-bytes/modeline-region-info)
                                                          (shark-bytes/modeline-iedit-info)
                                                          (shark-bytes/modeline-check-status)
                                                          ))
                                          "  ")))
                    (concat (propertize "  " 'display `(raise +0.4))
                                       left-side
                                       (propertize " " 'display `(space :align-to (- right ,(* 1.1 (length right-side)))))
                                       (propertize " " 'display `(raise -0.4))
                                       right-side)))))
#+end_src

*** Update every second
#+begin_src emacs-lisp
(run-with-timer 0 1 '(lambda()
                       (force-mode-line-update t)))
#+end_src

** Sidebar
#+begin_src emacs-lisp
(defface shark-bytes-sidebar '((t :inherit shark-bytes-ui)) "Default face for the sidebar" :group 'sidebar)
(defface shark-bytes-sidebar-title '((t :inherit shark-bytes-ui-title)) "Face for sidebar titles" :group 'sidebar)
(defface shark-bytes-sidebar-section '((t :inherit shark-bytes-ui-section)) "Face for section headers" :group 'sidebar)
(defface shark-bytes-sidebar-entry '((t :inherit shark-bytes-ui)) "Face for sidebar entries" :group 'sidebar)
(defface shark-bytes-sidebar-info `((t :inherit shark-bytes-ui  :foreground ,shark-bytes-detail)) "Face for sidebar info lines" :group 'sidebar)
(defface shark-bytes-sidebar-detail `((t :inherit shark-bytes-info :height 0.8 :weight bold :foreground ,shark-bytes-detail)) "Face for sidebar details" :group 'sidebar)

(defvar shark-bytes/sidebar-buffer "*sidebar-buffer*"
  "The sidebar buffer.")

(with-eval-after-load "consult"
  (push (regexp-quote shark-bytes/sidebar-buffer) consult-buffer-filter))

(defvar shark-bytes/sidebar-active nil "Flag to indicate whether the sidebar is active.")

(defun shark-bytes/create-sidebar ()
  "Create a new sidebar frame"
  (setq default-minibuffer-frame (window-frame))
  (let* ((parent (window-frame))
         (sidebar (make-frame `((parent-frame . ,parent)
                                (no-accept-focus . t)
                                (min-width  . t)
                                (min-height . t)
                                (border-width . 0)
                                (internal-border-width . 16)
                                (line-spacing . 8)
                                (vertical-scroll-bars . nil)
                                (horizontal-scroll-bars . nil)
                                (left-fringe . 0)
                                (right-fringe . 0)
                                (user-position . nil)
                                (user-size . nil)
                                (keep-ratio . (height-only . nil))
                                (menu-bar-lines . 0)
                                (tool-bar-lines . 0)
                                (no-other-frame . t)
                                (desktop-dont-save . t)
                                (unsplittable . t)
                                (background-color . "#303030")
                                (no-other-frame . t)
                                (undecorated . t)
                                (pixelwise . t)
                                (visibility . nil)
                                (cursor-type . nil)
                                (minibuffer . nil))))
         (window (frame-root-window sidebar)))
    (set-face-attribute 'default sidebar :family (face-attribute 'shark-bytes-ui :family))
    (set-frame-parameter parent 'sidebar sidebar)
    (set-window-buffer window (get-buffer-create shark-bytes/sidebar-buffer))
    (set-window-dedicated-p window t)
    (set-window-parameter window 'mode-line-format 'none)
    (set-window-parameter window 'header-line-format 'none)
    sidebar))

(defun shark-bytes/get-sidebar ()
  "Return the existing sidebar or create a new one."
  (let ((sidebar (frame-parameter nil 'sidebar)))
    (if (frame-live-p sidebar)
        sidebar
      (shark-bytes/create-sidebar))))

(defun shark-bytes/show-sidebar ()
  "Show the sidebar."
  (let* ((sidebar (shark-bytes/get-sidebar)))
    (modify-frame-parameters sidebar `((top    . 0)
                                       (height . 1.0)
                                       (left . 0)))
    (shark-bytes/resize-sidebar)
    (make-frame-visible sidebar)))

(defun shark-bytes/format-sidebar-element(element type)
  "Format an elment of the sidebar."
  (when element
    (add-face-text-property 0
                            (length element)
                            (pcase type
                              (:title 'shark-bytes-sidebar-title)
                              (:header 'shark-bytes-sidebar-section)
                              (:entry 'shark-bytes-sidebar-entry)
                              (:info 'shark-bytes-sidebar-info)
                              (:detail 'shark-bytes-sidebar-detail)
                              (_ 'shark-bytes-ui))
                            nil
                            element)
    (concat (propertize "​" 'display `(raise ,(if (eq type :header)
                                                 +0.7
                                               0.0)))
            element)))

(defun shark-bytes/resize-sidebar ()
  "Resize the sidebar."
  (let ((sidebar (shark-bytes/get-sidebar))
        (max-width 0))
    (with-current-buffer (window-buffer (frame-root-window sidebar))
      (save-excursion
        (goto-char (point-min))
        (while (not (eobp))
          (end-of-line)
          (setq max-width (max (current-column) max-width))
          (forward-line 1))))
    (set-frame-size sidebar (+ max-width 2) (frame-height sidebar))))

(defun shark-bytes/format-sidebar-header (title &rest args)
  "Format a sidebar header."
  (s-join "\n"
          (-non-nil (-concat (list (shark-bytes/format-sidebar-element (concat "☰ " title) :title))
                             (mapcar (lambda (content)
                                       (shark-bytes/format-sidebar-element content :info))
                              args)
                             (list " ")))))

(defun shark-bytes/hide-sidebar-for-minibuffer ()
  "Hide the sidebar when showing minibuffer."
  (let ((sidebar (shark-bytes/get-sidebar)))
    (setq shark-bytes/sidebar-active (frame-visible-p sidebar))
    (make-frame-invisible sidebar)))

(defun shark-bytes/restore-sidebar-after-minibuffer ()
  "Restore the sidebar after closing the minibuffer."
  (when shark-bytes/sidebar-active
    (make-frame-visible (shark-bytes/get-sidebar))))

(add-hook 'minibuffer-setup-hook 'shark-bytes/hide-sidebar-for-minibuffer)
(add-hook 'minibuffer-exit-hook 'shark-bytes/restore-sidebar-after-minibuffer)
#+end_src

** Transient
#+begin_src emacs-lisp
(use-package transient
  :custom
  (transient-show-popup 0.4)
  (transient-force-single-column t)
  (transient-mode-line-format nil)
  (transient-semantic-coloring nil)
  (transient-detect-key-conflicts t)
  :config
  (defun shark-bytes/show-transient-sidebar (buffer _alist)
    "Show transient in the sidebar"
    (let ((sidebar (shark-bytes/get-sidebar)))
      (with-current-buffer shark-bytes/sidebar-buffer
        (erase-buffer)
        (insert (with-current-buffer buffer
                  (buffer-string))))
      (redirect-frame-focus sidebar nil)
      (shark-bytes/show-sidebar)
      (frame-root-window sidebar)))
  (setq transient-display-buffer-action '(shark-bytes/show-transient-sidebar))
  (advice-add 'transient--delete-window :override #'(lambda ()
                                                      (make-frame-invisible (shark-bytes/get-sidebar)))))

(defun shark-bytes/format-transient-key (wrapped-function &optional key command)
  "Format transient keys."
  (let ((face (or (and (transient--semantic-coloring-p)
                       (transient--suffix-color command))
                  'transient-key)))
    (propertize key
                'face face
                'display (svg-tag-make key :face face :inverse (not (eq (transient--get-predicate-for command) 'transient--do-stay))))))

(advice-add 'transient--colorize-key :around #'shark-bytes/format-transient-key)
#+end_src

** [[https://github.com/minad/vertico][Minibuffer completion]]
#+begin_src emacs-lisp
(use-package vertico
  :init (vertico-mode)
  :hook ((rfn-eshadow-update-overlay . vertico-directory-tidy))
  :bind (:map vertico-map
              ("<pos1>" . vertico-first)
              ("<end>" . vertico-last)
              ("<left>" . vertico-previous-group)
              ("<right>" . vertico-next-group))
  :custom
  (vertico-resize nil)
  (vertico-count 20)
  (vertico-cycle t)
  (read-buffer-completion-ignore-case t)
  (completion-ignore-case t))

(use-package vertico-directory
  :after vertico
  :straight nil
  :load-path "straight/repos/vertico/extensions/"
  :bind (:map vertico-map
              ("RET" . vertico-directory-enter)
              ("DEL" . vertico-directory-delete-char)
              ("M-DEL" . vertico-directory-delete-word)))

(use-package vertico-repeat
  :after vertico
  :straight nil
  :load-path "straight/repos/vertico/extensions/"
  :hook (minibuffer-setup . vertico-repeat-save))
#+end_src

*** [[https://github.com/oantolin/orderless][Advanced filtering]]
#+begin_src emacs-lisp
(use-package orderless
  :custom
  (completion-styles '(orderless partial-completion))
  (completion-category-defaults nil)
  (completion-category-overrides nil)
  (orderless-component-separator "[ &+]"))
#+end_src


@minad’s orderless configuration
(use-package orderless
  :demand t
  :config
  (defvar +orderless-dispatch-alist
    '((?% . char-fold-to-regexp)
      (?! . orderless-without-literal)
      (?`. orderless-initialism)
      (?= . orderless-literal)
      (?~ . orderless-flex)))

  ;; Recognizes the following patterns:
  ;; * ~flex flex~
  ;; * =literal literal=
  ;; * %char-fold char-fold%
  ;; * `initialism initialism`
  ;; * !without-literal without-literal!
  ;; * .ext (file extension)
  ;; * regexp$ (regexp matching at end)
  (defun +orderless-dispatch (pattern index _total)
    (cond
     ;; Ensure that $ works with Consult commands, which add disambiguation suffixes
     ((string-suffix-p "$" pattern)
      `(orderless-regexp . ,(concat (substring pattexrn 0 -1) "[\x200000-\x300000]*$")))
     ;; File extensions
     ((and
       ;; Completing filename or eshell
       (or minibuffer-completing-file-name
           (derived-mode-p 'eshell-mode))
       ;; File extension
       (string-match-p "\\`\\.." pattern))
      `(orderless-regexp . ,(concat "\\." (substring pattern 1) "[\x200000-\x300000]*$")))
     ;; Ignore single !
     ((string= "!" pattern) `(orderless-literal . ""))
     ;; Prefix and suffix
     ((if-let (x (assq (aref pattern 0) +orderless-dispatch-alist))
          (cons (cdr x) (substring pattern 1))
        (when-let (x (assq (aref pattern (1- (length pattern))) +orderless-dispatch-alist))
          (cons (cdr x) (substring pattern 0 -1)))))))

  ;; Define orderless style with initialism by default
  (orderless-define-completion-style +orderless-with-initialism
    (orderless-matching-styles '(orderless-initialism orderless-literal orderless-regexp)))

  ;; You may want to combine the `orderless` style with `substring` and/or `basic`.
  ;; There are many details to consider, but the following configurations all work well.
  ;; Personally I (@minad) use option 3 currently. Also note that you may want to configure
  ;; special styles for special completion categories, e.g., partial-completion for files.
  ;;
  ;; 1. (setq completion-styles '(orderless))
  ;; This configuration results in a very coherent completion experience,
  ;; since orderless is used always and exclusively. But it may not work
  ;; in all scenarios. Prefix expansion with TAB is not possible.
  ;;
  ;; 2. (setq completion-styles '(substring orderless))
  ;; By trying substring before orderless, TAB expansion is possible.
  ;; The downside is that you can observe the switch from substring to orderless
  ;; during completion, less coherent.
  ;;
  ;; 3. (setq completion-styles '(orderless basic))
  ;; Certain dynamic completion tables (completion-table-dynamic)
  ;; do not work properly with orderless. One can add basic as a fallback.
  ;; Basic will only be used when orderless fails, which happens only for
  ;; these special tables.
  ;;
  ;; 4. (setq completion-styles '(substring orderless basic))
  ;; Combine substring, orderless and basic.
  ;;
  (setq completion-styles '(orderless)
        completion-category-defaults nil
        ;;; Enable partial-completion for files.
        ;;; Either give orderless precedence or partial-completion.
        ;;; Note that completion-category-overrides is not really an override,
        ;;; but rather prepended to the default completion-styles.
        ;; completion-category-overrides '((file (styles orderless partial-completion))) ;; orderless is tried first
        completion-category-overrides '((file (styles partial-completion)) ;; partial-completion is tried first
                                        ;; enable initialism by default for symbols
                                        (command (styles +orderless-with-initialism))
                                        (variable (styles +orderless-with-initialism))
                                        (symbol (styles +orderless-with-initialism)))
        orderless-component-separator #'orderless-escapable-split-on-space ;; allow escaping space with backslash!
        orderless-style-dispatchers '(+orderless-dispatch)))

*** [[https://github.com/minad/marginalia][Show more information]]
#+begin_src emacs-lisp
(use-package marginalia
  :config
  (add-to-list 'marginalia-command-categories '(flycheck-error-list-set-filter . builtin))
  (add-to-list 'marginalia-command-categories '(projectile-find-file . project-file))
  (add-to-list 'marginalia-command-categories '(projectile-recentf . project-file))
  (add-to-list 'marginalia-command-categories '(projectile-switch-to-buffer . buffer))
  (add-to-list 'marginalia-command-categories '(projectile-switch-project . project-file))
  :custom
  (truncate-string-ellipsis "…")
  (marginalia-align 'right)
  :init (marginalia-mode))
#+end_src

#+begin_src emacs-lisp
(use-package all-the-icons-completion
  :after (all-the-icons marginalia)
  :hook (marginalia-mode . all-the-icons-completion-marginalia-setup)
  :init (all-the-icons-completion-mode))
#+end_src

*** [[https://github.com/minad/consult][Additional completion functions]]
#+begin_src emacs-lisp
(use-package consult
  :demand t
  :hook (completion-list-mode . consult-preview-at-point-mode)
  :bind (([remap apropos] . consult-apropos)
         ([remap bookmark-jump] . consult-bookmark)
         ([remap goto-line] . consult-goto-line)
         ([remap imenu] . consult-imenu)
         ([remap locate] . consult-locate)
         ([remap load-theme] . consult-theme)
         ([remap man] . consult-man)
         ([remap recentf-open-files] . consult-recent-file)
         ([remap switch-to-buffer] . consult-buffer)
         ("C-x C-b" . shark-bytes/switch-to-buffer-show-all)
         ([remap switch-to-buffer-other-window] . consult-buffer-other-window)
         ([remap switch-to-buffer-other-frame] . consult-buffer-other-frame)
         ([remap yank-pop] . consult-yank-pop))
  :custom
  (consult-ripgrep-args "rg --null --line-buffered --color=never --max-columns=1000 --path-separator /   --smart-case --no-heading --line-number .")
  (consult-line-point-placement 'match-beginning)
  (consult-line-start-from-top t)
  (consult-preview-key (list :debounce 0.75 'any))
  (consult-async-min-input 2)
  (consult-async-refresh-delay 0.15)
  (consult-async-input-throttle 0.2)
  (consult-async-input-debounce 0.1)
  (consult-async-split-style 'comma)
  (xref-show-xrefs-function #'consult-xref)
  (consult-narrow-key "<")
  (consult-line-numbers-widen t)
  (xref-show-definitions-function #'consult-xref)
  :config
  (setenv "RIPGREP_CONFIG_PATH" (expand-file-name "~/.ripgreprc"))
  (defun shark-bytes/switch-to-buffer-show-all ()
    "Select a buffer without filter."
    (interactive)
    (let ((consult-buffer-filter))
      (consult-buffer)))
  (defun shark-bytes/consult-line-preset ()
    "Run consult-line with region or symbol at point."
    (interactive)
    (consult-line (shark-bytes/region-or-symbol)))
  (defun shark-bytes/consult-ripgrep (original-function &optional dir initial-argument)
     "Use project and region/thing at point as rg input."
     (interactive)
     (let ((initial (list (or initial-argument
                              (if (use-region-p)
			          (buffer-substring (region-beginning) (region-end))
                                (thing-at-point 'symbol))))))
       (apply original-function (or dir
                                    (shark-bytes/project-dir)
                                    default-directory) initial)))
  (advice-add 'consult-ripgrep :around #'shark-bytes/consult-ripgrep)
  (consult-customize consult-git-grep consult-recent-file consult--source-recent-file consult--source-project-recent-file :preview-key (kbd "C-p"))
  (advice-add #'completing-read-multiple :override #'consult-completing-read-multiple)
  (push "\\*emacs\\*" consult-buffer-filter)
  (push "\\*Backtrace\\*" consult-buffer-filter)
  (push "\\*Buffer List\\*" consult-buffer-filter)
  (push "\\*Async-native-compile-log\\*" consult-buffer-filter)
  (push "\\*straight-process\\*" consult-buffer-filter)
  (push "\\*straight-byte-compilation\\*" consult-buffer-filter)
  (push "\\*Messages\\*" consult-buffer-filter)
  (push "\\*Warnings\\*" consult-buffer-filter)
  (push "\\*Completions\\*" consult-buffer-filter)
  (push "\\*Help\\*" consult-buffer-filter)
  (push "\\*compilation\\*" consult-buffer-filter)
  (push "\\*compile.*\\*" consult-buffer-filter)
  (push "\\*Compilation Log\\*" consult-buffer-filter))
#+end_src

**** [[github:karthink/consult-dir][Directories]]
#+begin_src emacs-lisp
(use-package consult-dir
  :ensure-system-package fd-find
  :after consult
  :custom
  (consult-dir-project-list-function #'consult-dir-projectile-dirs)
  (consult-dir-sources '(consult-dir--source-bookmark consult-dir--source-default consult-dir--source-project consult-dir--source-recentf consult-dir--source-tramp-local shark-bytes/consult-dir--source-local))
  :config
  (defvar shark-bytes/consult-dir--source-local `(:name "Local Directories"
                                                  :narrow ?d
                                                  :category file
                                                  :face consult-file
                                                  :history file-name-history
                                                  :items ,(lambda ()
                                                            (split-string (let ((default-directory "/"))
                                                                            (shell-command-to-string (substring-no-properties (format "fd --color=never --absolute-path --type d %s"
                                                                                                                                      (string-join (mapcar (lambda (pattern) (format "--exclude '%s'" pattern)) '(*uild* /proc /run)) " "))))))))))
#+end_src

*** Header line
#+begin_src emacs-lisp
(defface shark-bytes-minibuffer-header '((t :inherit default)) "Face for the minibuffer header")

(defun shark-bytes/minibuffer-header ()
  "Add a header to the minibuffer."
  (overlay-put (make-overlay (point-min) (+ (point-min) 1))
               'before-string
               (concat (propertize " " 'display '(raise +0.5))
                       (propertize "… Completion" 'face `shark-bytes-minibuffer-header)
                       (propertize " \n" 'display '(raise -0.5)))))

(add-hook 'minibuffer-setup-hook #'shark-bytes/minibuffer-header)
#+end_src

** Imenu
*** Automatically rescan
#+begin_src emacs-lisp
(set-default 'imenu-auto-rescan t)
#+end_src

*** Show results from all buffers
#+begin_src emacs-lisp
(use-package imenu-anywhere
  :custom (imenu-anywhere-friendly-modes '((c-mode c++-mode cmake-mode qml-mode gtest-mode)
                                           (clojure-mode clojurex-mode clojurec-mode clojurescript-mode cider-repl-mode cider-clojure-interaction-mode)
                                           (emacs-lisp-mode inferior-emacs-lisp-mode lisp-interaction-mode)
                                           (ess-mode inferior-ess-mode)
                                           (python-mode inferior-python-mode))))
#+end_src

** Buffers
*** Optimize scrolling
#+begin_src emacs-lisp
(setq fast-but-imprecise-scrolling t
      redisplay-skip-fontification-on-input t)

(pixel-scroll-mode 1)
#+end_src

*** Do not adjust auto-window-vscroll
This optimizes line-scrolling.
#+begin_src emacs-lisp
(setq auto-window-vscroll nil)
#+end_src

*** Disable bidirectional support
#+begin_src emacs-lisp
(setq-default bidi-display-reordering 'left-to-right
              bidi-paragraph-direction 'left-to-right)
(setq bidi-inhibit-bpa t)
#+end_src

*** Remember open buffers
#+begin_src emacs-lisp
(defun shark-bytes/yes (_)
  t)

(defun shark-bytes/always-yes (wrapped-function &rest arguments)
  (advice-add 'yes-or-no-p :override #'shark-bytes/yes)
  (advice-add 'y-or-n-p :override #'shark-bytes/yes)
  (let ((result (apply wrapped-function arguments)))
    (advice-remove 'yes-or-no-p #'shark-bytes/yes)
    (advice-remove 'y-or-n-p #'shark-bytes/yes)
    result))

(use-package desktop
  :custom
  (desktop-dirname user-emacs-directory)
  (desktop-lazy-idle-delay 10)
  (desktop-lazy-verbose nil)
  (desktop-load-locked-desktop t)
  (desktop-path (list user-emacs-directory))
  (desktop-restore-eager 5)
  (desktop-restore-eager 5)
  (desktop-restore-forces-onscreen nil)
  (desktop-restore-frames t)
  :config
  (desktop-save-mode 1)
  (run-with-idle-timer 300 t '(lambda ()
                                (desktop-save user-emacs-directory)))
  (advice-add 'desktop-save :around #'shark-bytes/always-yes)
  (advice-add 'desktop-read :around #'shark-bytes/always-yes))
#+end_src

*** Go to last position when opening buffer
#+begin_src emacs-lisp
(save-place-mode 1)
#+end_src

Switch to previous buffer
#+begin_src emacs-lisp
(defun shark-bytes/previous-buffer ()
  (interactive)
  (switch-to-buffer (other-buffer (current-buffer) 1)))
#+end_src

*** Scratch Buffer
**** Start with empty scratch buffer (no message)
#+begin_src emacs-lisp
(setq initial-scratch-message nil)
#+end_src

**** [[https://github.com/Fanael/persistent-scratch][Save scratch buffers between sessions]]
#+begin_src emacs-lisp
(use-package persistent-scratch
  :config (persistent-scratch-setup-default))
#+end_src

*** Popup Windows
(use-package popwin
#+begin_src emacs-lisp
  :config
  (push '("*Messages*" :dedicated t :position bottom :height 40 :tail) popwin:special-display-config)
  (push '(compilation-mode :dedicated t :position bottom :height 30) popwin:special-display-config)
  (push '(help-mode :dedicated t :position bottom :height 40) popwin:special-display-config)
  (popwin-mode 1))
#+end_src

*** Add path if required to make buffer name unique
#+begin_src emacs-lisp
(setq uniquify-buffer-name-style 'forward
      uniquify-separator "/"
      uniquify-after-kill-buffer-p t
      uniquify-ignore-buffers-re "^\\*")
#+end_src

*** [[https://github.com/dimitri/switch-window][Use smarter window switching (numbered windows)]]
#+begin_src emacs-lisp
(use-package switch-window
  :custom (switch-window-background t)
  :config (global-set-key [remap other-window] #'switch-window))
#+end_src

*** Do not show buffer boundaries in fringe
#+begin_src emacs-lisp
(setq-default indicate-buffer-boundaries nil)
#+end_src

*** [[https://github.com/mina86/auto-dim-other-buffers.el][Dim inactive buffers]]
#+begin_src emacs-lisp
(use-package auto-dim-other-buffers
  :hook (after-init . auto-dim-other-buffers-mode)
  :custom (auto-dim-other-buffers-dim-on-focus-out nil))
#+end_src

*** Use recursive minibuffer
#+begin_src emacs-lisp
(setq enable-recursive-minibuffers t)
#+end_src

Indicate recursive minibuffer
#+begin_src emacs-lisp
(minibuffer-depth-indicate-mode 1)
#+end_src

*** Highlight minibuffer when in use
#+begin_src emacs-lisp
(defface shark-bytes-minibuffer-active '((t :inherit default))
  "Face used for active minibuffer."
  :group 'basic-faces)

(add-hook 'minibuffer-setup-hook (lambda ()
                                   (make-local-variable 'face-remapping-alist)
                                   (add-to-list 'face-remapping-alist '(default shark-bytes-minibuffer-active))))
#+end_src

*** Kill current buffer by default
#+begin_src emacs-lisp
(defvar shark-bytes/bury-buffers-list '("*scratch*" "*Messages*") "A list of buffer names to bury instead of kill.")

(defun shark-bytes/kill-default-buffer ()
  "Kill the currently active buffer."
  (interactive)
  (let ((kill-buffer-query-functions)
        (name (substring-no-properties (shark-bytes/buffer-name))))
    (if (member name shark-bytes/bury-buffers-list)
        (bury-buffer)
      (when (and buffer-file-name
                 (buffer-modified-p))
        (save-buffer))
      (kill-buffer))))
#+end_src

*** Do not ask before killing buffer with running processes
#+begin_src emacs-lisp
(setq kill-buffer-query-functions
      (remq 'process-kill-buffer-query-function
            kill-buffer-query-functions))
#+end_src

*** Multi-buffer kill
#+begin_src emacs-lisp
(defvar clean-buffer-list-delay-general 1)
#+end_src

*** Kill unused buffers automatically
#+begin_src emacs-lisp
(defun shark-bytes/clean-buffer-list-delay-1hour (name)
  "Wrapper around clean-buffer-list-delay to allow delays in hours instead of days"
  (or (assoc-default name clean-buffer-list-kill-buffer-names #'string=
                     clean-buffer-list-delay-special)
      (assoc-default name clean-buffer-list-kill-regexps
                     (lambda (regex input)
                       (if (functionp regex)
                           (funcall regex input) (string-match regex input)))
                     clean-buffer-list-delay-special)
      (* 60 60)))

(fset 'clean-buffer-list-delay 'shark-bytes/clean-buffer-list-delay-1hour)
(run-with-timer 0 (* 60 60) 'clean-buffer-list)
#+end_src

*** Allow erasing
#+begin_src emacs-lisp
(put 'erase-buffer 'disabled nil)
#+end_src

*** Lines
**** Highlight current line
#+begin_src emacs-lisp
(use-package hl-line
  :hook ((after-init . global-hl-line-mode)
         (find-file . hl-line-mode))
  :config (advice-add 'hl-line-make-overlay :after (lambda ()
                                                     (unless (window-minibuffer-p)
                                                       (when hl-line-overlay
                                                         (overlay-put hl-line-overlay 'priority 1000))))))
#+end_src

**** Break long lines
#+begin_src emacs-lisp
(setq visual-line-fringe-indicators '(nil nil))
(global-visual-line-mode 1)
#+end_src

**** [[https://github.com/purcell/page-break-lines][Show page breaks as line instead of '^L']]
#+begin_src emacs-lisp
(use-package page-break-lines
  :config
  (global-page-break-lines-mode))
#+end_src

**** Show line numbers
#+begin_src emacs-lisp
(setq display-line-numbers nil
      display-line-numbers-grow-only t
      display-line-numbers-widen nil
      display-line-numbers-width-start t)

(add-hook 'find-file-hook (lambda ()
                            (unless (equal major-mode 'org-mode)
                              (display-line-numbers-mode))))
#+end_src

*** Utilities
**** Copy buffer file name to clipboard
#+begin_src emacs-lisp
(defun shark-bytes/copy-file-name-to-clipboard ()
  "Copy the current buffer file name to the clipboard."
  (interactive)
  (kill-new (shark-bytes/buffer-name)))
#+end_src

** Screen
*** Lock screen
#+begin_src emacs-lisp
(require 'dbus)

(defun shark-bytes/lock-screen ()
  "Lock the screen."
  (interactive)
  (dbus-call-method :session "org.freedesktop.ScreenSaver" "/org/freedesktop/ScreenSaver" "org.freedesktop.ScreenSaver" "Lock"))
#+end_src

** Cursor
*** Stretch block cursor to cover glyph
#+begin_src emacs-lisp
(setq-default x-stretch-cursor t)
#+end_src

*** Center Cursor
#+begin_src emacs-lisp
(use-package centered-cursor-mode
  :config (global-centered-cursor-mode +1))
#+end_src

*** Show cursor as bar in insert mode and block in overwrite mode
#+begin_src emacs-lisp
(use-package bar-cursor
  :config (bar-cursor-mode 1))
#+end_src

*** Hide cursor in non-selected windows
#+begin_src emacs-lisp
(setq-default cursor-in-non-selected-windows nil)
#+end_src

** [[https://www.emacswiki.org/emacs/UndoTree][Undo]]
#+begin_src emacs-lisp
  (use-package undo-tree
    ;:after popwin
    :custom
    (undo-tree-visualizer-timestamps t)
    (undo-tree-visualizer-diff t)
    (undo-tree-enable-undo-in-region t)
    (undo-tree-auto-save-history t)
    (undo-tree-history-directory-alist `(("." . ,(expand-file-name "~/.cache/emacs-undo"))))
    :config
    (global-undo-tree-mode)
    (push '(" *undo-tree*" :dedicated t :width 60 :position right) popwin:special-display-config))
#+end_src

*** Keep selection when undoing
#+begin_src emacs-lisp
(defadvice undo-tree-undo (around keep-region activate)
  (if (use-region-p)
      (let ((mark-position (set-marker (make-marker) (mark)))
            (point-position (set-marker (make-marker) (point))))
        ad-do-it
        (goto-char point-position)
        (set-mark mark-position)
        (set-marker point-position nil)
        (set-marker mark-position nil))
    ad-do-it))
#+end_src

** Shell
#+begin_src emacs-lisp
(setq comint-terminfo-terminal "xterm-256color"
      comint-buffer-maximum-size 10000
      comint-scroll-show-maximum-output t
      comint-input-ring-size 500
      comint-input-ignoredups t
      comint-completion-addsuffix t
      comint-output-filter-functions '(ansi-color-process-output
                                       comint-strip-ctrl-m
                                       comint-postoutput-scroll-to-bottom
                                       comint-watch-for-password-prompt
                                       comint-truncate-buffer)
      term-buffer-maximum-size 100000)
(add-hook 'term-exec-hook #'term-char-mode)

(use-package eshell
  :custom
  (eshell-banner-message "")
  (eshell-scroll-to-bottom-on-input 'this)
  (eshell-scroll-to-bottom-on-output 'this)
  (eshell-kill-processes-on-exit t)
  (eshell-error-if-no-glob t)
  (eshell-hist-ignoredups t)
  (eshell-history-size 20000)
  (eshell-save-history-on-exit t)
  (eshell-input-filter 'eshell-input-filter-initial-space)
  (eshell-prefer-lisp-functions nil)
  (eshell-list-files-after-cd t)
  (eshell-destroy-buffer-when-process-dies t)
  (eshell-cmpl-cycle-completions t)
  (eshell-buffer-maximum-lines 2000)
  (eshell-cd-shows-directory t)
  (eshell-cmpl-autolist t)
  (eshell-cmpl-dir-ignore "\\`\\(\\.\\.?\\|CVS\\|.git\\|.svn\\|.bzr\\)/\\'")
  (eshell-cmpl-expand-before-complete t)
  (eshell-cmpl-ignore-case t)
  (eshell-show-lisp-completions t)
  (eshell-command-completions-alist '(("e" . "\\.pdf\\'")
                                      ("ar" . "\\.[ao]\\'")
                                      ("e" . "\\.[Cc]\\([Cc]\\|[PpXx][PpXx]\\)?\\'")
                                      ("e" . "\\.[Hh]\\([Hh]\\|[PpXx][PpXx]\\)?\\'")
                                      ("readelf" . "\\(\\`[^.]*\\|\\.\\([ao]\\|so\\)\\)\\'")
                                      ("objdump" . "\\(\\`[^.]*\\|\\.\\([ao]\\|so\\)\\)\\'")
                                      ("nm" . "\\(\\`[^.]*\\|\\.\\([ao]\\|so\\)\\)\\'")
                                      ("gdb" . "\\`\\([^.]*\\|a\\.out\\)\\'")
                                      ("e" . "\.txt\'")
                                      ("e" . "\.md\'")
                                      ("e" . "\.bat\'")
                                      ("e" . "\.bin\'")
                                      ("e" . "\.cfg\'")
                                      ("e" . "\.config\'")
                                      ("e" . "\.ini\'")
                                      ("e" . "\.el\'")
                                      ("e" . "\.org\'")
                                      ("e" . "\.log\'")
                                      ("gv" . "\.ps\'")
                                      ("xdvi" . "\.dvi\'")
                                      ("e" . "\.png\'")
                                      ("e" . "\.jpe?g\'")
                                      ("e" . "\.svg\'")
                                      ("e" . "\.xml\'")
                                      ("e" . "\.xslt?\'")
                                      ("unzip -l" . "\.zip\'")
                                      ("unrar l" . "\.rar\'")
                                      ("tar tf" . "\.tar\'")
                                      ("tar ztf" . "\.tar.gz\'")
                                      ("tar jtf" . "\.tar.bz2\'")
                                      ("unace l" . "\.ace\'")))
  (eshell-glob-include-dot-files t)
  (eshell-ls-initial-args '("-A"
                            "-F"
                            "-h"
                            "-l"
                            "-1"
                            "-v"
                            "--color"
                            "--group-directories-first"))
  (eshell-modules-list '(eshell-alias
                         eshell-banner
                         eshell-basic
                         eshell-cmpl
                         eshell-dirs
                         eshell-glob
                         eshell-hist
                         eshell-ls
                         eshell-pred
                         eshell-prompt
                         eshell-script
                         eshell-smart
                         eshell-term
                         eshell-tramp
                         eshell-unix))
  (eshell-output-filter-functions '(eshell-truncate-buffer
                                    eshell-postoutput-scroll-to-bottom
                                    eshell-handle-control-codes
                                    eshell-handle-ansi-color
                                    eshell-watch-for-password-prompt))
  :config
  (require 'em-smart)
  (setq eshell-where-to-jump 'begin
        eshell-review-quick-commands nil
        eshell-smart-space-goes-to-end t)
  (add-hook 'eshell-mode-hook 'eshell-smart-initialize)
  (defun shark-bytes/eshell-last-command ()
    "Return the last command."
    (interactive)
    (when (derived-mode-p 'eshell-mode)
      (format "%s %s" eshell-last-command-name (mapconcat 'identity eshell-last-arguments " "))))
  (with-eval-after-load "which-func"
    (add-to-list 'which-func-functions 'shark-bytes/eshell-last-command))
  (with-eval-after-load "consult"
    (defvar shark-bytes/consult--source-new-eshell `(:name     "New"
                                                     :narrow   ?n
                                                     :category string
                                                     :default  t
                                                     :items    ("New")
                                                     :action   eshell)
      "New buffer source for `consult-buffer'.")
    (defvar shark-bytes/consult--source-buffer `(:name     "Existing"
                                                 :narrow   ?b
                                                 :category buffer
                                                 :face     consult-buffer
                                                 :history  buffer-name-history
                                                 :state    ,#'consult--buffer-state
                                                 :items    ,(lambda () (consult--buffer-query :sort 'visibility
                                                                                         :include (rx "*eshell*" (* any))
                                                                                         :as #'buffer-name)))
      "Eshell buffer source for `consult-buffer'.")
    (defun shark-bytes/eshell ()
      "Open a new or existing eshell buffer."
      (interactive)
      (consult-buffer '(shark-bytes/consult--source-new-eshell shark-bytes/consult--source-buffer)))))
#+end_src

*** Environment
#+begin_src emacs-lisp
(setenv "PAGER" "ccat")
(setenv "BROWSER" "eww")
#+end_src

https://github.com/purcell/exec-path-from-shell
#+begin_src emacs-lisp
(use-package exec-path-from-shell
  :custom (exec-path-from-shell-variables '("PATH" "MANPATH" "LANG" "LC_CTYPE" "LC_NUMERIC" "LC_TIME" "LC_MONETARY" "LC_PAPER" "LC_NAME" "LC_ADDRESS" "LC_TELEPHONE" "LC_MEASUREMENT" "NINJA_STATUS"))
  :config (exec-path-from-shell-initialize))
#+end_src

*** Aliases
#+begin_src emacs-lisp
(with-eval-after-load "em-alias"
  (eshell/alias ".." "cd ..")
  (eshell/alias "..." "cd ../..")
  (eshell/alias "...." "cd ../../..")
  (eshell/alias "....." "cd ../../../..")

  (eshell/alias "d" "dired $1")
  (eshell/alias "cd.." "cd ..")
  (eshell/alias "cp" "cp -i $*")
  (eshell/alias "du" "du -h $*")
  (eshell/alias "gti" "git $*")

  (eshell/alias "dnf" "sudo dnf $*")
  (eshell/alias "log" "sudo lnav")
  (eshell/alias "sysinfo" "glances -1 --tree --fs-free-space --process-short-name -C ~/.config/glances")
  (eshell/alias "lstree" "l -R $*")
  (eshell/alias "make" "make -j $*")
  (eshell/alias "mkdir" "mkdir -p $*")
  (eshell/alias "mv" "mv -i $*")
  (eshell/alias "p" "ps aux $*")
  (eshell/alias "extract" "atool --extract --subdir --explain $*")
  (eshell/alias "x" "atool --extract --subdir --explain $*")
  (eshell/alias "ag" "ag --smart-case $*")

  (when (executable-find "ninja-build")
    (eshell/alias "ninja" "ninja-build $*"))

  (eshell/alias "dos2unix" "recode ibmpc..lat1 $*")
  (eshell/alias "unix2dos" "recode lat1..ibmpc $*")
  (eshell/alias "unix2mac" "recode lat1..mac $*")
  (eshell/alias "mac2unix" "recode mac..lat1 $*")
  (eshell/alias "dos2mac" "recode ibmpc..mac $*")
  (eshell/alias "mac2dos" "recode mac..ibmpc $*"))

(defun eshell/l (&rest args)
  (eshell/ls args))

(defun eshell/e (file)
  (find-file file))

(defun eshell/mcd (directory)
  "Create a directory and enter it."
  (eshell/mkdir directory)
  (eshell/cd directory))

(defun eshell/top ()
  "Use proced instead of top."
  (proced))

(defun eshell/ccat (arguments)
  "Like `cat' but output with Emacs syntax highlighting."
  (let ((files (eshell-flatten-list arguments)))
    (while files
      (let* ((file (expand-file-name (car files)))
             (type (file-name-extension file)))
        (eshell-printn
          (pcase type
            ((or "gif" "jpeg" "jpg" "png" "svg" "tiff") (propertize " " 'display (create-image file)))
            ((or "ace" "arj" "bz2" "cpio" "gz" "lha" "lz" "rar" "rpm" "tar" "zip") (shell-command-to-string (format "atool --list %s" file)))
            (_ (with-temp-buffer
                 (insert-file-contents file)
                 (let ((buffer-file-name file))
                   (delay-mode-hooks
                     (set-auto-mode)
                     (if (fboundp 'font-lock-ensure)
                         (font-lock-ensure)
                       (with-no-warnings
                         (font-lock-fontify-buffer)))))
                 (buffer-string)))))
        (setq files (cdr files))))))

(with-eval-after-load "dired"
  (defun eshell/pack (argument)
    "Compress files."
    (dired-compress-file argument))
  (defun eshell/unpack (argument)
    "Uncompress file."
    (dired-compress-file argument)))
#+end_src

**** Git support
#+begin_src emacs-lisp
(with-eval-after-load "magit"
  (defun eshell/gitroot ()
    "chnage directory to current project root."
    (eshell/cd (vc-git-root default-directory)))

  (defun eshell/git-log (&rest arguments)
    "Use magit instead of git log."
    (magit-mode-setup #'magit-log-mode arguments)
    (magit-log-goto-same-commit)
    (eshell/echo))

  (defun eshell/git (command &rest arguments)
    "use magit for git status and log commands."
    (pcase command
      ("log" (apply #'eshell/git-log arguments))
      ("status" (progn
                  (magit-status)
                  (eshell/echo)))
      (_ (shell-command-to-string (s-join " " (append (list "git"
                                                            command)
                                                      arguments)))))))
#+end_src

*** Smart-open new eshell buffers
#+begin_src emacs-lisp
(defun shark-bytes/eshell-maybe-new-session (&optional argument)
  "Create a new interactive Eshell buffer if the current buffer is an Eshell buffer."
  (interactive "P")
  (if (eq major-mode 'eshell-mode)
      (eshell (or argument
                  t))
    (eshell argument)))
#+end_src

*** Prompt
#+begin_src emacs-lisp
(defun shark-bytes/eshell-prompt-concat (&rest contents)
  (let ((items (-flatten (-non-nil contents))))
    (when items
      (s-join " " items))))

(defun shark-bytes/eshell-prompt-section (section-face next-section-face &rest contents)
  (when contents
    (concat (propertize (shark-bytes/eshell-prompt-concat " "
                                                    contents
                                                    " ")
                        'face section-face)
            (propertize ""
                        'face `(:foreground ,(face-attribute section-face :background)
                                            :background ,(face-attribute next-section-face :background))))))

(defun shark-bytes/eshell-prompt-result ()
  (unless (= 0 0)
    (propertize (shark-bytes/eshell-prompt-concat ""
                                            eshell-last-command-status)
                'face '(:foreground ,(face-attribute 'warning :foreground)
                                    :weight 'bold))))

(defun shark-bytes/eshell-prompt-user ()
  (if (string= "root"
               (getenv "USER"))
      (concat "")
    (unless (string= (getenv "LOGNAME")
                     (getenv "USER"))
        (shark-bytes/eshell-prompt-concat "𓄅"
                                    (user-login-name)))))

(defun shark-bytes/eshell-prompt-host ()
  (when (let ((host (getenv "SSH_CONNECTION")))
          (and host
               (not (string= "" host))))
    (shark-bytes/eshell-prompt-concat "" (system-name))))

(defun shark-bytes/eshell-prompt-docker ()
  (let* ((id (shell-command-to-string "cat /proc/self/cgroup | grep docker | head -n 1 | cut -d '/' -f3"))
         (container (when (and id
                               (not (string= "" id)))
                      (shell-command-to-string (concat "docker inspect -f '{{.Config.Image}}' "
                                                       id)))))
    (when container
      (shark-bytes/eshell-prompt-concat "" container))))

(defun shark-bytes/eshell-prompt-path ()
  (shark-bytes/eshell-prompt-concat "ﱮ"
                              (propertize (eshell/pwd)
                                          'face `(:weight 'ultra-bold))))

(setq eshell-prompt-function (lambda ()
                               (concat (shark-bytes/eshell-prompt-section 'default
                                                                          'default
                                                                          (shark-bytes/eshell-prompt-result)
                                                                          (shark-bytes/eshell-prompt-user)
                                                                          (shark-bytes/eshell-prompt-host)
                                                                          (shark-bytes/eshell-prompt-docker)
                                                                          (shark-bytes/modeline-version-control))
                                       (shark-bytes/eshell-prompt-section 'default
                                                                          'mode-line
                                                                          (shark-bytes/eshell-prompt-path))
                                                   "\n▶ "))
      eshell-highlight-prompt nil
      eshell-prompt-regexp (rx bol "▶ "))
#+end_src

*** Imenu Support
#+begin_src emacs-lisp
(add-hook 'eshell-mode-hook #'(lambda ()
                                (setq-local imenu-generic-expression `(("Prompt" ,(concat eshell-prompt-regexp "\\(.*\\)$") 1)))))
#+end_src

*** [[https://github.com/akreisher/eshell-syntax-highlighting/][Syntax Highlighting]]
#+begin_src emacs-lisp
(use-package eshell-syntax-highlighting
  :after eshell
  :config (eshell-syntax-highlighting-global-mode +1))
#+end_src

*** Clear buffer
#+begin_src emacs-lisp
(defun shark-bytes/clear-comint-buffer ()
  "Remove content of comint buffer."
  (interactive)
  (delete-region (point-min) (point-max))
  (comint-send-input))
#+end_src

#+begin_src emacs-lisp
(defun eshell/clear ()
  "Clear the eshell buffer."
  (let ((inhibit-read-only t))
    (erase-buffer)
    (eshell-send-input)))
#+end_src

*** Close buffer after process exits
#+begin_src emacs-lisp
(advice-add 'term-sentinel :after (lambda (proc msg)
                                    (when (memq (process-status proc) '(signal exit))
                                      (kill-buffer (process-buffer proc)))))
#+end_src

*** [[https://github.com/iostapyshyn/eshell-vterm][VTerm Support]]
#+begin_src emacs-lisp
(use-package eshell-vterm
  :ensure-system-package libtool
  :after eshell
  :config (eshell-vterm-mode))
#+end_src

*** Visual commands
#+begin_src emacs-lisp
(with-eval-after-load "em-term"
  (add-to-list 'eshell-visual-commands "top")
  (add-to-list 'eshell-visual-commands "glances")
  (add-to-list 'eshell-visual-commands "lnav")
  (add-to-list 'eshell-visual-commands "ccmake")

  (add-to-list 'eshell-visual-options '("git" "--help")))
#+end_src

*** Navigation
**** [[https://github.com/Fuco1/eshell-bookmark][Bookmarks]]
#+begin_src emacs-lisp
(use-package eshell-bookmark
  :hook (eshell-mode . eshell-bookmark-setup))
#+end_src

**** [[https://github.com/peterwvj/eshell-up][Go to parent directories]]
#+begin_src emacs-lisp
(use-package eshell-up
  :custom (eshell-up-ignore-case nil)
  :config
  (defun eshell/up (directory)
    "Alias for eshell-up."
    (eshell-up directory)))
#+end_src

**** Jump to directories
#+begin_src emacs-lisp
(defvar shark-bytes/consult-dir--source-eshell-last-dir `(:name "Last Directories"
                                                          :narrow ?e
                                                          :category file
                                                          :face consult-file
                                                          :history file-name-history
                                                          :items ,(lambda ()
                                                                    (ring-elements eshell-last-dir-ring))))

(defun eshell/cd-default ()
  "Go to default-directory."
  (interactive)
  (eshell/cd default-directory))

(defun eshell/j ()
  "Select autojump directory via 'completing-read'."
  (let ((consult-dir-sources (append '(shark-bytes/consult-dir--source-eshell-last-dir) consult-dir-sources)))
    (let ((consult-dir-default-command 'eshell/cd-default))
      (consult-dir))))
#+end_src

**** Jump over directories without files and one subdirectory
#+begin_src emacs-lisp
(add-hook 'eshell-directory-change-hook #'(lambda ()
                                            (let* ((content (directory-files default-directory))
                                                   (directories (seq-remove '(lambda (directory)
                                                                               (string-match "\\.\\.?" directory))
                                                                            (seq-filter 'file-directory-p content)))
                                                   (files (seq-filter 'file-regular-p content)))
                                              (when (and (not files)
                                                         directories
                                                         (= 1 (length directories))
                                                         (not (string-match "^cd +[\./]+$" (eshell-get-history 0))))
                                                (let ((eshell-list-files-after-cd nil))
                                                  (eshell/cd (car directories)))))))
#+end_src

**** Re-enter directory if necessary
#+begin_src emacs-lisp
(defun shark-bytes/eshell-reenter ()
  "Re-enter current directory if necessary."
  (unless (> (file-nlinks default-directory) 0)
    (eshell/cd (if (file-directory-p default-directory)
                   default-directory
                 (expand-file-name "~")))))

(add-hook 'eshell-mode-hook #'(lambda ()
                                (add-hook 'eshell-pre-command-hook #'shark-bytes/eshell-reenter nil t)))
#+end_src


*** Add sudo to command line
#+begin_src emacs-lisp
(with-eval-after-load "eshell"
  (defun shark-bytes/add-sudo ()
    "Add sudo to the curent command."
    (interactive)
    (save-excursion
      (eshell-bol)
      (let ((commands (buffer-substring-no-properties (point) (point-max))))
        (if (string-match-p "^sudo " commands)
            (while (re-search-forward "sudo " nil t)
              (replace-match "" t nil))
          (insert "sudo ")))))

  (add-hook 'eshell-mode-hook (lambda ()
                                (define-key eshell-mode-map (kbd "C-M-s") 'shark-bytes/add-sudo))))
#+end_src

*** History
#+begin_src emacs-lisp
(add-hook 'eshell-mode-hook (lambda ()
                              (define-key eshell-mode-map (kbd "M-r") 'eshell-list-history)))
#+end_src

*** [[https://github.com/magit/with-editor][Use emacs as editor]]
#+begin_src emacs-lisp
(use-package with-editor
  :hook ((shell-mode term-exec eshell-mode) . with-editor-export-editor)
  :config
  (define-key (current-global-map) [remap async-shell-command] 'with-editor-async-shell-command)
  (define-key (current-global-map) [remap shell-command] 'with-editor-shell-command))
#+end_src

*** [[https://github.com/riscy/bifocal-mode][Split buffer on scroll to show both scrolled position and tail]]
#+begin_src emacs-lisp
(use-package bifocal
  :config (bifocal-global-mode 1))
#+end_src

*** Show running command status in mode line
#+begin_src emacs-lisp
(advice-add 'eshell-command-started :before (lambda ()
                                              (setq shark-bytes/process-running t)
                                              (force-mode-line-update t)))

(advice-add 'eshell-command-finished :before (lambda ()
                                               (setq shark-bytes/process-running nil)
                                               (force-mode-line-update t)))
#+end_src

*** Show last command status in mode line
#+begin_src emacs-lisp
(defun shark-bytes/modeline-eshell-status ()
  "Format the mode line eshell status information."
  (when (and (equal major-mode 'eshell-mode)
             (> eshell-last-command-status 0))
    (concat "" (propertize (format " %d" eshell-last-command-status)
                            'face `(:foreground, (face-attribute 'error :foreground)
                                                 :weight 'bold)))))

(add-to-list 'shark-bytes/modeline-check-status-functions 'shark-bytes/modeline-eshell-status)
#+end_src

*** Notify when long-running command finishes
#+begin_src emacs-lisp
(defcustom shark-bytes/eshell-minimum-interesting-run-time 30 "The minimum time a command has to take to be interesting.")

(defun shark-bytes/eshell-current-command-start ()
  "Save timestamp on command start."
  (setq shark-bytes/eshell-current-process-start-time (current-time)))

(defun shark-bytes/eshell-current-command-stop ()
  "Show notification when command stops."
  (when shark-bytes/eshell-current-process-start-time
    (let ((run-time (truncate (float-time (shark-bytes/get-run-time)))))
      (unless (< run-time shark-bytes/eshell-minimum-interesting-run-time)
        (let ((time-string (shark-bytes/format-run-time (shark-bytes/get-run-time)))
              (command (s-join " " (eshell-flatten-list (list eshell-last-command-name eshell-last-arguments)))))
          (eshell-interactive-print (format "\nRunning time: %s\n"
                                            time-string))
          (notifications-notify :title (format "'%s' finished"
                                               command)
                                :body (format "The eshell command '%s' finished %s%s"
                                              command
                                              (if (= 0 eshell-last-command-status)
                                                  "successfully."
                                                "with error.")
                                              (if (= 0 eshell-last-command-status)
                                                  ""
                                                (format "<br><br>Error code: %d"
                                                        eshell-last-command-status)))
                                :app-icon (if (= 0 eshell-last-command-status)
                                              "utilities-terminal"
                                            "emblem-important")
                                :timeout (if (= 0 eshell-last-command-status)
                                             7200
                                           0)))))
    (setq shark-bytes/eshell-current-process-start-time nil)))

(add-hook 'eshell-mode-hook #'(lambda ()
                                (add-hook 'eshell-pre-command-hook #'shark-bytes/eshell-current-command-start nil t)
                                (add-hook 'eshell-post-command-hook #'shark-bytes/eshell-current-command-stop nil t)))
#+end_src


** Help
*** [[https://github.com/Wilfred/helpful][Better Help Buffer]]
#+begin_src emacs-lisp
(use-package helpful
  :after consult
  :custom (helpful-max-buffers 3)
  :config
  (push "\\`\\*helpful.*\\*\\'" consult-buffer-filter)
  (advice-add 'describe-function :override #'helpful-function)
  (advice-add 'describe-variable :override #'helpful-variable)
  (advice-add 'describe-key :override #'helpful-key)
  (advice-add 'describe-symbol :override #'helpful-symbol))
#+end_src

** Utilites
*** Intelligent input
#+begin_src emacs-lisp
(defun shark-bytes/region-or-symbol ()
  "Get string from region or symbol-at-point."
  (or (when (region-active-p)
        (buffer-substring-no-properties (region-beginning) (region-end)))
      (thing-at-point 'symbol t)))

(defun shark-bytes/get-wim (prompt)
  "Get string from region, symbol-at-point or manual input."
  (or (shark-bytes/region-or-symbol)
      (read-string prompt)))
#+end_src

*** [[https://github.com/bbatsov/crux][A Collection of Ridiculously Useful eXtensions]]
#+begin_src emacs-lisp
(use-package crux
  :config (advice-add 'crux-rename-file-and-buffer :around 'shark-bytes/post-rename))
#+end_src

*** Date/time formatting
#+begin_src emacs-lisp
(with-eval-after-load "all-the-icons"
  (defun shark-bytes/print-date ()
    (concat
     ""
     (propertize (format-time-string " %W")
                 'face '(:weight ultra-light))
     (format-time-string " %e.%-m.%G")))

  (defun shark-bytes/print-time ()
    (format "%c %s" (+ #xe381 (% (string-to-number (format-time-string "%I")) 12)) (format-time-string " %H:%M"))))
#+end_src

**** Run freedesktop applications
#+begin_src emacs-lisp
(defun shark-bytes/xdg-application-candidates (&optional mime-type)
  "Get a list of (name . exec) entries for XDG applications, optionally limited to MIME-TYPE."
  (-non-nil (mapcar (lambda (entry)
                      (let* ((entry-data (xdg-desktop-read-file entry))
                             (hidden (gethash "Hidden" entry-data "false"))
                             (nodisplay (gethash "NoDisplay" entry-data "false")))
                        (unless (or (string= hidden "true")
                                    (string= hidden "1")
                                    (string= nodisplay "true")
                                    (string= nodisplay "1")
                                    (not (string= (gethash "Type" entry-data) "Application"))
                                    (not (executable-find (gethash "TryExec" entry-data "true"))))
                          (cons (propertize (format "%s %s"
                                                    (let ((name (gethash "Name" entry-data))
                                                          (generic-name (gethash "GenericName" entry-data)))
                                                      (if (and generic-name
                                                               (not (string= name generic-name)))
                                                          (format "%s %s" name (propertize generic-name 'face '(:height 0.7 :weight extra-light :slant italic)))
                                                        name))
                                                    (propertize (gethash "Keywords" entry-data "") 'invisible t))
                                            'help-echo (gethash "Comment" entry-data ""))
                                (replace-regexp-in-string "%[dDinNmv]" "" (replace-regexp-in-string "%k" entry (replace-regexp-in-string "%c" (gethash "Name" entry-data) (gethash "Exec" entry-data))))))))
                    (if mime-type
                        (xdg-mime-apps mime-type)
                      (-flatten (-non-nil (mapcar (lambda (directory)
                                                    (let ((directory (expand-file-name "applications" directory)))
                                                      (when (and (file-exists-p directory) (file-readable-p directory))
                                                        (directory-files-recursively directory ".*\.desktop"))))
                                                  (split-string (getenv "XDG_DATA_DIRS") ":"))))))))

(defun shark-bytes/xdg-open-with (&optional file)
  "Open FILE with a associated XDG application."
  (interactive)
  (let* ((candidates (shark-bytes/xdg-application-candidates (when file
                                                                 (s-replace "\n" "" (shell-command-to-string (format "xdg-mime query filetype %s" file))))))
         (selection (completing-read (if file
                                         "Open with: "
                                       "Run: ") candidates nil t nil 'shark-bytes/xdg-open)))
    (when selection
      (message "%s %s" (cdr (assoc selection candidates)) file)
      (make-process :name selection
                    :buffer (format "*%s*" selection)
                    :command (split-string (replace-regexp-in-string "%[fFuU]" (or file "") (cdr (assoc selection candidates)) t))))))

(defun shark-bytes/xdg-run-application ()
  "Run an XDG application."
  (interactive)
  (shark-bytes/xdg-open-with))

(with-eval-after-load "consult"
  (push "\\*Applications\\*" consult-buffer-filter))
#+end_src

** Windows
*** Re-use frames
#+begin_src emacs-lisp
(setq display-buffer-reuse-frames t)
#+end_src

*** Hide dividers between windows
#+begin_src emacs-lisp
(setq window-divider-mode nil)
#+end_src

*** [[https://github.com/cyrus-and/zoom][Automatically zoom current window]]
#+begin_src emacs-lisp
(use-package zoom
  :custom
  (zoom-size '(0.618 . 0.618))
  (zoom-ignored-major-modes '(dired-mode markdown-mode compilation-mode help-mode helpful-mode))
  (zoom-ignored-buffer-name-regexps '("\\*.*"))
  :config
  (zoom-mode t))
#+end_src

*  File Handling
** Config
#+begin_src emacs-lisp
(defvar shark-bytes/config-file "~/.dotfiles/home/emacs-config.org")
#+end_src

** Ignore case for file names
#+begin_src emacs-lisp
(setq read-file-name-completion-ignore-case t)
#+end_src

** Do not ask if file should be created
#+begin_src emacs-lisp
(setq confirm-nonexistent-file-or-buffer nil)
#+end_src

** Automatically create parent directories on save
#+begin_src emacs-lisp
(defun shark-bytes/create-parent-directories(&optional file)
  "Create parent directories for FILE."
  (when-let* ((file-path (or file
                             buffer-file-name
                             (buffer-name)))
              (parent-directory (file-name-directory file-path))
              (is-absolute (file-name-absolute-p file-path)))
    (unless (file-exists-p parent-directory)
      (make-directory parent-directory t)
      (set-visited-file-name file-path))))

(defun shark-bytes/enable-create-parent-directories()
  "Add shark-bytes/create-parent-directories to before-save-hook."
  (add-hook 'before-save-hook 'shark-bytes/create-parent-directories))

(add-hook 'find-file-hook 'shark-bytes/enable-create-parent-directories)
#+end_src

** [[https://gitlab.com/kisaragi-hiu/didyoumean.el/][Prefer existing files]]
#+begin_src emacs-lisp
(use-package didyoumean
  :config (add-hook 'after-init #'(run-with-timer 60 nil didyoumean-mode)))
#+end_src

** Save backup files to .emacs.d/backups
#+begin_src emacs-lisp
(setq backup-directory-alist `((".*" . ,(expand-file-name "backups" user-emacs-directory)))
      tramp-backup-directory-alist backup-directory-alist
      backup-by-copying t
      version-control t
      delete-old-versions t
      kept-new-versions 20
      kept-old-versions 5)
#+end_src

** [[https://github.com/shingo256/trashed][Use system trash]]
#+begin_src emacs-lisp
(setq delete-by-moving-to-trash t)

(use-package trashed
  :custom
  (trashed-action-confirmer 'y-or-n-p)
  (trashed-size-format 'human-readable))
#+end_src

** Automatically silently reload unmodified buffers when file has changed on disk
#+begin_src emacs-lisp
(setq global-auto-revert-non-file-buffers t
      auto-revert-verbose nil
      revert-without-query '(".*"))
(global-auto-revert-mode t)
#+end_src

** Save current region or buffer to different file
#+begin_src emacs-lisp
(defun shark-bytes/save-copy ()
  "Save the current buffer or region to a different file."
  (interactive)
  (let* ((original (buffer-file-name))
         (copy (read-file-name "Copy to file: " nil nil nil (and original
                                                                 (file-name-nondirectory original))))
         (begin (if (use-region-p)
                    (region-beginning)
                  (point-min)))
         (end (if (use-region-p)
                  (region-end)
                (point-max)))
         (mustbenew (if (and original (file-equal-p original copy))
                        'excl
                      t)))
    (write-region begin end copy nil nil nil mustbenew)))
#+end_src

** [[https://github.com/bbatsov/super-save][Auto-save buffers]]
#+begin_src emacs-lisp
(use-package super-save
  :custom
  (super-save-auto-save-when-idle t)
  (super-save-idle-duration 2)
  (super-save-remote-files t)
  :config
  (add-to-list 'super-save-triggers 'compile)
  (super-save-mode +1))
#+end_src

** [[https://github.com/nflath/sudo-edit][Allow editing via sudo]]
#+begin_src emacs-lisp
(use-package su
  :config (su-mode +1))
#+end_src

** [[https://github.com/m00natic/vlfi][Allow opening large files]]
#+begin_src emacs-lisp
(setq large-file-warning-threshold (* 25 1024 1024))

(use-package vlf
  :custom (vlf-application 'dont-ask)
  :config (require 'vlf-setup))
#+end_src

** Execute command on file
#+begin_src emacs-lisp
(defun shark-bytes/execute-command-on-buffer-file (command)
  (interactive "sCommand: ")
  (when buffer-file-name
    (shell-command (concat command " " buffer-file-name))))
#+end_src

** Allow editing compressed files
#+begin_src emacs-lisp
(auto-compression-mode 1)
#+end_src

** Handle renames
#+begin_src emacs-lisp
(defun shark-bytes/post-rename (function)
  "Update recent files and projectile after rename."
  (let ((old buffer-file-name))
    (funcall function)
    (when (fboundp 'recentf-add-file)
      (recentf-add-file buffer-file-name)
      (recentf-remove-if-non-kept old))
    (when (ignore-errors (projectile-project-p))
      (call-interactively #'projectile-invalidate-cache))))
#+end_src

** Handle file names with spaces
#+begin_src emacs-lisp
(setq ffap-file-name-with-spaces t)
#+end_src

** File Management
*** Create symlinks if reasonable
#+begin_src emacs-lisp
(setq copy-directory-create-symlink t)
#+end_src

*** [[https://www.emacswiki.org/emacs/RecentFiles][Recent files]]
#+begin_src emacs-lisp
(use-package recentf
  :custom
  (recentf-max-saved-items 200)
  (recentf-max-menu-items 15)
  (recentf-auto-save-timer (run-with-idle-timer 300 t
                                                '(lambda ()
                                                   (let ((warning-minimum-level :error))
                                                     (ignore-errors (recentf-save-list))))))
  :config (recentf-mode))
#+end_src

*** Show multiple sources for open command
#+begin_src emacs-lisp

(defvar shark-bytes/consult-source-directory
  `(:name     "Directory files"
    :narrow   ?d
    :category file
    :face     consult-file
    :history  file-name-history
    :state    ,#'consult--file-state
    :enabled  ,(lambda () (file-accessible-directory-p default-directory))
    :items    ,(lambda () (directory-files default-directory t)))
  "Directory file candidate source for `consult'.")

(defun shark-bytes/consult-find-file ()
  ""
  (interactive)
  (when-let (buffer (consult--multi '(
                                      ;consult--source-buffer
                                      consult--source-recent-file
                                      shark-bytes/consult-source-directory
                                      consult-projectile--source-projectile-file)
                                    :require-match (confirm-nonexistent-file-or-buffer)
                                    :prompt "Open: "
                                    :history 'consult--buffer-history
                                    :sort nil))
    (unless (cdr buffer)
      (consult--buffer-action (car buffer)))))
#+end_src

*** Dired
#+begin_src emacs-lisp
(setq dired-auto-revert-buffer t
      dired-recursive-copies 'always
      dired-recursive-deletes 'top
      dired-dwim-target t
      dired-create-destination-dirs 'ask
      dired-vc-rename-file t)
#+end_src

**** Re-use dired buffers
#+begin_src emacs-lisp
(put 'dired-find-alternate-file 'disabled nil)

(define-key dired-mode-map (kbd "RET") 'dired-find-alternate-file)

(setq dired-kill-when-opening-new-dired-buffer t)
#+end_src

**** Open any existing directory
#+begin_src emacs-lisp
(defun shark-bytes/dired-any ()
  "Open any existing directory"
  (interactive)
  (let ((consult-dir-default-command 'consult-dir-dired))
    (consult-dir)))
#+end_src

**** [[https://github.com/DamienCassou/dired-imenu][imenu Integration]]
#+begin_src emacs-lisp
(use-package dired-imenu)
#+end_src

**** [[https://www.emacswiki.org/emacs/wdired.el][Editing]]
#+begin_src emacs-lisp
(use-package wdired
  :bind (:map dired-mode-map ("r" . wdired-change-to-wdired-mode))
  :custom
  (wdired-allow-to-change-permissions t)
  (wdired-create-parent-directories t))
#+end_src

**** Use standard ls parameters for listing
#+begin_src emacs-lisp
(setq dired-listing-switches "-aFhl1v --group-directories-first")
#+end_src

**** [[https://github.com/purcell/diredfl/][Coloring]]
#+begin_src emacs-lisp
(use-package diredfl
  :config
  (diredfl-global-mode))
#+end_src

**** Show lines in alternating colors
#+begin_src emacs-lisp
(use-package stripe-buffer
  :hook (dired-mode . turn-on-stripe-buffer-mode))
#+end_src

**** Show Icons
#+begin_src emacs-lisp
(use-package all-the-icons-dired
  :after all-the-icons
  :hook (dired-mode . all-the-icons-dired-mode))
#+end_src

**** Collapse empty directories
#+begin_src emacs-lisp
(use-package dired-collapse
  :hook dired-mode)
#+end_src

**** [[https://github.com/calancha/dired-du][Show directory sizes]]
#+begin_src emacs-lisp
(use-package dired-du
  :straight (dired-du
             :type git
             :host github
             :repo "calancha/dired-du")
  :custom (dired-du-size-format t))
#+end_src

**** [[github:amno1/dired-git-log][Show git information]]
#+begin_src emacs-lisp
(use-package dired-git-log
  :straight (dired-git-log
             :type git
             :host github
             :repo "amno1/dired-git-log")
  :hook dired-after-readin
  :custom (dired-git-log-auto-hide-details-p nil))
#+end_src

**** [[https://github.com/Fuco1/dired-hacks#dired-subtree][Show subtrees inline]]
#+begin_src emacs-lisp
(use-package dired-subtree
  :bind (:map dired-mode-map
              ("<tab>" . dired-subtree-toggle)))
#+end_src

**** Filtering
#+begin_src emacs-lisp
(use-package dired-narrow
  :bind (:map dired-mode-map ("f" . dired-narrow)))
#+end_src

**** Preview
#+begin_src emacs-lisp
(use-package peep-dired
  :bind (:map dired-mode-map ("v" . peep-dired)))
#+end_src

**** Open in application
#+begin_src emacs-lisp
(defun shark-bytes/dired-xdg-open (file)
  "Open FILES with XDG applications."
  (interactive (list (or (car (dired-get-marked-files))
                         (dired-get-filename))) dired-mode)
  (shark-bytes/xdg-open-with file))

(define-key dired-mode-map "o" #'shark-bytes/dired-xdg-open)
#+end_src

**** Diff files
#+begin_src emacs-lisp
(defvar shark-bytes/dired-ediff-window-configuration nil)

(defun shark-bytes/dired-ediff-files ()
  "Show a diff of two files marked in dired."
  (interactive)
  (let* ((files (dired-get-marked-files))
         (file1 (car files))
         (file2 (if (cdr files)
                    (cadr files)
                  (read-file-name "Diff to: " (dired-dwim-target-directory)))))
    (when (file-newer-than-file-p file1 file2)
      (cl-rotatef file1 file2))
    (setq shark-bytes/dired-ediff-window-configuration (current-window-configuration))
    (ediff-files file1 file2 '((lambda ()
                                 (setq-local ediff-quit-hook (lambda ()
                                                               (ediff-kill-buffer-carefully ediff-buffer-A)
                                                               (ediff-kill-buffer-carefully ediff-buffer-B)
                                                               (set-window-configuration shark-bytes/dired-ediff-window-configuration))))))))

(define-key dired-mode-map "d" 'shark-bytes/dired-ediff-files)
#+end_src

**** Compress files
#+begin_src emacs-lisp
(define-key dired-mode-map "c" 'dired-do-compress)
(define-key dired-mode-map "C" 'dired-do-compress-to)
#+end_src

**** Sync files
#+begin_src emacs-lisp
(use-package dired-rsync)
#+end_src

**** OCR files
#+begin_src emacs-lisp
(shark-bytes/install-system-package "tesseract")
(shark-bytes/install-system-package "tesseract-langpack-eng")
(shark-bytes/install-system-package "tesseract-langpack-deu")

(defcustom shark-bytes/ocr-language "deu+eng" "The language(s) for OCR.")

(defun shark-bytes/dired-ocr (files)
  "Copy text in images to kill ring."
  (interactive (dired-get-marked-files))
  (kill-new (mapconcat '(lambda (file)
                          (shell-command-to-string (format "tesseract -l %s %s stdout" shark-bytes/ocr-language file)))
                       files
                       "\n")))

(define-key dired-mode-map "E" 'shark-bytes/dired-ocr)
#+end_src

*** [[https://github.com/Alexander-Miller/treemacs][Treemacs]]
#+begin_src emacs-lisp
(use-package treemacs
  :demand t
  :after consult
  :bind ("<f1>" . treemacs)
  :custom
  (treemacs-collapse-dirs 3)
  (treemacs-file-event-delay 2000)
  (treemacs-follow-after-init t)
  (treemacs-is-never-other-window t)
  (treemacs-silent-filewatch t)
  (treemacs-silent-refresh t)
  (treemacs-goto-tag-strategy 'refetch-index)
  (treemacs-ignored-file-predicates '(treemacs--std-ignore-file-predicate))
  (treemacs-space-between-root-nodes nil)
  (treemacs-width 50)
  :config
  (push "\\`\\*Treemacs\\*\\'" consult-buffer-filter)
  (push "\\`\\*Desktop Treemacs Helper\\*\\'" consult-buffer-filter)
  (treemacs-git-mode 'deferred)
  (treemacs-filewatch-mode)
  (treemacs-follow-mode)
  (treemacs-project-follow-mode)
  (treemacs-tag-follow-mode)
  (treemacs-fringe-indicator-mode nil))

(use-package treemacs-projectile
  :after (treemacs projectile)
  :config
  (defun shark-bytes/treemacs-add-project (project-root)
    "Add project to treemacs."
    (if-let ((name (treemacs--filename project-root)))
        (unless (string= name "")
          (treemacs-do-add-project-to-workspace project-root name))))
  (advice-add 'projectile-add-known-project :after #'shark-bytes/treemacs-add-project)
  (mapc #'shark-bytes/treemacs-add-project projectile-known-projects)
  (defun shark-bytes/treemacs-remove-project (project-root)
    "Remove project from treemacs."
    (treemacs-do-remove-project-from-workspace project-root))
  (advice-add 'projectile-remove-known-project :after #'shark-bytes/treemacs-remove-project))

(use-package lsp-treemacs
  :after (treemacs lsp-mode)
  :custom (lsp-treemacs-sync-mode 1))

(use-package treemacs-magit
  :after (treemacs magit))
#+end_src

*  Text
#+begin_src emacs-lisp
(push '("\\.txt\\'" . text-mode) auto-mode-alist)
#+end_src

** Encoding
#+begin_src emacs-lisp
(set-charset-priority 'unicode)
(set-language-environment 'utf-8)
(set-default-coding-systems 'utf-8)
(set-terminal-coding-system 'utf-8)
(set-selection-coding-system 'utf-8)
(set-keyboard-coding-system 'utf-8)
(set-buffer-file-coding-system 'utf-8)
(set-clipboard-coding-system 'utf-8)
(set-file-name-coding-system 'utf-8)
(modify-coding-system-alist 'process "*" 'utf-8)
(prefer-coding-system 'utf-8)
(setq locale-coding-system 'utf-8)
(setq default-process-coding-system '(utf-8-unix . utf-8-unix))

(defun shark-bytes/dos2unix ()
  (interactive)
  (set-buffer-file-coding-system 'utf-8-unix nil))

(defun shark-bytes/unix2dos ()
  (interactive)
  (set-buffer-file-coding-system 'utf-8-dos nil))
#+end_src

** Highlighting
*** Enable stealth fontification
#+begin_src emacs-lisp
(setq jit-lock-stealth-time 1
      jit-lock-chunk-size 500
      jit-lock-defer-time 0)
#+end_src

*** Pretty symbols
#+begin_src emacs-lisp
(add-hook 'text-mode-hook (lambda()
                            (push '("<_->" . ?⇄) prettify-symbols-alist)
                            (push '("<-_>" . ?⇆) prettify-symbols-alist)

                            (push '("--->" . ?⤏) prettify-symbols-alist)
                            (push '("<---" . ?⤎) prettify-symbols-alist)

                            (push '("-|>" . ?⇾) prettify-symbols-alist)
                            (push '("<|-" . ?⇽) prettify-symbols-alist)
                            (push '("<|-|>" . ?⇿) prettify-symbols-alist)

                            (push '("=/=>" . ?⇏) prettify-symbols-alist)
                            (push '("<=/=" . ?⇍) prettify-symbols-alist)
                            (push '("=|=>" . ?⤃) prettify-symbols-alist)
                            (push '("<=|=" . ?⤂) prettify-symbols-alist)
                            (push '("<=|=>" . ?⤄) prettify-symbols-alist)
                            (push '("<=/=>" . ?↮) prettify-symbols-alist)

                            (push '("..>" . ?⇢) prettify-symbols-alist)
                            (push '("<.." . ?⇠) prettify-symbols-alist)
                            (push '("^.." . ?⇡) prettify-symbols-alist)
                            (push '("v.." . ?⇣) prettify-symbols-alist)

                            (push '("->|" . ?⇥) prettify-symbols-alist)
                            (push '("|<-" . ?⇤) prettify-symbols-alist)
                            (push '("|<-_>|" . ?↹) prettify-symbols-alist)

                            (push '("-|->" . ?⇸) prettify-symbols-alist)
                            (push '("<-|-" . ?⇷) prettify-symbols-alist)
                            (push '("<-|->" . ?⇹) prettify-symbols-alist)

                            (push '("-||->" . ?⇻) prettify-symbols-alist)
                            (push '("<-||-" . ?⇺) prettify-symbols-alist)
                            (push '("<-||->" . ?⇼) prettify-symbols-alist)

                            (push '("^||v" . ?⇅) prettify-symbols-alist)
                            (push '("v||^" . ?⇵) prettify-symbols-alist)

                            (push '("\/v" . ?↯) prettify-symbols-alist)))
#+end_src

[[https://github.com/iqbalansari/emacs-emojify][Emojis]]
#+begin_src emacs-lisp
(use-package emojify
  :hook (after-init-hook . global-emojify-mode))
#+end_src

*** Syntax types
**** [[https://github.com/sensorflo/adoc-mode][AsciiDoc]]
#+begin_src emacs-lisp
(use-package adoc-mode
  :mode ("\\.adoc\\'" . adoc-mode))
#+end_src

**** Markdown
#+begin_src emacs-lisp
(use-package markdown-mode
  :mode
  (("README\\.md\\'" . gfm-mode)
   ("\\.md\\'" . markdown-mode)
   ("\\.markdown\\'" . markdown-mode))
  :hook (markdown-mode . (lambda ()
                           (typo-mode -1)))
  :custom
  (markdown-command "multimarkdown")
  (markdown-enable-wiki-links t)
  (markdown-italic-underscore t)
  (markdown-make-gfm-checkboxes-buttons t))
#+end_src

***** Editing
****** Wrap Region
#+begin_src emacs-lisp
(with-eval-after-load "wrap-region"
  (wrap-region-add-wrappers
   '(("*" "*" "/" (gfm-mode markdown-mode))
     ("**" "**" "b" (gfm-mode markdown-mode))
     ("***" "***" "e" (gfm-mode markdown-mode))))
  (add-hook 'gfm-mode-hook 'wrap-region-mode)
  (add-hook 'markdown-mode-hook 'wrap-region-mode))
#+end_src

****** [[https://github.com/ardumont/markdown-toc][Table of contents]]
#+begin_src emacs-lisp
(use-package markdown-toc
  :custom
  (markdown-toc-header-toc-start nil)
  (markdown-toc-header-toc-end nil))
#+end_src

***** [[github:mivok/markdownlint][Syntax checker]]
#+begin_src emacs-lisp
(with-eval-after-load "system-packages"
  (shark-bytes/install-system-package "mdl" :package-manager 'gem))
#+end_src

***** [[https://github.com/mola-T/flymd][Preview]]
#+begin_src emacs-lisp
(use-package flymd
  :custom
  (flymd-close-buffer-delete-temp-files t)
  (flymd-output-directory temporary-file-directory))
#+end_src

*** Highlight whitespace
#+begin_src emacs-lisp
(use-package whitespace
  :custom
  (whitespace-action nil)
  (whitespace-global-modes t)
  (whitespace-line-column 120)
  (whitespace-style '(face lines-tail missing-newline-at-eof trailing))
  :init
  (whitespace-mode))
#+end_src

*** [[https://github.com/minad/goggles][Highlight edited areas shortly]]
#+begin_src emacs-lisp
(use-package goggles
  :hook (find-file . goggles-mode))
#+end_src

*** Highlight current symbol
#+begin_src emacs-lisp
(use-package auto-highlight-symbol
  :custom
  (ahs-case-fold-search nil)
  (ahs-default-range 'ahs-range-whole-buffer)
  (ahs-idle-interval 0.25)
  (ahs-inhibit-face-list nil)
  (ahs-suppress-log t)
  :config
  (push 'org-mode ahs-modes)
  (global-auto-highlight-symbol-mode t))
#+end_src

*** [[https://github.com/alvarogonzalezsotillo/region-occurrences-highlighter][Highlight current region]]
#+begin_src emacs-lisp
(use-package region-occurrences-highlighter
  :hook (prog-mode . region-occurrences-highlighter-mode)
  :bind (:map region-occurrences-highlighter-nav-mode-map
              ("M-n" . region-occurrences-highlighter-next)
              ("M-p" . region-occurrences-highlighter-prev)))
#+end_src

*** Highlight number packs
Use custom regex to ignore color definitions (numbers starting with a # sign)
#+begin_src emacs-lisp
(use-package num3-mode
  :hook find-file
  :custom (num3--number-re (concat "[^#]0[xX]\\([[:xdigit:]]+\\)"
                                   "\\|"
                                   "[^#]\\(?1:\\b\\(?:[0-9]+[a-fA-F]\\|[a-fA-F]+[0-9]\\)[[:xdigit:]]*\\b\\)"
                                   "\\|"
                                   "[^#]\\([0-9]+\\)"
                                   "\\|"
                                   "\\.\\([0-9]+\\)")))
#+end_src

*** Highlight colors
#+begin_src emacs-lisp
(use-package rainbow-mode
  :demand t
  :hook find-file
  :config
  (add-to-list 'rainbow-html-colors-major-mode-list 'emacs-lisp-mode)
  (add-to-list 'rainbow-html-colors-major-mode-list 'org-mode))
#+end_src

*** Highlight matching parens
#+begin_src emacs-lisp
(setq show-paren-style 'mixed
      show-paren-delay 0.1
      show-paren-highlight-openparen t
      show-paren-when-point-inside-paren nil
      show-paren-when-point-in-periphery t)
(show-paren-mode)
#+end_src

**** Highlight off-screen matching parens
#+begin_src emacs-lisp :tangle no
(remove-hook 'post-self-insert-hook
             #'blink-paren-post-self-insert-function)

(setq blink-matching-paren 'show)

(defvar-local shark-bytes/matching-paren-overlay nil "An overlay for off-screen matching parens.")

(defun shark-bytes/highlight-paren (&rest unused-arguments)
  "Display matching line for off-screen paren."
  (when (overlayp shark-bytes/matching-paren-overlay)
    (delete-overlay shark-bytes/matching-paren-overlay))
  (when (and (overlay-buffer show-paren--overlay)
             (not (or cursor-in-echo-area
                      executing-kbd-macro
                      noninteractive
                      (minibufferp)
                      this-command))
             (and (not (bobp))
                  (memq (char-syntax (char-before)) '(?\) ?\$)))
             (= 1 (logand 1 (- (point)
                               (save-excursion
                                 (forward-char -1)
                                 (skip-syntax-backward "/\\")
                                 (point))))))
    (cl-letf (((symbol-function #'minibuffer-message)
               (lambda (message &rest arguments)
                 (setq shark-bytes/matching-paren-overlay (save-excursion
                                                      (goto-char (window-start))
                                                      (make-overlay (line-beginning-position)
                                                                    (line-end-position))))
                 (overlay-put shark-bytes/matching-paren-overlay 'display (replace-regexp-in-string "Matches " "" (apply #'format-message message arguments)))
                 (overlay-put shark-bytes/matching-paren-overlay 'priority 2000)
                 (overlay-put shark-bytes/matching-paren-overlay 'face '(:inherit flycheck-info)))))
      (blink-matching-open))))

(advice-add #'show-paren-function :after #'shark-bytes/highlight-paren)
#+end_src

*** Highlight last screen content when navigating
#+begin_src emacs-lisp
(use-package on-screen
  :custom
  (on-screen-auto-update t)
  (on-screen-delay 1.5)
  (on-screen-drawing-threshold 10)
  (on-screen-highlight-method 'shadow)
  (on-screen-remove-when-edit t)
  (on-screen-highlighting-to-background-delta 0.9)
  :config (on-screen-global-mode +1))
#+end_src

*** Smart narrowing/widening
#+begin_src emacs-lisp
(defun shark-bytes/narrow-or-widen-dwim (prefix)
  "Widen if buffer is narrowed, narrow otherwise. If a prefix is given, always narrow regardless of narrowed state."
  (interactive "P")
  (declare (interactive-only))
  (cond ((and (buffer-narrowed-p)
              (not prefix)
              (not (region-active-p)) (widen)))
        ((region-active-p)
         (narrow-to-region (region-beginning)
                           (region-end)))
        ((derived-mode-p 'org-mode)
         (cond ((ignore-errors (org-edit-src-code) t)
                (delete-other-windows))
               ((ignore-errors (org-narrow-to-block) t))
               (t (org-narrow-to-subtree))))
        ((derived-mode-p 'latex-mode)
         (LaTeX-narrow-to-environment))
        (t (narrow-to-defun))))
#+end_src

** Syntax checker
*** [[https://github.com/tmalsburg/guess-language.el][Guess language]]
#+begin_src emacs-lisp
(use-package guess-language
  :hook text-mode-hook
  :custom (guess-language-languages '(en de)))
#+end_src

*** [[https://github.com/bnbeckwith/writegood-mode][Mark common language issues]]
#+begin_src emacs-lisp
(use-package writegood-mode
  :hook fundamental-mode)
#+end_src

*** [[https://github.com/amperser/proselint][Prose Linter]]
#+begin_src emacs-lisp
(with-eval-after-load "system-packages"
  (shark-bytes/install-system-package "proselint" :package-manager 'pip)
  (with-eval-after-load "flycheck"
    (flycheck-define-checker proselint
      "A linter for prose."
      :command ("proselint" source-inplace)
      :error-patterns
      ((warning line-start (file-name) ":" line ":" column ": "
                (id (one-or-more (not (any " "))))
                (message (one-or-more not-newline)
                         (zero-or-more "\n" (any " ") (one-or-more not-newline)))
                line-end))
      :modes (text-mode org-mode markdown-mode gfm-mode))
    (add-to-list 'flycheck-checkers 'proselint)))
#+end_src

*** Diction
#+begin_src emacs-lisp
(defvar-local shark-bytes/diction-language "en" "The language used for diction checks.")
#+end_src

#+begin_src emacs-lisp
(with-eval-after-load "flycheck"
  (with-eval-after-load "guess-language"
    (defun shark-bytes/guess-language-switch-diction-function (lang &optional beginning end)
      "Switch the diction dictionary and recheck the current paragraph."
      (let ((new-language (cadr (assq lang guess-language-langcodes))))
        (when (and (not (string= shark-bytes/diction-language new-language))
                   (member new-language '("en" "de")))
          (setq shark-bytes/diction-language new-language))))

    (add-to-list 'guess-language-after-detection-functions 'shark-bytes/guess-language-switch-diction-function))

  (with-eval-after-load "system-packages"
    (shark-bytes/install-system-package "diction")

    (flycheck-define-checker shark-bytes/diction
      "Diction checker"
      :command ("diction" "-bs" "-L" (eval shark-bytes/diction-language) source-original)
      :error-patterns ((info line-start (file-name) ":" line ": " (message) line-end))
      :modes (text-mode org-mode markdown-mode gfm-mode))

    (add-to-list 'flycheck-checkers 'shark-bytes/diction)))
#+end_src

** Navigation
*** [[https://github.com/ahungry/fast-scroll][Fast scrolling]]

#+begin_src emacs-lisp
(use-package fast-scroll
  :config
  (fast-scroll-config)
  (fast-scroll-mode 1))
#+end_src

*** Smart begin/end
#+begin_src emacs-lisp
(use-package beginend
  :config (beginend-global-mode))
#+end_src

*** End sentence with single space
#+begin_src emacs-lisp
(setq sentence-end-double-space nil)
#+end_src

*** [[https://github.com/elpa-host/goto-char-preview][Go to character with preview]]
#+begin_src emacs-lisp
(use-package goto-char-preview)
#+end_src

*** [[https://github.com/tam17aki/ace-isearch][Jump to any symbol]]
#+begin_src emacs-lisp
(use-package avy
  :custom
  (avy-all-windows t)
  (avy-background t)
  (avy-style 'words)
  (avy-dispatch-alist '((?k . avy-action-kill-move)
                        (?r . avy-action-kill-stay)
                        (?t . avy-action-teleport)
                        (?w . avy-action-copy)
                        (?y . avy-action-yank))))

(use-package ace-isearch
  :custom
  (ace-isearch-function 'avy-goto-subword-1)
  (ace-isearch-input-length 2)
  :config (global-ace-isearch-mode +1))
#+end_src

*** [[https://github.com/camdez/goto-last-change.el][Jump to last change]]
#+begin_src emacs-lisp
(use-package goto-last-change)
#+end_src

*** [[https://github.com/Overdr0ne/gumshoe][Jump to one of the last locations]]
#+begin_src emacs-lisp
(use-package gumshoe
  :after consult
  :straight (gumshoe :type git
                     :host github
                     :repo "Overdr0ne/gumshoe")
  :config
  (defun shark-bytes/gumshoe--peruse (recs slot-spec &optional entry-filter)
    "Override for gumshoe--peruse to use 'consult--line'."
    (consult--line (mapcar (lambda (entry)
                             (let ((marker (make-marker)))
                               (set-marker marker (slot-value entry 'position) (slot-value entry 'buffer))
                               (when (and (marker-position marker) (marker-buffer marker))
                                 (consult--location-candidate (slot-value entry 'line)
                                                              marker
                                                              (slot-value entry 'position)))))
                           (if entry-filter
                               (seq-filter entry-filter recs)
                             recs))
                   :prompt "Go to line: "))
  (advice-add #'gumshoe--peruse :override #'shark-bytes/gumshoe--peruse)
  (global-gumshoe-mode 1))
#+end_src

*** URIs
**** Allow clicking on URIs
#+begin_src emacs-lisp
(add-hook 'prog-mode-hook 'goto-address-prog-mode)
#+end_src

**** [[https://github.com/abo-abo/ace-link][Jump to link address via keys]]
#+begin_src emacs-lisp
(use-package ace-link
  :config
  (ace-link-setup-default)
  (defun shark-bytes/jump-to-url ()
    "Jump to the URL at point."
    (interactive)
    (let ((url (url-get-url-at-point)))
      (if url
          (browse-url url)
        (ace-link-addr)))))
#+end_src

** Editing
*** Indentation
#+begin_src emacs-lisp
(setq-default indent-tabs-mode nil)
(setq-default fill-column 120)
(setq auto-fill-mode t
      comment-empty-lines t
      electric-indent-mode t
      electric-layout-mode t
      electric-pair-mode nil
      show-trailing-whitespace t
      tab-always-indent 'complete
      c-tab-always-indent 'complete
      tab-width 4
      text-mode-hook '(turn-on-auto-fill text-mode-hook-identify)
      require-final-newline nil)

(defvar shark-bytes/default-indentation 4 "The default number of spaces to indent.")
(defvar autopair-skip-whitespace t)
(defvar electric-spacing-double-space-docs nil)
#+end_src

*** [[https://gitlab.com/emacs-stuff/indent-tools][Indent tools]]
#+begin_src emacs-lisp
(use-package indent-tools)
#+end_src

*** Upper/lower case
#+begin_src emacs-lisp
(use-package fix-word)
#+end_src

*** [[https://github.com/ainame/smart-newline.el][Smart Newline]]
#+begin_src emacs-lisp
(use-package smart-newline
  :commands smart-newline-mode
  :hook (prog-mode . smart-newline-mode))
#+end_src

*** [[https://github.com/davidshepherd7/aggressive-fill-paragraph-mode][Auto-fill paragraphs]]
#+begin_src emacs-lisp
(use-package aggressive-fill-paragraph
  :custom (afp-fill-comments-only-mode-list '(prog-mode)))
#+end_src

*** Join lines
#+begin_src emacs-lisp
(defun shark-bytes/join-lines ()
  "Join lines, optionally with a separator and quotes."
  (interactive)
  (if (region-active-p)
      (let ((separator-character (read-string "Separator: "))
            (quote-character (read-string "Quote: ")))
        (save-restriction
          (narrow-to-region (region-beginning) (region-end))
          (let ((lines (split-string (buffer-string) "\n" t)))
            (delete-region (point-min) (point-max))
            (insert (concat quote-character
                            (s-join (concat quote-character separator-character quote-character)
                                    lines)
                            quote-character)))))
    (crux-top-join-line)))
#+end_src

*** Easier escaping
#+begin_src emacs-lisp
(use-package string-edit)
#+end_src

*** Expand selection
#+begin_src emacs-lisp
(use-package expand-region)
#+end_src

*** Clipboard
Keep up to 500 entries
#+begin_src emacs-lisp
(setq kill-ring-max 500)
#+end_src

Ignore duplicates
#+begin_src emacs-lisp
(setq kill-do-not-save-duplicates t)
#+end_src

Use system clipboard
#+begin_src emacs-lisp
(setq select-enable-clipboard t)
#+end_src

Save system clipboard contents to kill ring before killing
#+begin_src emacs-lisp
(setq save-interprogram-paste-before-kill t)
#+end_src

Set prefered clipboard formats
#+begin_src emacs-lisp
(setq x-select-request-type '(UTF8_STRING COMPOUND_TEXT TEXT STRING))
#+end_src

*** Do not delete selected text when inserting characters
#+begin_src emacs-lisp
(delete-selection-mode nil)
#+end_src

*** Do not alert when killing read-only text
#+begin_src emacs-lisp
(setq kill-read-only-ok t)
#+end_src

*** Move text
#+begin_src emacs-lisp
(use-package smart-shift
  :config (global-smart-shift-mode 1))
#+end_src

*** [[https://github.com/nflath/hungry-delete][Delete adjoining whitespaces in all major modes]]
#+begin_src emacs-lisp
(use-package hungry-delete
  :custom (hungry-delete-join-reluctantly t)
  :config (global-hungry-delete-mode))
#+end_src

*** Smart backward delete
#+begin_src emacs-lisp
(defun shark-bytes/backward-kill-dwim ()
  (interactive "p")
  (if (region-active-p)
      (call-interactively #'kill-region)
    (kill-region (line-beginning-position) (point))))
#+end_src

*** [[https://github.com/lewang/ws-butler][Remove trailing whitespace in changed lines]]
#+begin_src emacs-lisp
(use-package ws-butler
  :hook (after-init . ws-butler-global-mode)
  :custom (ws-butler-keep-whitespace-before-point nil))
#+end_src

*** Allow adding a newline to the end of the current line, regardless of point position
#+begin_src emacs-lisp
(defun shark-bytes/newline-after-current-line ()
  "Moves to the end of the current line and inserts a newline."
  (interactive)
  (end-of-line)
  (newline-and-indent))
#+end_src

*** Cut/copy whole line if no region is active
#+begin_src emacs-lisp
(use-package whole-line-or-region
  :config (whole-line-or-region-global-mode t))
#+end_src

*** Case-insensitive line sorting
#+begin_src emacs-lisp
(defun shark-bytes/sort-lines-case-insensitive ()
  (interactive)
  (let ((sort-fold-case t))
    (call-interactively 'sort-lines)))
#+end_src

*** Remove duplicate adjacent lines
#+begin_src emacs-lisp
(defun shark-bytes/remove-duplicate-lines ()
  "Remove duplicate adjacent lines in a region or buffer."
  (interactive)
  (save-excursion
    (let ((begin (if (region-active-p)
                     (region-beginning)
                   (point-min)))
          (end (if (region-active-p)
                   (region-end)
                 (point-max))))
      (goto-char begin)
      (while (re-search-forward "^\\(.*\n\\)\\1+" end t)
        (replace-match "\\1")))))
#+end_src

*** Sort words
#+begin_src emacs-lisp
(use-package sort-words)
#+end_src

*** [[https://github.com/mkcms/interactive-align][Regex alignment]]
#+begin_src emacs-lisp
(use-package ialign
  :custom (ialign-align-with-tabs indent-tabs-mode))
#+end_src

*** [[https://github.com/benma/visual-regexp.el][Visual regular expressions]]
#+begin_src emacs-lisp
(use-package visual-regexp
  :custom (vr/engine 'emacs))

(use-package visual-regexp-steroids
  :after visual-regexp)
#+end_src

*** [[github:Atreyagaurav/units-mode][Convert Units]]
#+begin_src emacs-lisp
(use-package units-mode
  :ensure-system-package units
  :hook text-mode)
#+end_src

*** Automatic insert
**** Typographic characters
#+begin_src emacs-lisp
(use-package typo
  :hook (text-mode . (lambda ()
                       (when (not (string-equal (buffer-name) (file-name-nondirectory shark-bytes/config-file)))
                         (typo-mode)))))
#+end_src

**** Abbreviations
Enable Abbrev-Mode by default
#+begin_src emacs-lisp
(setq-default abbrev-mode t)
#+end_src

Always save abbreviations. Do not ask.
#+begin_src emacs-lisp
(setq save-abbrevs 'silently)
#+end_src

Some useful abbreviations
#+begin_src emacs-lisp
(define-abbrev-table 'global-abbrev-table '(("cpsign" "©")
                                            ("tmsign" "™")
                                            ("infsign" "∞")
                                            ("ifomration" "information")))
#+end_src

Use hippie-expand instead of dabbrev
#+begin_src emacs-lisp
(global-set-key [remap dabbrev-expand] 'hippie-expand)
#+end_src

**** [[https://github.com/joaotavora/yasnippet][Templates]]
#+begin_src emacs-lisp
(use-package yasnippet
  :bind (:map yas-keymap (("ESC" . yas-abort-snippet)
                          ("DEL" . yas-skip-and-clear-or-delete-char)))
  :custom
  (yas-snippet-dirs '("~/.yas-snippets"))
  (yas-wrap-around-region t)
  (yas-use-menu nil)
  (yas-triggers-in-field t)
  (yas-also-indent-empty-lines t)
  :config (yas-global-mode 1))
#+end_src

[[https://joaotavora.github.io/yasnippet/snippet-development.html][Snippet Development Documentation]]

***** Consult integration
#+begin_src emacs-lisp
(use-package consult-yasnippet
  :after (consult yasnippet))
#+end_src

***** Licenses
#+begin_src emacs-lisp
(use-package license-snippets
  :after yasnippet
  :config (license-snippets-init))
#+end_src

***** [[https://github.com/abo-abo/auto-yasnippet][Automatic snippets]]
#+begin_src emacs-lisp
(use-package auto-yasnippet
  :after yasnippet)
#+end_src

*** [[https://github.com/rejeep/wrap-region.el][Wrap Region]]
#+begin_src emacs-lisp
(use-package wrap-region
  :hook ((wrap-region-before-wrap . (lambda () (electric-pair-mode 0)))
         (wrap-region-after-wrap . (lambda () (electric-pair-mode 1)))))
#+end_src

*** Insert Date/Time
#+begin_src emacs-lisp
(defun shark-bytes/insert-timestamp ()
  "Insert date and time according to the locale's date and time format."
  (interactive)
  (insert (format-time-string "%c" (current-time))))

(defun shark-bytes/insert-date ()
  "Insert the date according to the locale's date format."
  (interactive)
  (insert (format-time-string "%x" (current-time))))

(defun shark-bytes/insert-time ()
  "Insert the time according to the locale's time format."
  (interactive)
  (insert (format-time-string "%X" (current-time))))

(defun shark-bytes/insert-iso-date ()
  "Insert the date according to the ISO date format."
  (interactive)
  (insert (format-time-string "%F" (current-time))))

(defun shark-bytes/insert-iso-timestamp ()
  "Insert the date according to the ISO date format."
  (interactive)
  (insert (format-time-string "%FT%T%z" (current-time))))
#+end_src

*** Insert UUID
#+begin_src emacs-lisp
(shark-bytes/install-system-package "util-linux")
(defun shark-bytes/insert-uuid ()
  "Insert a UUID at point."
  (interactive)
  (insert (replace-regexp-in-string "\n" "" (shell-command-to-string (executable-find "uuidgen")))))
#+end_src

*** Thesaurus
#+begin_src emacs-lisp
(use-package synosaurus
  :ensure-system-package wordnet
  :hook (after-init . synosaurus-mode)
  :custom (synosaurus-choose-method 'default)
  :config (setq-default synosaurus-backend 'synosaurus-backend-wordnet))
#+end_src

*** [[https://github.com/magnars/change-inner.el][Change inner]]
#+begin_src emacs-lisp
(use-package change-inner)
#+end_src

*** Utilities
**** [[https://github.com/mhayashi1120/Emacs-wgrep][Edit grep buffers]]
#+begin_src emacs-lisp
(use-package wgrep
  :hook (rg-mode . wgrep-rg-setup)
  :custom (wgrep-enable-key "e"))
#+end_src

** [[http://www-sop.inria.fr/members/Manuel.Serrano/flyspell/flyspell.html][Spell checking]]
#+begin_src emacs-lisp
(use-package flyspell
  :after (consult system-packages)
  :ensure-system-package (aspell aspell-en aspell-de)
  :custom
  (flyspell-issue-welcome-flag nil)
  (flyspell-issue-message-flag nil)
  (flyspell-sort-corrections t)
  (flyspell-default-dictionary nil)
  (flyspell-abbrev-p t)
  (flyspell-use-global-abbrev-table-p t)
  (ispell-dictionary "en_US")
  (ispell-local-dictionary "en_US")
  (ispell-personal-dictionary "~/.emacs.d/.aspell.en.pws")
  (ispell-program-name "/usr/bin/aspell")
  (ispell-silently-savep t)
  (ispell-extra-args '("--sug-mode=ultra"
                       "--lang=en_US"))
  :config
  (when (string-match-p "--camel-case"
                        (shell-command-to-string (concat ispell-program-name " --help")))
    (push "--camel-case" ispell-extra-args))
  (push "\\`\\*flypell.*\\*\\'" consult-buffer-filter)
  (defvar-local shark-bytes/flyspell-errors 0 "The number of spelling errors in the document.")
  (advice-add 'flyspell-after-change-function :after (lambda (&rest arguments)
                                                       (setq shark-bytes/flyspell-errors 0)
                                                       (dolist (buffer-overlay (overlays-in (point-min) (point-max)))
                                                         (when (flyspell-overlay-p buffer-overlay)
                                                             (setq shark-bytes/flyspell-errors (1+ shark-bytes/flyspell-errors))))
                                                       (force-mode-line-update)))
  (defun shark-bytes/modeline-flyspell-status()
    "Format the modeline flyspell information."
    (when (and flyspell-mode
               (> shark-bytes/flyspell-errors 0))
      (propertize (format " %d" shark-bytes/flyspell-errors)
                          'face 'shark-bytes/check-status-error)))
  (add-to-list 'shark-bytes/modeline-check-status-functions 'shark-bytes/modeline-flyspell-status))
#+end_src

https://github.com/d12frosted/flyspell-correct
#+begin_src emacs-lisp
(use-package flyspell-correct
  :after flyspell)
#+end_src

#+begin_src emacs-lisp
(use-package consult-flyspell
  :straight (consult-flyspell
             :type git
             :host gitlab
             :repo "OlMon/consult-flyspell")
  :after (consult flyspell-correct)
  :custom
  (consult-flyspell-select-function (lambda () (flyspell-correct-at-point) (consult-flyspell)))
  (consult-flyspell-set-point-after-word t)
  (consult-flyspell-always-check-buffer t))
#+end_src

** Utilities
*** [[https://github.com/fourier/loccur][Filter]]
#+begin_src emacs-lisp
(use-package loccur)
#+end_src

*** [[https://github.com/akicho8/string-inflection][Change lower/upper case]]
#+begin_src emacs-lisp
(use-package string-inflection)
#+end_src

*** [[https://github.com/abo-abo/define-word][Define word]]
#+begin_src emacs-lisp
(use-package define-word)
#+end_src

*** [[https://github.com/atykhonov/google-translate][Translate text]]
#+begin_src emacs-lisp
(use-package google-translate
  :custom
  (google-translate-show-phonetic t)
  (google-translate-output-destination 'popup)
  (google-translate-default-source-language "auto")
  :config
  (defun shark-bytes/translate-word-or-region (&optional target-language replace)
    "Replace the current region or word with its translation."
    (interactive)
    (let* ((bounds (shark-bytes/word-or-region-bounds))
           (begin (car bounds))
           (end (cdr bounds))
           (text (buffer-substring-no-properties begin
                                                 end))
           (target-language (google-translate-language-abbreviation (or target-language
                                                                        (google-translate-completing-read "Translate to: "
                                                                                                          (google-translate-supported-languages)
                                                                                                          "English"))))
           (google-translate-output-destination (if replace
                                                    'current-buffer
                                                  google-translate-output-destination)))
      (when replace
        (delete-region begin end))
      (google-translate-translate "auto" target-language text))))
#+end_src

*  Binaries
Open binary files in hexl-mode
#+begin_src emacs-lisp
(defvar shark-bytes/no-hexedit-extensions nil "File extensions for which automatic hex editing is disabled")

(add-hook 'find-file-hook (lambda ()
                            (when (and (eq buffer-file-coding-system 'no-conversion)
                                       (not (catch 'found
                                              (mapc (lambda (pattern)
                                                      (when (and (stringp buffer-file-name)
                                                                 (string-match pattern buffer-file-name))
                                                        (throw 'found pattern)))
                                                    shark-bytes/no-hexedit-extensions)
                                              nil)))
                              (hexl-mode))))
#+end_src

** Support cpio
#+begin_src emacs-lisp
(use-package cpio-mode
  :bind (:map cpio-mode-map ("q" . kill-this-buffer))
  :config
  (push "\\.cpio\\'" shark-bytes/no-hexedit-extensions)
  (push '("070707" . cpio-mode) magic-mode-alist)
  (push '("0123456789abcdef" . cpio-mode) magic-mode-alist)
  (push '("0123456789abcdefCPIO archive" . cpio-mode) magic-mode-alist))
#+end_src

*  Images
** Disable hex edit mode for images
#+begin_src emacs-lisp
(push "\\.jpg\\'" shark-bytes/no-hexedit-extensions)
(push "\\.jpeg\\'" shark-bytes/no-hexedit-extensions)
(push "\\.png\\'" shark-bytes/no-hexedit-extensions)
(push "\\.gif\\'" shark-bytes/no-hexedit-extensions)
(push "\\.svg\\'" shark-bytes/no-hexedit-extensions)
#+end_src

*  Programming
** Projects
*** [[https://github.com/bbatsov/projectile][Projectile]]
#+begin_src emacs-lisp
(defvar shark-bytes/project-directories (list "~/Projects" "~/projects") "A list of directories to check for projects.")

(use-package projectile
  :custom
  (projectile-create-missing-test-files t)
  (projectile-dynamic-mode-line nil)
  (projectile-enable-caching nil)
  (projectile-find-dir-includes-top-level t)
  (projectile-git-submodule-command nil)
  (projectile-idle-timer-hook nil)
  (projectile-ignored-project-function (lambda (project)
                                         (string-match (file-truename (expand-file-name ".*" user-emacs-directory)) project)))
  (projectile-sort-order 'recently-active)
  (projectile-verbose nil)
  :config
  (projectile--cleanup-known-projects)
  (projectile-global-mode)
  (with-eval-after-load "magit"
    (defun shark-bytes/load-after-clone (_repository directory _args)
      "Automatically load project after clone operation."
      (projectile-add-known-project directory)
      (projectile-switch-project-by-name directory))
    (advice-add 'magit-clone-internal :after #'shark-bytes/load-after-clone)))
#+end_src

**** [[github:emacsmirror/consult-projectile][Consult integration]]
#+begin_src emacs-lisp
(use-package consult-projectile
  :after (consult projectile)
  :custom (consult-projectile-sources '(consult-projectile--source-projectile-project))
  :config
  (setq consult-projectile--source-projectile-project (list :category 'consult-projectile-project
                                                            :history 'consult-projectile--project-history
                                                            :annotate (lambda (dir)
                                                                        (when consult-projectile-display-info
                                                                          (format "%s %s  [%s]"
                                                                                  (if-let* ((customer (file-name-nondirectory (directory-file-name (file-name-directory (directory-file-name dir)))))
                                                                                            (icon (org-agenda-get-category-icon customer)))
                                                                                      (propertize "   " 'display icon)
                                                                                    "   ")
                                                                                  (projectile-project-name dir)
                                                                                  (projectile-project-vcs dir))))
                                                            :action (lambda (dir) (funcall consult-projectile-source-projectile-project-action dir))
                                                            :items #'projectile-relevant-known-projects))
  (advice-add 'projectile-switch-project :override 'consult-projectile))
#+end_src

*** Update project statistics
#+begin_src emacs-lisp
(defvar shark-bytes/known-project-stats nil "Project statistics.")

(defun shark-bytes/get-project-stats (project-root)
  "Get project statistics for project in PROJECT-ROOT."
  (async-start-process (concat "Project Statistics " project-root)
                       "cloc"
                       (lambda (process)
                         (push (cons (car (last (process-command process)))
                                     (json-read-from-string (with-current-buffer (process-buffer process)
                                                              (buffer-substring-no-properties (point-min)
                                                                                              (point-max)))))
                               shark-bytes/known-project-stats))
                       "--quiet" "--json" "--skip-uniqueness" (file-truename project-root)))

(run-with-idle-timer 600 t (lambda ()
                             (setq shark-bytes/known-project-stats nil)
                             (mapcar #'shark-bytes/get-project-stats projectile-known-projects)))
#+end_src

*** Utilities
**** Find file in project
#+begin_src emacs-lisp
(defun shark-bytes/find-project-file (file)
  "Find a file in source or build directory."
  (or
   (let* ((source-dir (shark-bytes/project-dir))
          (source-file (when source-dir
                         (expand-file-name file source-dir))))
     (when (and source-file
                (file-exists-p source-file))
       source-file))
   (let* ((build-dir (shark-bytes/current-build-directory))
          (build-file (when build-dir
                        (expand-file-name file build-dir))))
     (when (and build-file
                (file-exists-p build-file))
       source-file))))
#+end_src

*** Use docker to run tools for docker-based projects
#+begin_src emacs-lisp
(system-packages-ensure "docker")

(defvar default-docker-compose-file "docker-compose.yml" "The default name for the docker-compose file.")
(defvar default-docker-start-script "docker-run.sh" "The default path to a script to start applications in a docker container.")

(defun shark-bytes/docker-compose-file ()
  "Find the compose file in the project root."
  (let ((compose-file (shark-bytes/find-project-file default-docker-compose-file)))
    (when (and compose-file
             (file-exists-p compose-file))
        compose-file)))

(defun shark-bytes/is-docker-project-p ()
  "Check if the current project supports docker."
  (or (shark-bytes/docker-compose-file)
      (shark-bytes/find-project-file ".docker-project")))

(defun shark-bytes/maybe-run-in-docker (command)
  "Run a command in docker if supported by the project."
  (let* ((compose-file (shark-bytes/docker-compose-file)))
    (if compose-file
        (append `(docker-compose --file ,compose-file --exec) command)
      (if (and (shark-bytes/is-docker-project-p)
               default-docker-start-script)
          (append default-docker-start-script command)
        command))))

(with-eval-after-load "flycheck"
  (setq flycheck-command-wrapper-function #'(lambda (command)
                                              (shark-bytes/maybe-run-in-docker command))))
#+end_src

**** [[https://github.com/bard/emacs-run-command][Run commands in project]]
#+begin_src emacs-lisp
(use-package run-command
  :config
  (defun shark-bytes/run-command-project-scripts-recipe ()
    "Run-command recipe for project scripts."
    (-non-nil (mapcar (lambda (file)
                        (let ((file-path (expand-file-name file (shark-bytes/project-dir))))
                          (when (and (file-regular-p file-path)
                                     (file-executable-p file-path))
                            (list :command-line file-path
                                  :command-name file))))
                      (projectile-project-files (shark-bytes/project-dir)))))
  (defun shark-bytes/run-command-project-scripts ()
    "Run a project script."
    (interactive)
    (let ((run-command-recipes '(shark-bytes/run-command-project-scripts-recipe)))
      (run-command))))
 #+end_src

*** CMake
#+BEGIN_SRC emacs-lisp
(cpped-install-system-package "cmake")
(cpped-install-system-package "ccmake")
(cpped-install-system-package "ninja-build")
#+END_SRC

**** Re-/Configure CMake
Handler to close buffer after quitting ccmake.
#+BEGIN_SRC emacs-lisp
(advice-add 'term-sentinel :after (lambda (proc msg)
                                    (when (and (equal (buffer-name (process-buffer proc)) "*CMake Cache*")
                                               (memq (process-status proc) '(signal exit))))))
#+END_SRC

#+BEGIN_SRC emacs-lisp
(defvar cpped-build-base-directory "~/Build" "The default build directory.")
(defvar cpped-build-directories nil "An alist of all build directories per source directory.")
(defvar cpped-current-build-directories nil "An alist of the selected build directory per source directory.")
(defvar cpped-dependencies-file "dependencies.dot" "The name of the file containig the target dependencies graph.")

(defun cpped-cmake-configure (source-dir build-dir)
  "Configure the CMake project for the current file."
  (interactive (let ((source-directory (if (and (boundp 'source-dir)
                                                source-dir
                                                (file-directory-p source-dir))
                                           source-dir
                                           (read-directory-name "Source Directory: "
                                                                (cpped-project-dir)))))
                 (list source-directory
                       (if (and (boundp 'build-dir)
                                build-dir)
                           build-dir
                           (read-directory-name "Build-directory: "
                                                (expand-file-name (file-name-nondirectory (directory-file-name (file-name-directory source-directory))) cpped-build-base-directory))))))
    (when (and build-dir
               source-dir)
      (if (file-directory-p source-dir)
          (if (cpped-cmake-source-directory-p source-dir)
              (progn
                (when (not (file-directory-p build-dir))
                  (make-directory build-dir t))
                (let ((default-directory build-dir))
                  (ansi-term (getenv "SHELL") (concat "*CMake Cache (" build-dir ")*"))
                  (let* ((full-command (cpped-maybe-run-in-docker source-dir `(ccmake -DGRAPHVIZ_CUSTOM_TARGETS=TRUE ,(concat "--graphviz=" cpped-dependencies-file) -DCMAKE_EXPORT_COMPILE_COMMANDS=ON -G Ninja ,source-dir)))
                         (command (car full-command))
                         (arguments (cdr full-command)))
                    (term-exec (current-buffer) command command nil arguments))
                  (cpped-load-project build-dir)))
            (error "`%s' does not contain a CMake project" source-dir))
        (error "`%s' is not a directory" source-dir))))
#+END_SRC

#+BEGIN_SRC emacs-lisp
(defun cpped-cmake-reconfigure (build-dir)
  "Reconfigure the CMake project for the current file and build directory."
  (interactive (list (or (cpped-build-dir)
                         (read-directory-name "Build-directory: "
                                              (file-name-as-directory cpped-build-base-directory)))))
  (if (and build-dir
           (file-directory-p build-dir))
      (if (cpped-cmake-build-directory-p build-dir)
          (let ((default-directory build-dir))
            (ansi-term (getenv "SHELL") "CMake Cache")
            (let* ((full-command (cpped-maybe-run-in-docker (cpped-cmake-source-dir build-dir) '(ccmake -DGRAPHVIZ_CUSTOM_TARGETS=TRUE ,(concat "--graphviz=" cpped-dependencies-file) .)))
                   (command (car full-command))
                   (arguments (cdr full-command)))
              (term-exec (current-buffer) command command nil arguments))
            (cpped-load-project build-dir))
        (error "`%s' is not a CMake build directory" build-dir))
    (error "`%s' is not a directory" build-dir)))
#+END_SRC

**** Clear CMake Cache
#+BEGIN_SRC emacs-lisp
(defun cpped-cmake-reset (build-dir)
  "Reset the current CMake configuration."
  (interactive (list (or (cpped-build-dir)
                         (read-directory-name "Build-directory: "
                                              (file-name-as-directory cpped-build-base-directory)))))
  (if (and build-dir
           (file-directory-p build-dir))
      (let ((cache-file (expand-file-name "CMakeCache.txt" build-dir)))
        (if (file-exists-p cache-file)
            (progn (delete-file cache-file)
                   (cpped-cmake-configure (cpped-cmake-source-dir build-dir) build-dir))
          (error "`%s' is not a CMake build directory" build-dir)))
    (error "`%s' is not a directory" build-dir)))
#+END_SRC

**** Open Project
#+BEGIN_SRC emacs-lisp
(defvar cpped-after-project-load-hook nil "Hook called after a project is loaded. ")
(defvar cpped-after-project-load-update-project-file-hook nil "Hook called for each project file after a project is loaded. ")

(defun cpped-load-project (build-dir)
  "Load a project."
  (interactive (list (read-directory-name "Build-directory: "
                                          (file-name-as-directory cpped-build-base-directory))))
  (if (cpped-build-directory-p build-dir)
      (let ((source-dir (if (cpped-cmake-build-directory-p build-dir)
                            (cpped-cmake-source-dir build-dir)
                          build-dir)))
        (projectile-discover-projects-in-directory source-dir)
        (when (not (boundp cpped-cmake-current-target))
                                        (setq cpped-cmake-current-target 'all))
        (push '(source-dir . build-dir) cpped-current-build-directories)
        (run-hooks 'cpped-after-project-load-hook)
        (mapc (lambda (buffer)
                (with-current-buffer buffer
                  (run-hooks 'cpped-after-project-load-update-project-file-hook)))
              (projectile-project-buffers)))
    (error "`%s' is not a build directory" build-dir)))
#+END_SRC

**** Select configuration
#+BEGIN_SRC emacs-lisp
(setq cpped-build-directories '(("/home/player/.dotfiles/" . "/home/player/test") ("/home/player" . "/home/player/bla")))

#+END_SRC

**** Delete configuration
#+BEGIN_SRC emacs-lisp
(defun cpped-delete-cmake-build-dir (build-dir)
  "Delete the currently set build directory."
  (interactive (list (or (cpped-build-dir)
                         (read-directory-name "Build-directory: "
                                              (file-name-as-directory cpped-build-base-directory)))))
  (when (cpped-cmake-build-directory-p build-dir)
    (delete-directory build-dir t t)
    (projectile-remove-known-project (cpped-cmake-source-dir build-dir))))
#+END_SRC


**** List targets
#+BEGIN_SRC emacs-lisp
(defvar cpped-current-targets nil "An alist of the currently selected build target per build directory.")

(defun cpped-get-cmake-targets (build-dir)
  "List all CMake targets for build-dir."
  (save-match-data
    (let ((output (shell-command-to-string (cpped-maybe-run-in-docker (cpped-cmake-source-dir build-dir) `(cmake --build ,build-dir --target help))))
          (position 0)
          (targets (list "all")))
      (while (string-match "^[\\. ]*\\([^\\[: ]+\\)" output position)
        (let ((target (match-string 1 output)))
          (unless (or (not target)
                      (string= target "edit_cache"))
            (push target targets))
          (setq position (match-end 0))))
      targets)))

(defun cpped-get-make-targets (build-dir)
  "List all make targets for build-dir."
  (let ((targets (list "all")))
    (with-temp-buffer
      (insert (shell-command-to-string (cpped-maybe-run-in-docker (cpped-cmake-source-dir build-dir) `(LANG=C make -C ,build-dir -nqp .DEFAULT 2>/dev/null))))
      (goto-char (point-min))
      (save-match-data
        (when (re-search-forward "^# Files" nil t)
          (while (re-search-forward "^\\([^/%$:#\n\t ]+\\):\\([^=]\\|$\\)" nil t)
            (setq target (match-string 1))
            (unless (or (save-excursion
                          (goto-char (match-beginning 0))
                          (forward-line -1)
                          (looking-at "^# Not a target:"))
                        (string-match "\\.[hoc]p*$" target))
              (push target targets))))
        targets))))


(defun cpped-build-target ()
  "Get the selected build target for the curent build directory."
  (cdr (assoc (cpped-build-dir) cpped-current-targets)))
#+END_SRC

**** Show target dependencies
(defun shark-bytes/show-target-dependencies (build-dir)
  "Show the target dependencies."
  (interactive (list (or (shark-bytes/current-build-directory)
                         (read-directory-name "Build-directory: "
                                              (file-name-as-directory shark-bytes/build-base-directory)))))
  (let ((dot (executable-find "dot"))
        (inhibit-read-only t))
    (if dot
        (progn
          (pop-to-buffer (get-buffer-create "*Target Dependencies*"))
          (erase-buffer)
          (insert (shell-command-to-string (format "%s -Tsvg %s"
                                                   dot
                                                   (helm :sources (helm-build-sync-source "Target Dependencies"
                                                                    :candidates
                                                                    (let ((candidates (list (cons "all" (expand-file-name shark-bytes/cmake-dependencies-file build-dir)))))
                                                                      (mapc (lambda (element)
                                                                              (when (string-match (rx (literal shark-bytes/cmake-dependencies-file) "." (group (+ (not "."))) (group (? ".dependers")) eol) element)
                                                                                (push (cons (concat (match-string 1 element)
                                                                                                    (if (match-string 3 element)
                                                                                                        " (dependents)"
                                                                                                       ""))
                                                                                            element)
                                                                                      candidates)))
                                                                            (directory-files build-dir t (format "^%s.*" shark-bytes/cmake-dependencies-file)))
                                                                      candidates))
                                                         :prompt "Target: "
                                                         :preselect (or (taskrunner-get-last-command-ran)
                                                                        "all")
                                                         :buffer "*helm target dependencies*"))))
          (image-mode))
      (error "The dot tool is not installed."))))

**** Utilities
***** Find source directory
#+BEGIN_SRC emacs-lisp
(defun cpped-cmake-source-dir (build-dir)
  "Find the corresponding source directory for build-dir."
  (interactive (list (read-directory-name "Build-directory: "
                                          (file-name-as-directory cpped-build-base-directory))))
  (let ((cache-file (expand-file-name "CMakeCache.txt" build-dir)))
    (if (file-exists-p cache-file)
        (let ((source-dir (with-temp-buffer
                            (insert-file-contents cache-file)
                            (beginning-of-buffer)
                            (save-match-data
                              (and
                               (search-forward-regexp "CMAKE_HOME_DIRECTORY[^=]*=[:blank:]*\\(.*\\)[:blank:]*$"
                                                      (point-max) nil 1)
                               (match-string 1))))))
          (if (and source-dir
                   (cpped-cmake-source-directory-p source-dir))
              (if (called-interactively-p 'any)
                  (message (format "The source directory for `%s' is `%s'." build-dir source-dir))
                source-dir)
            (error "Source directory information not found in cache")))
      (error "`%s' is not a CMake build directory" build-dir))))
#+END_SRC

***** Get build directory
#+BEGIN_SRC emacs-lisp
(defun cpped-build-dir ()
  "Get the current build directory."
  (interactive)
  (cdr (assoc (cpped-project-dir) cpped-current-build-directories)))
#+END_SRC

***** Check if directory is source directory
#+BEGIN_SRC emacs-lisp
(defun cpped-cmake-source-directory-p (source-dir)
  "Check if source-dir is a CMake source directory."
  (file-exists-p (expand-file-name "CMakeLists.txt" source-dir)))
#+END_SRC

***** Check if directory is build directory
#+BEGIN_SRC emacs-lisp
(defun cpped-cmake-build-directory-p (build-dir)
  "Check if build-dir is a CMake build directory."
  (or (file-exists-p (expand-file-name "CMakeCache.txt" build-dir))))

(defun cpped-ninja-build-directory-p (build-dir)
  "Check if build-dir is a ninja build directory."
  (or (file-exists-p (expand-file-name "build.ninja" build-dir))))

(defun cpped-make-build-directory-p (build-dir)
  "Check if build-dir is a make build directory."
  (or (file-exists-p (expand-file-name "Makefile" build-dir))))

(defun cpped-build-directory-p (build-dir)
  "Check if build-dir is a build directory."
  (or (cpped-cmake-build-directory-p build-dir)
      (cpped-ninja-build-directory-p build-dir)
      (cpped-make-build-directory-p build-dir)))
#+END_SRC

***** Check if directory is build directory for the current project
#+BEGIN_SRC emacs-lisp
(defun cpped-project-build-directory-p (build-dir)
  "Check if build-dir is a build directory for the current project."
  (and (cpped-cmake-build-directory-p build-dir)
       (if (cpped-cmake-build-directory-p build-dir)
           (string-equal (cpped-cmake-source-dir build-dir)
                         (cpped-project-dir))
         (string-equal build-dir
                       (cpped-project-dir)))))
#+END_SRC

*** Build
#+begin_src emacs-lisp
(defun cpped-build-target (target)
  "Build the current target in the current build directory. Ask for target if not set."
  (interactive (list (or (or (cpped-build-target)
                             (call-interactively 'cpped-select-target)))))
  (let ((build-dir (cpped-build-dir)))
    (when (and build-dir target)
      (cond
       ((cpped-cmake-build-directory-p) (compile (string-join
                                                  (cpped-maybe-run-in-docker
                                                   (cpped-cmake-source-dir build-dir)
                                                   `(cmake --build ,build-dir --target ,target)))))
       ((cpped-ninja-build-directory-p) (compile (string-join
                                                  (cpped-maybe-run-docker
                                                   (cpped-cmake-source-dir build-dir)
                                                   `(ninja -C ,build-dir ,target)))))
       ((cpped-cmake-build-directory-p) (compile (string-join
                                                  (cpped-maybe-run-docker
                                                   (cpped-cmake-source-dir build-dir)
                                                   `(make -C ,build-dir ,target)))))))))
#+end_src

#+begin_src emacs-lisp
(defun shark-bytes/clean-build-directory ()
  "Build the clean target in the current build directory."
  (interactive)
  (shark-bytes/build-target "clean"))
#+end_src

*** Run/Debug
#+begin_src emacs-lisp
(defun shark-bytes/run-target (target)
  "Build and run the current target in the current build directory. Ask for target if not set."
  (interactive)
  (shark-bytes/build-target target)
  (let ((executable (locate-file target exec-path exec-suffixes 'executable)))
    (when executable
      (let ((default-directory (file-name-directory executable)))
        (call-process (shark-bytes/maybe-run-in-docker executable))))))

(defun shark-bytes/debug-target (target)
  "Build and run the current target in the current build directory. Ask for target if not set."
  (interactive)
  (shark-bytes/build-target target)
  (let ((executable (locate-file target exec-path exec-suffixes 'executable)))
    (when executable
      (realgud:gdb (shark-bytes/maybe-run-in-docker (concat "gdb -cd=" (file-name-directory executable) " " executable))))))
#+end_src

** Languages
*** Common
#+begin_src emacs-lisp
(use-package lsp-mode
  :after consult
  :hook prog-mode
  :custom
  (lsp-auto-configure t)
  (lsp-use-plists t)
  (lsp-completion-provider :none)
  (lsp-completion-show-detail nil)
  (lsp-completion-show-kind nil)
  (lsp-log-io nil)
  (lsp-log-max 100)
  (lsp-restart 'auto-restart)
  (lsp-signature-mode t)
  (lsp-signature-function 'lsp-signature-posframe)
  (lsp-headerline-breadcrumb-enable nil)
  (lsp-idle-delay 0.5)
  (lsp-lens-enable t)
  (lsp-semantic-tokens-enable t)
  (lsp-modeline-code-actions-enable nil)
  (lsp-modeline-diagnostics-enable nil)
  (lsp-modeline-workspace-status-enable nil)
  :config (push "\\`\\*lsp-.+" consult-buffer-filter))

(use-package lsp-ui
  :bind (([remap xref-find-definitions] . lsp-ui-peek-find-definitions)
         ([remap xref-find-references] . lsp-ui-peek-find-references))
  :custom
  (lsp-ui-doc-include-signature t)
  (lsp-ui-doc-enable t)
  (lsp-ui-doc-show-with-cursor t)
  (lsp-ui-doc-show-with-mouse nil)
  (lsp-ui-doc-border "#303030")
  (lsp-ui-sideline-show-diagnostics nil)
  (lsp-ui-sideline-show-hover nil)
  (lsp-ui-sideline-show-code-actions t)
  (lsp-ui-sideline-show-symbol nil))
#+end_src

[[https://github.com/gagbo/consult-lsp][Consult support]]
#+begin_src emacs-lisp
(use-package consult-lsp
  :after (consult lsp-mode marginalia)
  :hook (lsp-mode . consult-lsp-marginalia-mode))
#+end_src

**** Highlighting
***** [[https://codeberg.org/ideasman42/emacs-hl-indent-scope][Show Indentation]]
#+begin_src emacs-lisp
(use-package hl-indent-scope
  :hook (prog-mode . hl-indent-scope-mode)
  :custom
  (hl-indent-scope-fixed-width t)
  (hl-indent-scope-fill-empty-lines t)
  (hl-indent-scope-fill-over-text t))
#+end_src

***** [[https://github.com/ankurdave/color-identifiers-mode][Unique colors for identifiers]]
#+begin_src emacs-lisp
(use-package color-identifiers-mode
  :hook prog-mode)
#+end_src

***** [[https://github.com/Fanael/rainbow-delimiters][Unique colors for parentheses]]
#+begin_src emacs-lisp
(use-package rainbow-delimiters
  :hook (prog-mode . rainbow-delimiters-mode))
#+end_src

***** [[https://github.com/dgutov/highlight-escape-sequences][Escape sequences]]
#+begin_src emacs-lisp
(use-package highlight-escape-sequences
  :hook (prog-mode . hes-mode))
#+end_src

***** Pretty symbols
#+begin_src emacs-lisp
(add-hook 'prog-mode-hook
          (lambda ()
            (push '("return" . ?) prettify-symbols-alist)
            (push '("true" . ?) prettify-symbols-alist)
            (push '("TRUE" . ?) prettify-symbols-alist)
            (push '("false" . ?) prettify-symbols-alist)
            (push '("FALSE" . ?) prettify-symbols-alist)
            (push '("function" . ?) prettify-symbols-alist)
            (push '("macro" . ?) prettify-symbols-alist)))
#+end_src

***** [[https://github.com/Lindydancer/nocomments-mode][Hide/Show comments]]
#+begin_src emacs-lisp
(use-package nocomments-mode)
#+end_src

***** [[https://github.com/tarsius/hl-todo][Highlight TODO/FIXME/…]]
#+begin_src emacs-lisp
(defface hl-todo-info '((t :inherit info))
  "Face used for info text."
  :group 'hl-todo)

(defface hl-todo-warning '((t :inherit warning))
  "Face used for warning text."
  :group 'hl-todo)

(defface hl-todo-error '((t :inherit error))
  "Face used for error text."
  :group 'hl-todo)

(use-package hl-todo
  :hook ((find-file . (lambda ()
                        (push '("???" . ?) prettify-symbols-alist)
                        (push '("FAIL" . ?) prettify-symbols-alist)
                        (push '("FIXME" . ?) prettify-symbols-alist)
                        (push '("HACK" . ?ྸ) prettify-symbols-alist)
                        (push '("INFO" . ?) prettify-symbols-alist)
                        (push '("NOTE" . ?) prettify-symbols-alist)
                        (push '("TODO" . ?) prettify-symbols-alist)
                        (push '("XXX" . ?) prettify-symbols-alist))))
  :custom
  (hl-todo-include-modes '(prog-mode text-mode org-mode))
  (hl-todo-exclude-modes nil)
  (hl-todo-keyword-faces '(("???" . hl-todo-info)
                           ("FAIL" . hl-todo-error)
                           ("FIXME" . hl-todo-error)
                           ("HACK" . hl-todo-error)
                           ("INFO" . hl-todo-info)
                           ("NOTE" . hl-todo-info)
                           ("TODO" . hl-todo-warning)
                           ("XXX" . hl-todo-warning)))
  :config (global-hl-todo-mode 1))
#+end_src

***** Find ToDos in file or project
#+begin_src emacs-lisp
(with-eval-after-load "consult"
  (defun shark-bytes/find-todos-in-file ()
    "Show all ToDo items in thqe file and allow jumping to specific item."
    (interactive)
    (let ((imenu-generic-expression (mapcar (lambda (element)
                                              (let ((type (car element)))
                                                (list type (rx (literal type) (one-or-more space) (group (one-or-more any)) eol) 1)))
                                            hl-todo-keyword-faces)))
      (call-interactively 'consult-imenu))))
#+end_src

***** Show current function in mode-line
#+begin_src emacs-lisp
(use-package which-func
  :custom (which-func-unknown "n/a")
  :config (which-function-mode 1))
#+end_src

***** [[https://github.com/AdamNiederer/cov][Code coverage]]
#+begin_src emacs-lisp
(use-package cov
  :after all-the-icons
  :hook ((prog-mode . cov-mode)
         (shark-bytes/after-project-load . (lambda ()
                                       (add-to-list 'cov-coverage-file-paths (shark-bytes/current-build-directory)))))
  :custom (cov-coverage-mode t)
  :config
  (make-variable-buffer-local 'cov-coverage-file-paths)
  (defvar-local shark-bytes/cov-lines-covered 0 "The number of lines covered in tests and/or application runs.")
  (defvar-local shark-bytes/cov-percentage-covered 0 "The percentage of lines covered in tests and/or application runs.")
  (advice-add 'cov--get-face :after (lambda (percentage)
                                      (when (> percentage 0)
                                        (setq shark-bytes/cov-lines-covered (1+ shark-bytes/cov-lines-covered)))))
  (advice-add 'cov-update :around (lambda (wrapped-function &rest arguments)
                                    (setq lines-covered 0)
                                    (apply wrapped-function arguments)
                                    (setq shark-bytes/cov-percentage-covered (* (/ shark-bytes/cov-lines-covered (string-to-number (format-mode-line "%l"))) 100)
                                      (force-mode-line-update))))
  (defun shark-bytes/coverage-status-face ()
    "Calculate the face for the coverage status."
    (cond ((> shark-bytes/cov-percentage-covered 90) 'shark-bytes/check-status-info)
          ((> shark-bytes/cov-percentage-covered 30) 'shark-bytes/check-status-warning)
          (t 'shark-bytes/check-status-error)))
  (defun shark-bytes/modeline-coverage()
    "Format the modeline coverage information."
    (when cov-coverage-file
      (let ((face (shark-bytes/coverage-status-face)))
        (propertize (format " %d%%" shark-bytes/cov-percentage-covered)
                    'face face))))
  (add-to-list 'shark-bytes/modeline-check-status-functions 'shark-bytes/modeline-coverage))
#+end_src

**** Navigation

***** Use ripgrep for xref
#+begin_src emacs-lisp
(setq xref-search-program 'ripgrep)
#+end_src

***** [[https://github.com/gregsexton/origami.el][Folding]]
#+begin_src emacs-lisp
(use-package origami
  :hook (prog-mode . origami-mode)
  :custom (origami-fold-replacement "…"))

(use-package lsp-origami
  :hook (lsp-mode . lsp-origami-mode))
#+end_src

***** Subword-navigation in camelCase words
#+begin_src emacs-lisp
(add-hook 'prog-mode-hook (lambda () (subword-mode 1)))
#+end_src

***** [[https://github.com/magnars/smart-forward.el][Smart forward/backward]]
#+begin_src emacs-lisp
(use-package smart-forward)
#+end_src

***** Limit view to function when navigating
#+begin_src emacs-lisp
(add-hook 'imenu-after-jump-hook #'(lambda ()
                                     (when (derived-mode-p 'prog-mode)
                                       (narrow-to-defun))))
#+end_src

***** Bug references

Set bug-reference-url-format to open in browser.

#+begin_src emacs-lisp
(add-hook 'text-mode-hook 'bug-reference-mode)
(add-hook 'prog-mode-hook 'bug-reference-prog-mode)
#+end_src

**** Editing
***** [[https://github.com/lassik/emacs-format-all-the-code][Formatting]]
#+begin_src emacs-lisp
(use-package format-all
  :ensure-system-package (prettier . "npm install -g prettier")
  :hook ((prog-mode . format-all-mode)
         (format-all-mode . format-all-ensure-formatter)))
#+end_src

****** Fill function calls
#+begin_src emacs-lisp
(use-package prog-fill
  :custom
  (prog-fill-break-method-immediate-p t)
  (prog-fill-floating-open-paren-p nil)
  (prog-fill-floating-close-paren-p nil)
  (prog-fill-auto-indent-p t))
#+end_src

Use [[https://editorconfig.org/][EditorConfig]] via [[https://github.com/editorconfig/editorconfig-emacs]] if available
#+begin_src emacs-lisp
(use-package editorconfig
  :config (editorconfig-mode 1))
#+end_src

***** [[https://github.com/remyferre/comment-dwim-2][Smarter commenting]]
#+begin_src emacs-lisp
(use-package comment-dwim-2
  :config
  (defun shark-bytes/comment-line ()
    "Comment SEXPs instead of region in lisp code."
    (if (cd2/empty-line-p)
        (comment-dwim nil)
      (if (derived-mode-p 'emacs-lisp-mode)
          (comment-or-uncomment-sexp)
        (comment-region (line-beginning-position) (line-end-position)))))
  (advice-add 'cd2/comment-line :override 'shark-bytes/comment-line))
#+end_src

***** [[https://github.com/victorhge/iedit][Edit all occurences within function]]
#+begin_src emacs-lisp
(defvar-local shark-bytes/mark-function 'mark-defun "The function to call to mark the current function.")
(defvar-local shark-bytes/beginning-of-function 'beginning-of-defun "The function to call to jump to the beginning of the current function.")
(defvar-local shark-bytes/end-of-function 'end-of-defun "The function to call to jump to the end of the current function.")

(use-package iedit)

(defun shark-bytes/iedit-scoped (orig-fn)
  "Call `iedit-mode' with function-local scope, or global scope if called with a universal prefix."
  (interactive)
  (pcase-exhaustive current-prefix-arg
    ('nil (funcall orig-fn '(0)))
    ('(4) (funcall orig-fn))))

;(advice-add #'iedit-mode :around #'shark-bytes/iedit-scoped)
#+end_src

***** Change numbers
#+begin_src emacs-lisp
(use-package shift-number)
#+end_src

***** [[https://github.com/AdamNiederer/0xc][Convert number formats]]
#+begin_src emacs-lisp
(use-package 0xc
  :config
  (defun shark-bytes/convert-number (base)
    (interactive (list (string-to-number (completing-read "Base" '("2" "8" "10" "16")))))
    (0xc-convert-point base))
  (defun shark-bytes/number-info ()
    (interactive)
    (when-let* ((bounds (0xc--bounds-of-number-at-point))
                (begin (car bounds))
                (end (cadr bounds))
                (at-point (buffer-substring-no-properties begin end))
                (number (ignore-errors (0xc-string-to-number at-point (or (0xc--base-prefix at-point) 10)))))
      (format "%s 0x%s 0%s 0b%s"
              (0xc-number-to-string number 10)
              (0xc-number-to-string number 16)
              (0xc-number-to-string number 8)
              (0xc-number-to-string number 2)))))
#+end_src

***** [[https://github.com/emacsfodder/kurecolor][Modify colors]]
#+begin_src emacs-lisp
(use-package kurecolor)
#+end_src

***** [[https://github.com/minad/corfu][Autocompletion]]
#+begin_src emacs-lisp
(use-package corfu
  :demand t
  :custom
  (corfu-cycle nil)
  (corfu-auto t)
  (corfu-auto-prefix 2)
  (corfu-auto-delay 0.2)
  (corfu-separator ?\s)
  (corfu-quit-at-boundary nil)
  (corfu-quit-no-match nil)
  (corfu-preview-current nil)
  (corfu-preselect-first nil)
  (corfu-on-exact-match nil)
  (corfu-echo-documentation nil)
  (corfu-scroll-margin 5)
  :config
  (global-corfu-mode))
#+end_src

****** [[https://github.com/jdtsmith/kind-icon][Completion icons]]
#+begin_src emacs-lisp
(use-package kind-icon
  :after corfu
  :custom
  (kind-icon-default-face 'corfu-default) ; to compute blended backgrounds correctly
  :config
  (add-to-list 'corfu-margin-formatters #'kind-icon-margin-formatter))
#+end_src

****** [[https://github.com/minad/cape][Add more CAPF]]
#+begin_src emacs-lisp
(use-package cape
  :after yasnippet
  :custom
  (cape-dabbrev-check-other-buffers nil)
  :config
  ;;(add-to-list 'completion-at-point-functions #'cape-tex)
  (add-to-list 'completion-at-point-functions #'cape-dabbrev)
  (add-to-list 'completion-at-point-functions #'cape-abbrev)
  (add-to-list 'completion-at-point-functions #'cape-file)
  (add-to-list 'completion-at-point-functions #'cape-keyword)
  (advice-add 'pcomplete-completions-at-point :around #'cape-wrap-silent)
  (advice-add 'pcomplete-completions-at-point :around #'cape-wrap-purify))
#+end_src

***** [[https://github.com/davidshepherd7/electric-operator][Automatic spacing]]
#+begin_src emacs-lisp
(use-package electric-operator
  :hook ((text-mode . electric-operator-mode)
         (prog-mode . electric-operator-mode))
  :custom (electric-operator-enable-in-docs t))
#+end_src

***** [[https://github.com/snosov1/dummyparens][Automatic parens]]
#+begin_src emacs-lisp
(use-package dummyparens
  :config
  (global-dummyparens-mode))
#+end_src

***** [[http://www.flycheck.org/en/latest/][Syntax checking]]
#+begin_src emacs-lisp
(use-package flycheck
  :after consult; popwin)
  :hook (after-init . global-flycheck-mode)
  :custom
  (flycheck-idle-change-delay 2.0)
  (flycheck-display-errors-delay 0.2)
  (flycheck-checker-error-threshold nil)
  (flycheck-indication-mode nil)
  (flycheck-highlighting-mode nil)
  (flycheck-display-errors-function nil)
  (flycheck-help-echo-function nil)
  (flycheck-process-error-functions nil)
  (flycheck-check-syntax-automatically '(mode-enabled save))
  :config
  (push "\\`\\*Flycheck.+\\*\\'" consult-buffer-filter)
  (defun shark-bytes/modeline-flycheck-status-face ()
    (pcase flycheck-last-status-change
      (`errored 'shark-bytes/check-status-error)
      (`finished
       (if flycheck-current-errors
           (let-alist (flycheck-count-errors flycheck-current-errors)
             (cond (.error 'shark-bytes/check-status-error)
                   (.warning 'shark-bytes/check-status-warning)
                   (.info 'shark-bytes/check-status-info)))
         'shark-bytes/check-status-info))
      (_ 'shark-bytes/check-status-warning)))
  (defun shark-bytes/modeline-flycheck-status ()
    (when (and (boundp 'flycheck-last-status-change)
               (equal flycheck-last-status-change 'finished))
      (let ((issues (let-alist (flycheck-count-errors flycheck-current-errors)
                      (+ (or .warning 0) (or .error 0) (or .info 0))))
            (face (shark-bytes/modeline-flycheck-status-face)))
        (propertize (format " %d" issues)
                     'face face))))
  (add-to-list 'shark-bytes/modeline-check-status-functions 'shark-bytes/modeline-flycheck-status))
#+end_src

Custom error highlighting (colored line under location)
#+begin_src emacs-lisp
(defun shark-bytes/flycheck-clear (status)
  "Clear the highlights if appropriate."
  (let ((clear nil))
    (when (boundp 'flycheck-last-status-change)
      (pcase flycheck-last-status-change
        (`not-checked (setq clear t))
        (`errored (setq clear t))
        (`interrupted (setq clear t))
        (_ (setq clear nil))))
    (when clear
      (remove-overlays nil nil 'shark-bytes/flycheck-inline-error t))))

(defun shark-bytes/flycheck-inline-error-messages ()
  "Show Flycheck errors in a new line below the problematic line."
  (remove-overlays nil nil 'shark-bytes/flycheck-inline-error t)
  (mapc #'(lambda (error)
            (let* ((begin (save-excursion
                            (goto-char (flycheck-error-pos error))
                            (forward-line)
                            (point)))
                   (level (symbol-name (flycheck-error-level error)))
                   (face (pcase level
                           ("error" 'flycheck-error)
                           ("warning" 'flycheck-warning)
                           ("info" 'flycheck-info)
                           (_ 'default)))
                   (overlay (make-overlay begin begin)))
              (overlay-put overlay 'before-string (propertize (format " %s %s\n"
                                                                      (pcase level
                                                                        ("error" "")
                                                                        ("warning" "")
                                                                        ("info" "")
                                                                        (_ ""))
                                                                      (flycheck-error-message error))
                                                              'face `(:inherit ,face :extend t)))
            (overlay-put overlay 'shark-bytes/flycheck-inline-error t))) flycheck-current-errors))

(add-hook 'flycheck-after-syntax-check-hook #'shark-bytes/flycheck-inline-error-messages)
(add-hook 'flycheck-status-changed-functions #'shark-bytes/flycheck-clear)
#+end_src

***** Consult integration
#+begin_src emacs-lisp
(use-package consult-flycheck
    :after (consult flycheck))
#+end_src

***** [[https://github.com/michaeljb/bool-flip][Flip booleans]]
#+begin_src emacs-lisp
(use-package bool-flip
  :custom
  (bool-flip-alist '(("T" . "F")
                     ("t" . "f")
                     ("TRUE" . "FALSE")
                     ("True" . "False")
                     ("true" . "false")
                     ("Y" . "N")
                     ("y" . "n")
                     ("YES" . "NO")
                     ("Yes" . "No")
                     ("yes" . "no")
                     ("1" . "0")
                     ("ON" . "OFF")
                     ("On" . "Off")
                     ("ENABLED" . "DISABLED")
                     ("Enabled" . "Disabled")
                     ("NOT" . "")
                     ("not" . "")
                     ("!" . "")
                     ("!=" . "==")
                     ("==" . "!=")
                     ("<" . "<=")
                     ("<=" . ">=")
                     (">=" . ">")
                     (">" . "<"))))
#+end_src

***** [[https://github.com/atykhonov/emacs-howdoi][Code suggestions]]
#+begin_src emacs-lisp
(use-package howdoi)
#+end_src

**** Compilation
***** [[https://github.com/abo-abo/helm-make][Select make target with helm]]

TODO


***** Always kill running compilation when starting another
#+begin_src emacs-lisp
(setq compilation-always-kill t)
#+end_src

***** Do not ask to save unsaved buffers
#+begin_src emacs-lisp
(setq compilation-ask-about-save nil)
#+end_src

***** Jump to first error/Move to errors
#+begin_src emacs-lisp
(setq compilation-auto-jump-to-first-error t
      compilation-scroll-output 'first-error
      compilation-skip-threshold 2)
#+end_src

***** [[https://github.com/EricCrosson/bury-successful-compilation][Hide compilation buffer if successful]]
#+begin_src emacs-lisp
(use-package bury-successful-compilation
  :config (bury-successful-compilation 1))
#+end_src

***** Support ANSI escape codes
#+begin_src emacs-lisp
(defun shark-bytes/colorize-compilation ()
  "Colorize compilation output."
  (let ((inhibit-read-only t))
    (ansi-color-apply-on-region compilation-filter-start (point))))

(add-hook 'compilation-filter-hook #'shark-bytes/colorize-compilation)
#+end_src

***** Show status in mode line
#+begin_src emacs-lisp
(defvar-local compilation-run-p nil "Flag to indicate if a compilation was run for the current buffer.")
(defvar-local compilation-finished-successfully-p nil "Flag to indicate if a compilation finished successfully.")

(add-hook 'compilation-start-hook (lambda (process)
                                    (setq shark-bytes/process-running t
                                          shark-bytes/current-process-start-time (current-time))
                                    (force-mode-line-update t)))

(add-to-list 'compilation-finish-functions '(lambda (buffer message)
                                              (setq shark-bytes/process-running nil
                                                    compilation-run-p t
                                                    compilation-finished-successfully-p (string-match "^finished" message))
                                              (force-mode-line-update t)))

(defun shark-bytes/modeline-compilation-status ()
  "Format the mode line compilation information."
  (when compilation-run-p
    (mapconcat 'identity
               (remove nil (list (propertize (all-the-icons-faicon5 "hammer")
                                             'face (list ':inherit (if compilation-finished-successfully-p
                                                                       (cond ((> compilation-num-errors-found 0) 'shark-bytes/check-status-error)
                                                                             ((> compilation-num-warnings-found 0) 'shark-bytes/check-status-warning)
                                                                             ((> compilation-num-infos-found 0) 'shark-bytes/check-status-info)
                                                                             (t 'shark-bytes/check-status-info))
                                                                     'shark-bytes/check-status-error)
                                                         ':family (all-the-icons-faicon5-family))
                                             'display '(raise -0.0))
                                 (mapconcat 'identity
                                            (remove nil (list (when (> compilation-num-errors-found 0)
                                                                (propertize compilation-num-errors-found
                                                                            'face 'shark-bytes/check-status-error))
                                                              (when (> compilation-num-warnings-found 0)
                                                                (propertize compilation-num-warnings-found
                                                                            'face 'shark-bytes/check-status-warning))
                                                              (when (> compilation-num-infos-found 0)
                                                                (propertize compilation-num-infos-found
                                                                            'face 'shark-bytes/check-status-info))))
                                            " / ")))
               " ")))

(add-to-list 'shark-bytes/modeline-check-status-functions 'shark-bytes/modeline-compilation-status)
#+end_src

***** Show notification
#+begin_src emacs-lisp
(add-to-list 'compilation-finish-functions '(lambda (buffer message)
                                              (when (> (float-time (shark-bytes/get-run-time)) 30)
                                                (notifications-notify :title "Compilation finished"))))
#+end_src

**** Documentation
***** [[https://github.com/blahgeek/emacs-devdocs-browser][API]]
Show API info via [[https://devdocs.io][devdocs.io]]
#+begin_src emacs-lisp
(use-package devdocs-browser
  :after consult
  :demand t
  :straight (devdocs-browser
             :type git
             :host github
             :repo "blahgeek/emacs-devdocs-browser")
  :hook (eww-mode . devdocs-browser-eww-mode)
  :config
  (defun shark-bytes/add-apidocs (mode doclist)
    "Install API documentation and enable for mode."
    (mapcar (lambda (doc)
              (devdocs-browser-install-doc doc))
            doclist)
    (push `(,mode . ,doclist) devdocs-browser-major-mode-docs-alist))
  (push "\`\\*devdocs-" consult-buffer-filter))
#+end_src

***** Change Log
#+begin_src emacs-lisp
(setq change-log-default-name "CHANGELOG")
#+end_src

**** Comments
***** Comment style
#+begin_src emacs-lisp
(defvar c-doc-comment-style '((c-mode . gtkdoc)
                              (c++-mode . javadoc)))
#+end_src

***** Insert comment characters in new line when pressing enter inside a comment
#+begin_src emacs-lisp
(add-hook 'c-mode-common-hook (lambda()
                                (local-set-key (kbd "RET") 'c-context-line-break)))
#+end_src

***** Insert license comment
#+begin_src emacs-lisp
(use-package legalese
  :hook (prog-mode . (lambda ()
                       (when (= (buffer-size (current-buffer)) 0)
                         (legalese nil))))
  :custom
  (legalese-date-format "%Y-%m-%d")
  (legalese-default-license 'gpl)
  (legalese-templates '((emacs-lisp-mode (nil ";;; " legalese-file-name " --- " _ "\n;;\n"
                                              ";; Copyright © " legalese-year "  " legalese-copyright "\n;;\n"
                                              ";; Author: " legalese-author "\n;;\n"
                                              & -2 "\n"
                                              ";; Created: " legalese-date "\n"
                                              @
                                              '(legalese-license)
                                              @ ";;\n;;\n"
                                                ";;; Commentary: \n;;\n"
                                                ";;; Code: \n\n"
                                                "(provide '" legalese-file ")\n\n"
                                                ";;; " legalese-file-name " ends here\n"))))
  :config
  (if (and (boundp 'company-full-name)
           (not (= 0 (length company-full-name))))
      (progn
        (add-to-list 'legalese-templates '(c++-mode (nil
                                                     "/**\n"
                                                     " * " legalese-file-name "\n\n"
                                                     " * @date " legalese-date "\n"
                                                     " * @author " legalese-author "\n"
                                                     " * @copyright Copyright © " company-full-name ". All rights reserved.\n"
                                                     " */")))
        (add-to-list 'legalese-templates '(default (nil @ legalese-file-name "\n\n"
                                                          "Date: " legalese-date "\n"
                                                          "Author: " legalese-author "\n"
                                                          "Copyright © " company-full-name ". All rights reserved.\n"
                                                          @ "\n")) t))
    (add-to-list 'legalese-templates '(default (nil @ legalese-file-name "\n\n"
                                                      "Copyright © " legalese-year " " legalese-copyright "\n\n"
                                                      "Author: "
                                                      legalese-author "\n\n"
                                                      '(legalese-license)
                                                      @ "\n")))))
#+end_src

**** Braces
#+begin_src emacs-lisp
(defvar c-hanging-braces-alist '((defun-open before after)
                                 (defun-close before after)
                                 (class-open before after)
                                 (class-close before)
                                 (inline-open before after)
                                 (inline-close before after)
                                 (block-open before after)
                                 (block-close . c-snug-do-while)
                                 (statement-cont before after)
                                 (substatement-open before after)
                                 (statement-case-open before after)
                                 (brace-list-open)
                                 (brace-entry-open)
                                 (extern-lang-open after)
                                 (namespace-open before after)
                                 (namespace-close before after)
                                 (module-open after)
                                 (composition-open after)
                                 (inexpr-class-open after)
                                 (inexpr-class-close before)
                                 (arglist-cont-nonempty)))
(defvar c-hanging-colons-alist '((case-label after) (label after)))
(defvar c-hanging-semi&comma-criteria '(c-semi&comma-inside-parenlist))
#+end_src

**** LOC counting/Metrics
#+begin_src emacs-lisp
(shark-bytes/install-system-package "cloc")

(defun shark-bytes/cloc-project ()
  "Count lines of code in project."
  (interactive)
  (let ((project-root (shark-bytes/project-dir)))
    (when project-root
      (shell-command (concat  "cloc --quiet " project-root " &") "*Cloc*")
      (pop-to-buffer "*Cloc*"))))

(defun shark-bytes/cloc-file ()
  "Count lines of code in file."
  (interactive)
  (let ((cloc-input (make-temp-file "cloc-" nil (replace-regexp-in-string "[\\\\']" "" (car (rassq major-mode auto-mode-alist))))))
    (write-region (point-min) (point-max) cloc-input)
    (shell-command (concat  "cloc --quiet --skip-uniqueness " cloc-input) "*Cloc*")
    (pop-to-buffer "*Cloc*")
    (delete-file cloc-input)))

(with-eval-after-load "consult"
  (push "\\`\\*Cloc\\*\\'" consult-buffer-filter)
  (push "*Cloc*" shark-bytes/bury-buffers-list))
#+end_src

*** Assembler
#+begin_src emacs-lisp
(use-package asm-mode)
#+end_src

#+begin_src emacs-lisp
(use-package nasm-mode
  :mode "\\.[n]*\\(asm\\|s\\)\\'")
#+end_src

#+begin_src emacs-lisp
(use-package x86-lookup
  :after pdf-tools
  :custom
  (x86-lookup-pdf (expand-file-name "~/.docsets/IntelASM.pdf"))
  (x86-lookup-browse-pdf-function 'x86-lookup-browse-pdf-pdf-tools))
#+end_src

*** C/C++
#+begin_src emacs-lisp
(defconst shark-bytes/c++-source-file-pattern "\\.[Cc]([Cc]|[Pp][Pp]|[Xx][Xx]|++)\\'")
(defconst shark-bytes/c++-header-file-pattern "\\.[Hh]([Hh]|[Pp][Pp]|[Xx][Xx]|++)\\'")

(add-to-list 'auto-mode-alist '("\\.a\\'" . c-mode))
(add-to-list 'auto-mode-alist `(,shark-bytes/c++-source-file-pattern . c++-mode))
(add-to-list 'auto-mode-alist `(,shark-bytes/c++-header-file-pattern . c++-mode))
#+end_src

#+begin_src emacs-lisp
(use-package ccls
  :after lsp
  :custom
  (ccls-executable (expand-file-name "~/.local/bin/ccls"))
  (ccls-sem-highlight-method 'font-lock)
  :config
  (ccls-use-default-rainbow-sem-highlight))

(add-hook 'c-mode-common-hook 'lsp-deferred)
#+end_src

**** Highlighting
#+begin_src emacs-lisp
(add-hook 'c++-mode-hook (lambda ()
                           (push '("//" . ?🗩) prettify-symbols-alist)
                           (push '("/*" . ?🗩) prettify-symbols-alist)
                           (push '("*/" . ?​) prettify-symbols-alist)
                           (push '("void" . ?∅) prettify-symbols-alist)
                           (push '("const" . ?) prettify-symbols-alist)
                           (push '("mutable" . ?) prettify-symbols-alist)
                           (push '("default" . ?) prettify-symbols-alist)
                           (push '("delete" . ?) prettify-symbols-alist)
                           (push '("final" . ?) prettify-symbols-alist)
                           (push '("virtual" . ?) prettify-symbols-alist)
                           (push '("override" . ?) prettify-symbols-alist)
                           (push '("[]" . ?λ) prettify-symbols-alist)
                           (push '("#include" . ?+) prettify-symbols-alist)
                           (push '("#pragma once" . ?❶) prettify-symbols-alist)
                           (push '("[[deprecated]]". ?⚠) prettify-symbols-alist)
                           (push '("[[fallthrough]]". ?⇟) prettify-symbols-alist)
                           (push '("[[likely]]". ?⯅) prettify-symbols-alist)
                           (push '("[[maybe_unused]]". (?⚙ (cc . cl) ??)) prettify-symbols-alist)
                           (push '("[[nodiscard]]". (? (cc . cl) ?)) prettify-symbols-alist)
                           (push '("[[noreturn]]". (? (cc . cl) ?)) prettify-symbols-alist)
                           (push '("[[unlikely]]". ?⯆) prettify-symbols-alist)))
#+end_src

**** Navigation
***** Show includes/namespaces/preprocessor directives in imenu
#+begin_src emacs-lisp
(require 'cc-menus)

(defvar shark-bytes/imenu-c-generic-expression nil)
(defvar shark-bytes/imenu-c++-generic-expression nil)

(defconst shark-bytes/cc-imenu-include '("Include" "^[[:space:]]*#include[[:space:]]+[<\"]\\([^>\"]+\\)" 1) "A C/C++ include pattern for imenu")
(add-to-list 'shark-bytes/imenu-c-generic-expression shark-bytes/cc-imenu-include)
(add-to-list 'shark-bytes/imenu-c++-generic-expression shark-bytes/cc-imenu-include)

(defconst shark-bytes/cc-imenu-pragma '("Preprocessor Pragma" "^[[:space:]]*#pragma \\(.+\\)$" 1) "A C/C++ preprocessor pragma pattern for imenu")
(add-to-list 'shark-bytes/imenu-c-generic-expression shark-bytes/cc-imenu-pragma)
(add-to-list 'shark-bytes/imenu-c++-generic-expression shark-bytes/cc-imenu-pragma)

(defconst shark-bytes/cc-imenu-define '("Preprocessor Define" "^[[:space:]]*#define \\(.+\\)$" 1) "A C/C++ preprocessor define pattern for imenu")
(add-to-list 'shark-bytes/imenu-c-generic-expression shark-bytes/cc-imenu-define)
(add-to-list 'shark-bytes/imenu-c++-generic-expression shark-bytes/cc-imenu-define)

(defconst shark-bytes/cc-imenu-undefine '("Preprocessor Undefine" "^[[:space:]]*#undef \\(.+\\)$" 1) "A C/C++ preprocessor undefine pattern for imenu")
(add-to-list 'shark-bytes/imenu-c-generic-expression shark-bytes/cc-imenu-undefine)
(add-to-list 'shark-bytes/imenu-c++-generic-expression shark-bytes/cc-imenu-undefine)

(defconst shark-bytes/cc-imenu-condition '("Preprocessor Condition" "^[[:space:]]*#\\(ifn?\\(def\\)?.+\\)$" 1) "A C/C++ preprocessor condition pattern for imenu")
(add-to-list 'shark-bytes/imenu-c-generic-expression shark-bytes/cc-imenu-condition)
(add-to-list 'shark-bytes/imenu-c++-generic-expression shark-bytes/cc-imenu-condition)

(defconst shark-bytes/cc-imenu-namespace '("Namespace" "^[[:space:]]*namespace[[:space:]]+\\([^/{]+\\)[[:space:]]*$" 1) "A C++ namespace pattern for imenu")
(add-to-list 'shark-bytes/imenu-c++-generic-expression shark-bytes/cc-imenu-namespace)

(nconc cc-imenu-c-generic-expression shark-bytes/imenu-c-generic-expression)
(nconc cc-imenu-c++-generic-expression shark-bytes/imenu-c++-generic-expression)

(defun shark-bytes/custom-c-imenu-index (function)
  "Add additional entries to C/C++ imenu. "
  (nconc (funcall function)
         (imenu--generic-function (cond ((equal major-mode 'c-mode)
                                         shark-bytes/imenu-c-generic-expression)
                                        ((equal major-mode 'c++-mode)
                                         shark-bytes/imenu-c++-generic-expression)))))

(with-eval-after-load "lsp-mode"
  (advice-add 'lsp--imenu-create-index :around #'shark-bytes/custom-c-imenu-index))
#+end_src

**** Editing
***** Mark/navigation functions
#+begin_src emacs-lisp
(add-hook 'c-mode-common-hook (lambda ()
                                (setq shark-bytes/mark-function 'c-mark-function)
                                (setq shark-bytes/beginning-of-function 'c-beginning-of-defun)
                                (setq shark-bytes/end-of-function 'c-end-of-defun)))
#+end_src

***** Clang include fixer
#+begin_src emacs-lisp
(require 'clang-include-fixer)
(add-hook 'after-save-hook #'(lambda()
                               (when (or (equal major-mode 'c-mode)
                                         (equal major-mode 'c++-mode))
                                 (let ((directory (shark-bytes/current-build-directory)))
                                   (when directory
                                     (call-process "find-all-symbols" nil nil nil (concat "-merge-dir=" directory) (concat "-output-dir=" directory) (concat "-p" directory) (file-truename buffer-file-name))
                                   (clang-include-fixer))))))
#+end_src

***** Auto-newline
#+begin_src emacs-lisp
(add-hook 'c-mode-common-hook '(lambda ()
                                 (c-toggle-auto-newline 1)))
#+end_src

***** [[https://www.gnu.org/software/emacs/manual/html_node/ccmode/Clean_002dups.html][Auto-clean whitespace]]
#+begin_src emacs-lisp
(defvar c-cleanup-list '(scope-operator empty-defun-braces defun-close-semi list-close-comma comment-close-slash))
#+end_src

***** Indentation
#+begin_src emacs-lisp
(c-add-style "shark-bytes/style"
             `("bsd"
               (c-progress-interval . nil)                   ; do not echo progress when indenting)
               (c-basic-offset . ,shark-bytes/default-indentation)
               (comment-empty-lines . t)
               (c-electric-pound-behavior . '(alignleft))    ; do not indent macros
               (c-auto-align-backslashes . t)                ; align line end escape characters
               (c-offsets-alist . ((innamespace . [0])       ; do not indent namespaces
                                   (brace-list-open . 0)
                                   (substatement-open . 0)
                                   (statement-cont . (add c-lineup-cascaded-calls
                                                          c-lineup-string-cont
                                                          c-lineup-streamop))
                                   (arglist-cont-nonempty . (add c-lineup-argcont
                                                                 c-lineup-cascaded-calls
                                                                 c-lineup-string-cont))))))

(setq c-default-style '((c-mode . "shark-bytes/style")
                        (c++-mode . "shark-bytes/style")
                        (java-mode . "java")
                        (awk-mode . "awk")
                        (other . "bsd")))

(add-hook 'c-mode-common-hook '(lambda ()
                                 (c-toggle-syntactic-indentation 1)
                                 (c-toggle-electric-state 1)))
#+end_src

***** Auto-convert .. to ->
#+begin_src emacs-lisp
(defun shark-bytes/smart-arrow-insert ()
  "Auto-convert .. to ->"
  (interactive)
  (if (looking-back "\\.")
      (progn (backward-delete-char 1)
             (insert "->"))
    (insert ".")))

(define-minor-mode shark-bytes/smart-arrow-mode
  "Auto-convert .. to ->"
  :keymap
  (let ((map (make-sparse-keymap)))
    (define-key map "." #'shark-bytes/smart-arrow-insert)
    map))

(add-hook 'c-mode-hook #'shark-bytes/smart-arrow-mode)
(add-hook 'c++-mode-hook #'shark-bytes/smart-arrow-mode)
#+end_src

***** Wrap Region
#+begin_src emacs-lisp
(with-eval-after-load "wrap-region"
  (wrap-region-add-wrappers
   '(("{" "}" nil (c-mode c++-mode)))))
#+end_src

***** Flip words
#+begin_src emacs-lisp
(with-eval-after-load "bool-flip"
  (progn
    (defun shark-bytes/setup-c++-flip ()
      (make-local-variable 'bool-flip-alist)
      (push '("class" . "struct") bool-flip-alist)
      (push '("struct" . "class") bool-flip-alist)
      (push '("public" . "protected") bool-flip-alist)
      (push '("protected" . "private") bool-flip-alist)
      (push '("private" . "public") bool-flip-alist))
    (add-hook 'c++-mode-hook 'shark-bytes/setup-c++-flip)))
#+end_src

***** Abbreviations
#+begin_src emacs-lisp
(define-abbrev-table 'c++-mode-abbrev-table '(
                                              ("breif" "brief")
                                              ("au" "auto")
                                              ("co" "const")
                                              ("cosnt" "const")
                                              ("#d" "#define")
                                              ("#e" "#endif")
                                              ("fa" "// fall-through")
                                              ("#i" "#if")
                                              ("pro" "protected:")
                                              ("#o" "#pragma once")
                                              ("#1" "#pragma once")
                                              ("prs" "protected slots:")
                                              ("pu" "public:")
                                              ("pus" "public slots:")
                                              ("pri" "private:")
                                              ("vir" "virtual")
                                              ("ov" "overwrite")
                                              ("fi" "final")
                                              ("nx" "noexcept")
                                              ("nox" "noexcept")
                                              ("noex" "noexcept")
                                              ("QSrting" "QString")
                                              ("qstr" "QString")
                                              ("si" "signals:")
                                              ("vd" "void")
                                              ))
#+end_src

***** Automatically change dash to underscore in identifiers
#+begin_src emacs-lisp
(use-package smart-dash
  :hook (c-mode-common . smart-dash-mode))
#+end_src

***** Syntax checkers
#+begin_src emacs-lisp
(with-eval-after-load "flycheck"
  (setq flycheck-clang-pedantic t
        flycheck-clang-warnings '("all" "extra" "ctor-dtor-privacy" "effc++" "old-style-cast" "overloaded-virtual" "format=2" "null-dereference" "missing-include-dirs" "switch-default" "switch-enum" "unused-parameter" "uninitialized" "float-equal" "shadow" "cast-qual" "conversion" "extra-tokens" "ambiguous-member-template" "bind-to-temporary-copy"))
  (add-hook 'c-mode-common-hook (lambda ()
                                  (flycheck-select-checker 'c/c++-clang)))
  (add-hook 'c++-mode-hook (lambda ()
                             (setq flycheck-clang-language-standard "c++17")))

  (setq flycheck-gcc-pedantic t
        flycheck-gcc-pedantic-errors nil
        flycheck-gcc-warnings '("all" "extra" "ctor-dtor-privacy" "effc++" "old-style-cast" "overloaded-virtual" "format=2" "missing-include-dirs" "switch-default" "switch-enum" "unused-parameter" "uninitialized" "float-equal" "shadow" "cast-qual" "conversion" "double-promotion" "zero-as-null-pointer-constant" "useless-cast" "logical-op"))
  (flycheck-add-next-checker 'c/c++-clang '(t . c/c++-gcc))
  (add-hook 'c++-mode-hook (lambda ()
                             (setq flycheck-gcc-language-standard "c++17")))

  (use-package flycheck-clang-analyzer
    :after flycheck
    :config (flycheck-add-next-checker 'c/c++-gcc '(warning . clang-analyzer)))

  (with-eval-after-load "system-packages"
    (shark-bytes/install-system-package "cppcheck")
    (setq flycheck-cppcheck-checks '("warning" "style" "performance" "portability" "information" "missingInclude"))
    (flycheck-add-next-checker 'clang-analyzer '(t . c/c++-cppcheck))
    (add-hook 'c++-mode-hook (lambda ()
                               (setq flycheck-cppcheck-standards "c++11"))))

  (use-package flycheck-clang-tidy
    :after flycheck
    :hook (cpped-after-project-load-update-project-file-hook . (lambda ()
                                                                 (setq-local flycheck-clang-tidy-build-path (cpped-build-dir))))
    :config (flycheck-add-next-checker 'c/c++-cppcheck '(t . c/c++-clang-tidy))))

(with-eval-after-load "consult"
  (push "\\`\\*clang-.*\\*'" consult-buffer-filter))
#+end_src


**** Documentation
#+begin_src emacs-lisp
(with-eval-after-load "devdocs-browser"
    (shark-bytes/add-apidocs 'c-mode '("c"))
    (shark-bytes/add-apidocs 'c++-mode '("cpp" "c" "qt~5.15")))
#+end_src

**** Utilities
***** Namespaces
#+begin_src emacs-lisp
(use-package outrespace)
#+end_src

***** Qt Support
Resource Files
#+begin_src emacs-lisp
(push '("\\.qrc\\'" . nxml-mode) auto-mode-alist)
#+end_src

Translation Files
#+begin_src emacs-lisp
(push '("\\.ts\\'" . nxml-mode) auto-mode-alist)
#+end_src

**** Google Test support
https://github.com/google/googletest

#+begin_src emacs-lisp
(define-derived-mode gtest-mode
  c++-mode
  "Google Test file"
  "Google Test mode is a major mode for editing Google Test unit test files.")

(provide 'gtest-mode)

(push '("T[Ee][Ss][Tt]_?.*\\.c(c\\|pp\\|xx)\\'" . gtest-mode) auto-mode-alist)
#+end_src

*** CMake
#+begin_src emacs-lisp
(use-package cmake-mode
  :custom (cmake-tab-width tab-width)
  :config
  (push '("CMakeLists\\.txt\\'" . cmake-mode) auto-mode-alist)
  (push '(".\\cmake\\'" . cmake-mode) auto-mode-alist)
  (with-eval-after-load "aggressive-fill-paragraph"
    (add-to-list 'afp-fill-comments-only-mode-list 'cmake-mode))
  (with-eval-after-load "all-the-icons"
    (push '(cmake-mode all-the-icons-fileicon "cmake" :v-adjust 0.0) all-the-icons-mode-icon-alist)
    (push '("CMakeLists.txt$" all-the-icons-fileicon "cmake" :v-adjust 0.0) all-the-icons-icon-alist)
    (push '("\\.cmake$" all-the-icons-fileicon "cmake" :v-adjust 0.0) all-the-icons-icon-alist)))
#+end_src

**** Imenu integration
#+begin_src emacs-lisp
(add-hook 'cmake-mode-hook (lambda ()
                             (setq-local imenu-generic-expression '(("Function" "^ *function *( *\\([^) ]+\\).*$" 1)
                                                                    ("Macro"  "^ *macro *( *\\([^) ]+\\).*$" 1)))))
#+end_src

**** [[https://github.com/Lindydancer/cmake-font-lock][Highlighting]]
#+begin_src emacs-lisp
(use-package cmake-font-lock
  :hook (cmake-mode . cmake-font-lock-activate)
  :config (font-lock-add-keywords 'cmake-mode
                                  `((,(rx (group "end" (or "function" "macro" "if" "foreach" "while") (0+ " ") "()")) 1 '(face nil display "")))))
#+end_src

**** Editing
***** Abbreviations
#+begin_src emacs-lisp
(define-abbrev-table 'cmake-mode-abbrev-table '(
                                                ("cmkae" "cmake")
                                                ("CMKAE" "CMAKE")
                                                ("CMkae" "CMake")
                                                ("cmd" "${CMAKE_COMMAND}")
                                                ("sd" "${CMAKE_SOURCE_DIR}")
                                                ("bd" "${CMAKE_BINARY_DIR}")
                                                ("cld" "${CMAKE_CURRENT_LIST_DIR}")
                                                ("csd" "${CMAKE_CURRENT_SOURCE_DIR}")
                                                ("cbd" "${CMAKE_CURRENT_BINARY_DIR}")
                                                ("cf" "CMAKE_C_FLAGS")
                                                ("cfd" "CMAKE_C_FLAGS_DEBUG")
                                                ("cfdi" "CMAKE_C_FLAGS_DEBUG_INIT")
                                                ("cfi" "CMAKE_C_FLAGS_INIT")
                                                ("cfr" "CMAKE_C_FLAGS_RELEASE")
                                                ("cfri" "CMAKE_C_FLAGS_RELEASE_INIT")
                                                ("ccf" "CMAKE_CXX_FLAGS")
                                                ("ccfd" "CMAKE_CXX_FLAGS_DEBUG")
                                                ("ccfdi" "CMAKE_CXX_FLAGS_DEBUG_INIT")
                                                ("ccfi" "CMAKE_CXX_FLAGS_INIT")
                                                ("ccfr" "CMAKE_CXX_FLAGS_RELEASE")
                                                ("ccfri" "CMAKE_CXX_FLAGS_RELEASE_INIT")))
#+end_src

***** Wrap Region
#+begin_src emacs-lisp
(with-eval-after-load "wrap-region"
  (wrap-region-add-wrappers
   '(("{" "}" nil cmake-mode)
     ("${" "}" "$" (cmake-mode c-mode c++-mode))
     ("\"${" "}\"" "\'" (cmake-mode))
     ("@" "@" nil (cmake-mode c-mode c++-mode))))
  (add-hook 'cmake-mode-hook 'wrap-region-mode))
#+end_src

***** Language Server
#+begin_src emacs-lisp
(shark-bytes/install-system-package "cmake-language-server" :package-manager 'pip)
(add-hook 'cmake-mode-hook 'lsp-deferred)
#+end_src

***** Formatting
#+begin_src emacs-lisp
(shark-bytes/install-system-package "cmake-format" :package-manager 'pip)
#+end_src

**** Documentation
#+begin_src emacs-lisp
(with-eval-after-load "devdocs-browser"
  (shark-bytes/add-apidocs 'cmake-mode '("bash" "cmake~3.20" "gcc~11" "git")))
#+end_src

*** CSS
#+begin_src emacs-lisp
(push '("\\.css\\'". css-mode) auto-mode-alist)
#+end_src

**** Editing
***** Syntax checkers
#+begin_src emacs-lisp
(with-eval-after-load "system-packages"
  (shark-bytes/install-system-package "csslint")
  (shark-bytes/install-system-package "stylelint" :package-manager 'npm)
  (add-hook 'css-mode-hook (lambda ()
                             (flycheck-select-checker 'css-csslint)
                             (flycheck-add-next-checker 'css-csslint '(t . css-stylelint)))))
#+end_src

**** Documentation
#+begin_src emacs-lisp
(with-eval-after-load "devdocs-browser"
    (shark-bytes/add-apidocs 'css-mode '("css")))
#+end_src

*** [[http://elpa.gnu.org/packages/csv-mode.html][CSV]]
#+begin_src emacs-lisp
(use-package csv-mode
  :mode ("\\.[Cc][Ss][Vv]\\'" . csv-mode)
  :hook ((find-file . shark-bytes/csv-visual-align))
  :config (defun shark-bytes/csv-visual-align ()
            "Align CSV fields."
            (when (equal major-mode 'csv-mode)
              (csv-unalign-fields t (point-min) (point-max))
              (csv-align-fields t (point-min) (point-max)))))
#+end_src

*** [[https://github.com/schspa/dtb-mode][DTB]]
#+begin_src emacs-lisp
(use-package dtb-mode
  :ensure-system-package dtc)
#+end_src

*** Docker
#+begin_src emacs-lisp
(use-package dockerfile-mode)
#+end_src

**** Documentation
#+begin_src emacs-lisp
(with-eval-after-load "devdocs-browser"
    (shark-bytes/add-apidocs 'dockerfile-mode '("bash" "docker~19" "git")))
#+end_src

**** [[https://github.com/Silex/docker.el][Control]]
#+begin_src emacs-lisp
(use-package docker)
#+end_src

**** [[https://github.com/emacs-pe/docker-tramp.el][TRAMP support]]
#+begin_src emacs-lisp
(use-package docker-tramp
  :after tramp)
#+end_src

**** Editing
***** Language server
#+begin_src emacs-lisp
(with-eval-after-load "lsp-mode"
  (add-hook 'dockerfile-mode-hook 'lsp-deferred))
#+end_src

***** [[https://github.com/redcoolbeans/dockerlint][Syntax checker]]

TODO use [[https://github.com/hadolint/hadolint/][hadolint]
#+begin_src emacs-lisp
(with-eval-after-load "system-packages"
  (shark-bytes/install-system-package "dockerlint" :package-manager 'npm)
  (with-eval-after-load "flycheck"
    (flycheck-define-checker shark-bytes/dockerlint
      "Dockerfile checker (https://github.com/redcoolbeans/dockerlint)"
      :command ("dockerlint" source-original)
      :error-patterns ((error line-start "ERROR: " (message) " on line " line line-end)
                       (warning line-start "WARN: " (message) " on line " line line-end)
                       (info line-start "INFO: " (message) " on line " line line-end))
      :modes (dockerfile-mode))
    (add-to-list 'flycheck-checkers 'shark-bytes/dockerlint)
    (add-hook 'dockerfile-mode-hook (lambda ()
                                      (flycheck-select-checker 'shark-bytes/dockerlint)))))
#+end_src

*** Dot
#+begin_src emacs-lisp
(use-package graphviz-dot-mode
  :after (org system-packages)
  :custom
  (graphviz-dot-auto-indent-on-braces t)
  (graphviz-dot-indent-width shark-bytes/default-indentation)
  (graphviz-dot-auto-preview-on-save t)
  :config
  (shark-bytes/install-system-package "graphviz")
  (add-to-list 'org-src-lang-modes '("dot" . graphviz-dot)))
#+end_src

*** GCode
#+begin_src emacs-lisp
(defvar gcode-mode-font-lock-keywords
  '(("\\(([^)]+)\\)"
     (1 font-lock-string-face))
    ("^\\([NnMm][0-9]+\\)"
     (1 font-lock-constant-face))
    ("\\(\\*[0-9]+\\) *$"
     (1 font-lock-constant-face))
    ("\\([Gg][0-9]+\\)"
     (1 font-lock-function-name-face))
    ("\\([AaBbCcEeFfHhIiJjKkLlPpQqRrSsTtUuVvWwXxYyZz][+-]*[0-9\\.]*\\)"
     (1 font-lock-variable-name-face))
    ("\\([+-]*[0-9\\.]*\\)"
     (1 font-lock-variable-name-face)))
  "Highlight rules for `gcode-mode'.")

(defun gcode-mode-indent-line ()
  "Indent current line."
  (interactive)
  (beginning-of-line))

(define-derived-mode gcode-mode prog-mode "GCode-Mode"
  "A major mode for editing gcode files."
  (setq-local comment-start "(")
  (setq-local comment-start-skip "([^)]+)")
  (setq-local font-lock-defaults '(gcode-mode-font-lock-keywords)))

(push '("\\.cnc\\'" . gcode-mode) auto-mode-alist)
(push '("\\.din\\'" . gcode-mode) auto-mode-alist)
(push '("\\.dnc\\'" . gcode-mode) auto-mode-alist)
(push '("\\.eia\\'" . gcode-mode) auto-mode-alist)
(push '("\\.fan\\'" . gcode-mode) auto-mode-alist)
(push '("\\.f[gn]c\\'" . gcode-mode) auto-mode-alist)
(push '("\\.gc[do]?\\'" . gcode-mode) auto-mode-alist)
(push '("\\.gcode\\'" . gcode-mode) auto-mode-alist)
(push '("\\.hnc\\'" . gcode-mode) auto-mode-alist)
(push '("\\.maz\\'" . gcode-mode) auto-mode-alist)
(push '("\\.mpf\\'" . gcode-mode) auto-mode-alist)
(push '("\\.nc[fgp]?\\'" . gcode-mode) auto-mode-alist)
(push '("\\.ngc\\'" . gcode-mode) auto-mode-alist)
(push '("\\.pim\\'" . gcode-mode) auto-mode-alist)
(push '("\\.plt\\'" . gcode-mode) auto-mode-alist)
(push '("\\.ptp\\'" . gcode-mode) auto-mode-alist)
(push '("\\.tap\\'" . gcode-mode) auto-mode-alist)

(provide 'gcode-mode)
#+end_src

*** GLSL
#+begin_src emacs-lisp
(use-package glsl-mode
  :mode (("\\.vert\\'" . glsl-mode)
         ("\\.frag\\'" . glsl-mode)
         ("\\.geom\\'" . glsl-mode)
         ("\\.glsl\\'" . glsl-mode)))
#+end_src

*** Groovy
#+begin_src emacs-lisp
(use-package groovy-mode
  :mode "Jenkinsfile")
#+end_src

**** Jenkinsfile
***** Imenu support
#+begin_src emacs-lisp
(add-hook 'groovy-mode-hook (lambda()
                              (setq imenu-create-index-function #'imenu-default-create-index-function)
                              (setq-local imenu-generic-expression `(("Stages" ,(rx (0+ space)
                                                                                    "stage"
                                                                                    (0+ space)
                                                                                    (? "(")
                                                                                    (in "'\"")
                                                                                    (group (+ (not (in "'\""))))
                                                                                    (in "'\"")
                                                                                    (? ")")
                                                                                    (0+ space)
                                                                                    (? "{")
                                                                                    (0+ space))
                                                                      1)))))
#+end_src

***** Syntax check
#+begin_src emacs-lisp
(with-eval-after-load "flycheck"
  (defvar shark-bytes/jenkins-url nil "The URL of the Jenkins installation.")
  (shark-bytes/install-system-package "curl")
  (flycheck-define-checker jenkins
    "A Jenkins pipeline syntax checker."
    :command ("/usr/bin/curl"
              "-s" "-X" "POST" "-H" (eval (shell-command-to-string "/usr/bin/curl '-s' 'localhost:8080/crumbIssuer/api/xml?xpath=concat(//crumbRequestField,\":\",//crumb)'"))
              "-F" (eval (concat "jenkinsfile=<" (car (flycheck-substitute-argument 'source 'jenkins))))
              (eval (concat shark-bytes/jenkins-url "/pipeline-model-converter/validate")))
    :error-patterns ((warning line-start (file-name) ":" (message) "@ line " line ", column " column))
    :modes (groovy-mode))
  (add-to-list 'flycheck-checkers 'jenkins))
#+end_src

*** HTML
#+begin_src emacs-lisp
(push '("\\.x?html?\\'" . html-mode) auto-mode-alist)
#+end_src

**** Documentation
#+begin_src emacs-lisp
(with-eval-after-load "devdocs-browser"
  (shark-bytes/add-apidocs 'html-mode '("css" "dom" "html" "http")))
#+end_src

**** Editing
***** Language server
#+begin_src emacs-lisp
(with-eval-after-load "system-packages"
  (shark-bytes/install-system-package "vscode-html-languageserver-bin" :package-manager 'npm)
  (add-hook 'html-mode 'lsp-deferred))
#+end_src

***** [[https://github.com/thedaviddias/HTMLHint][Syntax checker]]
#+begin_src emacs-lisp
(with-eval-after-load "system-packages"
  (shark-bytes/install-system-package "htmlhint" :package-manager 'npm)
  (with-eval-after-load "flycheck"
    (flycheck-define-checker shark-bytes/htmlhint
      "HTML file checker (https://github.com/thedaviddias/HTMLHint)"
      :command ("htmlhint" "--nocolor" "--format" "compact" source-original)
      :error-patterns ((error line-start (file-name) ": line " line ", col " column ", error - " (message) line-end)
(warning line-start (file-name) ": line " line ", col " column ", warning - " (message) line-end)
(info line-start (file-name) ": line " line ", col " column ", info - " (message) line-end))
      :modes (html-mode))
    (add-to-list 'flycheck-checkers 'shark-bytes/htmlhint)))
#+end_src

*** Ini
#+begin_src emacs-lisp
(defvar ini-mode-syntax-table
  (let ((table (make-syntax-table)))
    (modify-syntax-entry ?\; "< b" table)
    (modify-syntax-entry ?# "< b" table)
    (modify-syntax-entry ?\n "> b" table)
    table)
  "Syntax table for `ini-mode'.")

(defvar ini-mode-font-lock-keywords
  '(("^\\[\\(.*\\)\\]"
     (1 font-lock-function-name-face))
    ("^\\([^ \t\n=]+\\) *="
     (1 font-lock-variable-name-face)))
  "Highlight rules for `ini-mode'.")

(defun ini-mode-indent-line ()
  "Indent current line."
  (interactive)
  (beginning-of-line))

(define-derived-mode ini-mode prog-mode "Ini-Mode"
  "A major mode for editing ini files."
  (setq-local comment-start "; ")
  (setq-local comment-start-skip "[#;] *")
  (setq-local font-lock-defaults '(ini-mode-font-lock-keywords))
  (setq-local imenu-generic-expression '(("Section" "^\\[\\([a-zA-Z0-9 ]+\\)\\] *" 1)
                                         ("Entry" "^\\([a-zA-Z0-9_-]+\\)= ?*" 1)))
  (setq-local outline-regexp "\\["))

(push '("\\.conf\\'" . ini-mode) auto-mode-alist)
(push '("\\.ini\\'" . ini-mode) auto-mode-alist)
(push '("\\.service\\'" . ini-mode) auto-mode-alist)

(provide 'ini-mode)

;    Detection of duplicate properties and sections
;(defun flycheck-ini--start (checker callback)
;  "Flycheck start function for CHECKER, invoking CALLBACK."
;  (funcall callback
;           'finished
;           (flycheck-increment-error-columns
;            (mapcar (lambda (x)
;                      (apply #'flycheck-error-new-at `(,@x :checker ,checker)))
;                    (condition-case err
;                        (when (package-lint-looks-like-a-package-p)
;                          (package-lint-buffer (current-buffer)))
;                      (error
;                       (funcall callback 'errored (error-message-string err))
;                       (signal (car err) (cdr err))))))))
;;; Checker definition

;(flycheck-define-generic-checker 'ini-file
;  "A checker for ini files."
;  :start #'flycheck-ini--start
;  :modes '(ini))

;(add-to-list 'flycheck-checkers 'ini t)
;; (flycheck-add-next-checker 'ini 'ini-file t)
#+end_src

*** Javascript
**** Language Server
#+begin_src emacs-lisp
(add-hook 'js-mode 'lsp-deferred)
#+end_src

**** Documentation
#+begin_src emacs-lisp
(with-eval-after-load "devdocs-browser"
  (shark-bytes/add-apidocs 'js-mode '("javascript")))
#+end_src

**** Editing
***** Syntax checkers
#+begin_src emacs-lisp
(with-eval-after-load "system-packages"
  (shark-bytes/install-system-package "standard" :package-manager 'npm)
  (shark-bytes/install-system-package "jscs" :package-manager 'npm)
  (shark-bytes/install-system-package "eslint" :package-manager 'npm)
  (shark-bytes/install-system-package "jshint" :package-manager 'npm)
  (shark-bytes/install-system-package "jslint" :package-manager 'npm)
  (add-hook 'js-mode-hook (lambda ()
                          (flycheck-select-checker 'javascript-standard)
                          (flycheck-add-next-checker 'javascript-standard '(t . javascript-jscs))
                          (flycheck-add-next-checker 'javascript-jscs '(t . javascript-eslint))
                          (flycheck-add-next-checker 'javascript-eslint '(t . javascript-jshint)))))
#+end_src

*** JSON
#+begin_src emacs-lisp
(use-package json-mode
  :mode "\\.js\\(on\\|[hl]int\\(rc\\)?\\)\\'"
  :config (push '("{" . json-mode) magic-mode-alist))
#+end_src

**** Language Server
#+begin_src emacs-lisp
(add-hook 'json-mode-hook 'lsp-deferred)
#+end_src

**** Path handling
#+begin_src emacs-lisp
(use-package json-snatcher
  :straight (json-snatcher
             :type git
             :host github
             :repo "Sterlingg/json-snatcher")
  :config
  (defun  shark-bytes/json-path ()
    "Return the JSON element hierarchy as a path."
    (interactive)
    (when (and (derived-mode-p 'json-mode)
               (fboundp 'jsons-get-path))
      (mapconcat  (lambda (element)
                    (if (numberp element)
                        (format "[%d]" element)
                      (replace-regexp-in-string "\"" "" element)))
                  (reverse (jsons-get-path))
                  "/")))
  (with-eval-after-load "which-func"
    (add-to-list 'which-func-functions 'shark-bytes/json-path)))
#+end_src

**** Editing

*** Latex
#+begin_src emacs-lisp
(push '("\\.tex\\'" . latex-mode) auto-mode-alist)
(push '("\\.txi\\'" . texinfo-mode) auto-mode-alist)
(push '("\\.bib\\'" . bibtex-mode) auto-mode-alist)
#+end_src

#+begin_src emacs-lisp
(add-hook 'latex-mode-hook 'lsp-deferred)
#+end_src

**** Documentation
#+begin_src emacs-lisp
(with-eval-after-load "devdocs-browser"
  (shark-bytes/add-apidocs 'latex-mode '("latex"))
  (shark-bytes/add-apidocs 'texinfo-mode '("latex"))
  (shark-bytes/add-apidocs 'bibtex-mode '("latex")))
#+end_src

*** Lisp
#+begin_src emacs-lisp
(push '("\\.emacs\\'" . emacs-lisp-mode) auto-mode-alist)
(push '("\\.el\\'" . emacs-lisp-mode) auto-mode-alist)
(push '("\\.lisp\\'" . lisp-mode) auto-mode-alist)
(push '("\\.lsp\\'" . lisp-mode) auto-mode-alist)
#+end_src

**** [[https://github.com/alphapapa/highlight-function-calls][Highlight function calls]]
#+begin_src emacs-lisp
(use-package highlight-function-calls
  :hook (emacs-lisp-mode . highlight-function-calls-mode)
  :custom (highlight-function-calls-not t))
#+end_src

**** [[https://github.com/Fanael/highlight-defined][Highlight undefined symbols]]
#+begin_src emacs-lisp
(defun shark-bytes/highlight-defined--determine-face (symbol)
  "Return the face SYMBOL should be fontified with. If SYMBOL is not one of the recognized types, return nil."
  (if (not (or (fboundp symbol) (special-variable-p symbol) (facep symbol)))
      'warning
    nil))

(use-package highlight-defined
  :hook (emacs-lisp-mode . highlight-defined-mode)
  :config
  (advice-add 'highlight-defined--determine-face :override #'shark-bytes/highlight-defined--determine-face))
#+end_src

**** [[https://github.com/cpitclaudel/easy-escape][Simplify Regular Expressions]]
#+begin_src emacs-lisp
(use-package easy-escape
  :hook ((lisp-mode . easy-escape-minor-mode)
         (emacs-lisp-mode . easy-escape-minor-mode)))
#+end_src

**** Flip words
#+begin_src emacs-lisp
(with-eval-after-load "bool-flip"
  (progn
    (defun shark-bytes/setup-elisp-flip ()
      (make-local-variable 'bool-flip-alist)
      (push '("t" . "nil") bool-flip-alist)
      (push '("nil" . "t") bool-flip-alist)
      (push '("let" . "let*") bool-flip-alist)
      (push '("let*" . "let") bool-flip-alist)
      (push '("when" . "unless") bool-flip-alist)
      (push '("unless" . "when") bool-flip-alist)
      (push '("advice-add" . "advice-remove") bool-flip-alist)
      (push '("advice-remove" . "advice-add") bool-flip-alist)
      (push '("add-hook" . "remove-hook") bool-flip-alist)
      (push '("remove-hook" . "add-hook") bool-flip-alist))
    (add-hook 'lisp-mode-hook 'shark-bytes/setup-elisp-flip)
    (add-hook 'emacs-lisp-mode-hook 'shark-bytes/setup-elisp-flip)))
#+end_src

**** [[https://github.com/Malabarba/comment-or-uncomment-sexp][Un-/Comment SEXPs]]
#+begin_src emacs-lisp
(use-package comment-or-uncomment-sexp
  :straight (comment-or-uncomment-sexp
             :type git
             :host github
             :repo "Malabarba/comment-or-uncomment-sexp"))
#+end_src


**** Documentation
#+begin_src emacs-lisp
(with-eval-after-load "devdocs-browser"
    (shark-bytes/add-apidocs 'emacs-lisp-mode '("elisp")))
#+end_src

*** Make
#+begin_src emacs-lisp
(push '("Makefile\\'" . makefile-mode) auto-mode-alist)
(push '("\\.mak\\'" . makefile-mode) auto-mode-alist)
#+end_src

**** Documentation
#+begin_src emacs-lisp
(with-eval-after-load "devdocs-browser"
  (shark-bytes/add-apidocs 'makefile-mode '("gcc~11")))
#+end_src

*** Perl
#+begin_src emacs-lisp
(push '("#!/usr/bin/perl" . perl-mode) magic-mode-alist)
#+end_src

*** Prolog
#+begin_src emacs-lisp
(push '("\\.pl\\'" . prolog-mode) auto-mode-alist)
#+end_src

*** Python
#+begin_src emacs-lisp
(push '("\\.py\\'" . python-mode) auto-mode-alist)
#+end_src


   python-shell-switch-to-shell
   python-shell-send-buffer
   python-shell-send-region
   python-shell-send-defun


(defun projectile-pyenv-mode-set ()
  "Set pyenv version matching project name."
  (let ((project (projectile-project-name)))
    (if (member project (pyenv-mode-versions))
        (pyenv-mode-set project)
      (pyenv-mode-unset))))

(add-hook 'projectile-after-switch-project-hook 'projectile-pyenv-mode-set)


  (setq pyvenv-post-deactivate-hooks
        (list (lambda ()
                (setq python-shell-interpreter "python3")))))

(with-eval-after-load "devdocs-browser"
  (shark-bytes/add-apidocs 'python-mode . '(python~3.9))


https://github.com/wbolster/emacs-python-pytest
https://github.com/pwalsh/pipenv.el
https://github.com/marcwebbie/auto-virtualenv





(defun +python/optimize-imports ()
  "organize imports"
  (interactive)
  (pyimport-remove-unused)
  (py-isort-buffer))


(defun +python/open-repl ()
  "Open the Python REPL."
  (interactive)
  (require 'python)
  (unless python-shell-interpreter
    (user-error "`python-shell-interpreter' isn't set"))
  (pop-to-buffer
   (process-buffer
    (if-let* ((pipenv (+python-executable-find "pipenv"))
              (pipenv-project (pipenv-project-p)))
        (let ((default-directory pipenv-project)
              (python-shell-interpreter-args
               (format "run %s %s"
                       python-shell-interpreter
                       python-shell-interpreter-args))
              (python-shell-interpreter pipenv))
          (run-python nil nil t))
      (run-python nil nil t)))))


(use-package! pyimport
  :defer t
  :init
  (map! :after python
        :map python-mode-map
        :localleader
        (:prefix ("i" . "imports")
          :desc "Insert missing imports" "i" #'pyimport-insert-missing
          :desc "Remove unused imports"  "r" #'pyimport-remove-unused
          :desc "Optimize imports"       "o" #'+python/optimize-imports)))


          ;; Package `pip-requirements' provides a major mode for
;; requirements.txt files used by Pip.
(use-package pip-requirements


*** QML
#+begin_src emacs-lisp
(use-package qml-mode
  :after rainbow-mode
  :mode "\\.qml\\'"
  :config (add-to-list 'rainbow-html-colors-major-mode-list 'qml-mode))
#+end_src

**** Imenu integration
#+begin_src emacs-lisp
(defun shark-bytes/qml-imenu-create-index()
  (append (imenu-default-create-index-function)
          (js--imenu-create-index)))

(add-hook 'js-mode-hook (lambda()
                          (when (derived-mode-p 'qml-mode)
                            (setq imenu-create-index-function #'shark-bytes/qml-imenu-create-index)
                            (setq-local imenu-generic-expression '(("Items" "^[[:space:]]*\\([a-zA-Z0-9]+\\)[[:space:]\n]*{" 1))))))
#+end_src

**** Documentation
#+begin_src emacs-lisp
(with-eval-after-load "devdocs-browser"
    (shark-bytes/add-apidocs 'qml-mode '("qt~5.15")))
#+end_src

*** Shell
#+begin_src emacs-lisp
(push '("\\.sh\\'" . sh-mode) auto-mode-alist)
#+end_src

**** Prettification
#+begin_src emacs-lisp
(setq shark-bytes/font-lock-shebang `((,(rx bol (group "#!/" (? "usr/") (? "s") "bin/")) 1 '(face nil display " "))))

(font-lock-add-keywords 'sh-mode shark-bytes/font-lock-shebang)
(font-lock-add-keywords 'shell-mode shark-bytes/font-lock-shebang)
#+end_src

**** Editing
***** Syntax checkers
#+begin_src emacs-lisp
(use-package flycheck-checkbashisms
  :after flycheck
  :ensure-system-package ((checkbashisms . devscripts-checkbashisms) (shellcheck . ShellCheck))
  :hook (sh-mode . (lambda ()
                     (flycheck-select-checker 'sh-bash)
                     (flycheck-add-next-checker 'sh-bash '(t . sh-zsh))
                     (flycheck-add-next-checker 'sh-zsh '(t . sh-checkbashisms))
                     (flycheck-add-next-checker 'sh-checkbashisms '(t . sh-shellcheck))))
  :config
  (add-to-list 'flycheck-checkers 'sh-checkbashisms t))
#+end_src

***** Formatting
#+begin_src emacs-lisp
(system-packages-ensure "shfmt")
#+end_src

***** Automatically set shell scripts to executable
#+begin_src emacs-lisp
(add-hook 'after-save-hook 'executable-make-buffer-file-executable-if-script-p)
#+end_src

**** BASH
Set correct major mode
#+begin_src emacs-lisp
(push '("#!/bin/bash" . bash-mode) magic-mode-alist)
(push '("#!/bin/busybox" . bash-mode) magic-mode-alist)
(push '("\\.bash\\'" . bash-mode) auto-mode-alist)
#+end_src

***** Prettification
#+begin_src emacs-lisp
(font-lock-add-keywords 'bash-mode shark-bytes/font-lock-shebang)
#+end_src

***** Language server
#+begin_src emacs-lisp
(shark-bytes/install-system-package "bash-language-server" :package-manager 'npm)
(add-hook 'bash-mode-hook 'lsp-deferred)
#+end_src

**** ZSH
Set correct major mode
#+begin_src emacs-lisp
(push '("#!/usr/bin/zsh" . sh-mode) magic-mode-alist)
(push '("\\.zsh\\'" . sh-mode) auto-mode-alist)
(push '("zlogin\\'" . sh-mode) auto-mode-alist)
(push '("zlogout\\'" . sh-mode) auto-mode-alist)
(push '("zprofile\\'" . sh-mode) auto-mode-alist)
(push '("zshenv\\'" . sh-mode) auto-mode-alist)
(push '("zshrc\\'" . sh-mode) auto-mode-alist)

(add-to-list 'interpreter-mode-alist
             '("zsh" . sh-mode))
#+end_src

***** Prettification
#+begin_src emacs-lisp
(font-lock-add-keywords 'zsh-mode shark-bytes/font-lock-shebang)
#+end_src

**** DOS-Batch
#+begin_src emacs-lisp
(push '("\\.bat\\'" . bat-mode) auto-mode-alist)
#+end_src

**** Documentation
#+begin_src emacs-lisp
(with-eval-after-load "devdocs-browser"
  (shark-bytes/add-apidocs 'sh-mode '("bash" "elisp" "gcc~11" "git"))
  (shark-bytes/add-apidocs 'bash-mode '("bash" "elisp" "gcc~11" "git")))
#+end_src


*** SSH Config
#+begin_src emacs-lisp
(use-package ssh-config-mode)
#+end_src

*** Systemd
#+begin_src emacs-lisp
(use-package systemd)
#+end_src

[[https://github.com/SebastianMeisel/journalctl-mode][Journalctl-Mode]]
#+begin_src emacs-lisp
(use-package journalctl-mode)
#+end_src

*** [[https://github.com/skuro/plantuml-mode][UML]]
#+begin_src emacs-lisp
(use-package plantuml-mode
  :after (org popwin)
  :ensure-system-package (plantuml graphviz)
  :mode "\\.p\\(lant\\)?uml\\'"
  :custom
  (plantuml-jar-path "/usr/share/java/plantuml.jar")
  (org-plantuml-jar-path "/usr/share/java/plantuml.jar")
  (org-plantuml-exec-mode 'plantuml)
  :config
  (push '("*PLANTUML Preview*" :dedicated t :width 60 :position right :noselect :stick) popwin:special-display-config)
  (add-to-list 'org-src-lang-modes '("plantuml" . plantuml)))

(defun shark-bytes/preview-plantuml-file ()
  "Preview a plantuml file."
  (when (equal major-mode 'plantuml-mode)
    (plantuml-preview-string 4 (buffer-string))))

(add-hook 'find-file-hook 'shark-bytes/preview-plantuml-file)
(add-hook 'after-save-hook 'shark-bytes/preview-plantuml-file)
#+end_src

**** [[https://github.com/alexmurray/flycheck-plantuml][Syntax checker]]
#+begin_src emacs-lisp
(use-package flycheck-plantuml
  :after plantuml-mode
  :config (flycheck-plantuml-setup))
#+end_src

*** XML
#+begin_src emacs-lisp
(push '("<\\?xml" . nxml-mode) magic-mode-alist)
#+end_src

Show current XML path as current function
#+begin_src emacs-lisp
(defun shark-bytes/xml-path ()
  "Return the XML element hierarchy as a path."
  (interactive)
  (when (derived-mode-p 'nxml-mode)
    (let ((path nil))
      (save-excursion
        (save-restriction
          (widen)
          (while (and (< (point-min) (point))
                      (condition-case nil
                          (progn
                            (nxml-backward-up-element)
                            t)
                        (error nil)))
            (setq path (cons (xmltok-start-tag-local-name) path)))
          (format "/%s" (mapconcat 'identity path "/")))))))

(with-eval-after-load "which-func"
  (add-to-list 'which-func-functions 'shark-bytes/xml-path))
#+end_src

**** Navigation
***** Jump to element
#+begin_src emacs-lisp
(use-package x-path-walker)
#+end_src

**** Editing
***** Always add XML declaration
#+begin_src emacs-lisp
(defvar nxml-auto-insert-xml-declaration-flag t)
#+end_src

***** Language Server
#+begin_src emacs-lisp
(add-hook 'nxml-mode-hook 'lsp-deferred)
#+end_src

***** Syntax checkers
#+begin_src emacs-lisp
(with-eval-after-load "system-packages"
  (shark-bytes/install-system-package "xmllint")
  (shark-bytes/install-system-package "xmlstarlet")
  (with-eval-after-load "flycheck"
    (flycheck-add-next-checker 'xml-xmllint '(t . xml-xmlstarlet))
    (add-hook 'nxml-mode-hook (lambda ()
                                (flycheck-select-checker 'xml-xmllint)))))
#+end_src

***** Formatting
#+begin_src emacs-lisp
(with-eval-after-load "format-all"
  (shark-bytes/install-system-package "xmllint")
  (define-format-all-formatter xmllint-fmt
    (:executable "xmllint")
    (:install)
    (:languages "XML")
    (:features)
    (:format (format-all--buffer-easy executable
                                      "--format"
                                      "--nowarning"
                                      "-"))))
#+end_src

**** Documentation
#+begin_src emacs-lisp
(with-eval-after-load "devdocs-browser"
    (shark-bytes/add-apidocs 'nxml-mode '("dom" "html" "svg" "xslt_xpath")))
#+end_src

*** [[https://github.com/yoshiki/yaml-mode][YAML]]
#+begin_src emacs-lisp
(use-package yaml-mode
  :hook (yaml-mode . lsp-deferred)
  :mode "\.yml\'")
#+end_src

**** [[https://github.com/krzysztof-magosa/flycheck-yamllint][Syntax checker]]
#+begin_src emacs-lisp
(with-eval-after-load "system-packages"
  (shark-bytes/install-system-package "js-yaml" :package-manager 'npm))

(use-package flycheck-yamllint
  :after flycheck
  :ensure-system-package yamllint
  :config (flycheck-yamllint-setup)
          (flycheck-add-next-checker 'yaml-jsyaml '(t . yaml-yamllint)))
#+end_src

** Debugging
#+BEGIN_SRC emacs-lisp
(defvar gdb-many-windows t)
(defvar gdb-show-main nil)
(setq gud-tooltip-mode t)

(use-package realgud
  :custom (realgud-bp-fringe-indicator-style '(realgud-bp-filled . realgud-bp-hollow)))
#+end_src

*** Show symbols of ELF files
#+begin_src emacs-lisp
(use-package elf-mode
  :config
  (elf-setup-default)
  (push "\\.so\\'" shark-bytes/no-hexedit-extensions))
#+end_src

**** [[https://github.com/liblit/demangle-mode][Demangle symbols in ELF files]]
#+begin_src emacs-lisp
(use-package demangle-mode
  :config
  (advice-add 'elf-mode :after 'demangle-mode))
#+end_src

** Diff/Merge
*** Diff support
Use smerge-mode
#+begin_src emacs-lisp
(add-hook 'diff-mode-hook 'smerge-mode)
#+end_src

#+begin_src emacs-lisp
(push '("\\.diff\\'" . diff-mode) auto-mode-alist)
(push '("\\.patch\\'" . diff-mode) auto-mode-alist)

(setq diff-default-read-only t)
#+end_src

Auto-highlight details
#+begin_src emacs-lisp
(setq diff-refine 'font-lock)
#+end_src

*** Quit smerge-mode after last resolved conflict
#+begin_src emacs-lisp
(setq smerge-auto-leave t)
#+end_src

*** Re-use current frame for all diff contents (including command frame)
#+begin_src emacs-lisp
(setq ediff-window-setup-function 'ediff-setup-windows-plain)
#+end_src

*** Quit diff view without confirmation if buffer is unchanged
#+begin_src emacs-lisp
(defun shark-bytes/ediff-smart-quit ()
  "Ask for confirmation only before quitting changed ediff buffers"
  (interactive)
  (ediff-barf-if-not-control-buffer)
  (let* ((buffer-a ediff-buffer-A)
         (buffer-b ediff-buffer-B)
         (buffer-c ediff-buffer-C)
         (buffer-control (current-buffer))
         (modified-buffers (cl-remove-if-not 'buffer-modified-p
                                             (list buffer-a buffer-b buffer-c))))
    (let ((save (if modified-buffers
                    (yes-or-no-p "Save changes?")
                  nil)))
      (loop for buffer in modified-buffers do
            (progn
              (set-buffer buffer)
              (if save
                  (save-buffer)
                (set-buffer-modified-p nil))))
      (set-buffer buffer-control)
      (ediff-really-quit nil))))

(add-hook 'ediff-startup-hook (lambda ()
                                (local-set-key (kbd "q") 'shark-bytes/ediff-smart-quit)))
#+end_src

*** Split windows horizontally
#+begin_src emacs-lisp
(defvar ediff-merge-split-window-function 'split-window-horizontally)
(defvar ediff-split-window-function 'split-window-horizontally)
#+end_src

*** [[https://github.com/mgalgs/diffview-mode][Show unified diff as normal diff]]
#+begin_src emacs-lisp
(use-package diffview)
#+end_src

*** [[https://github.com/fourier/ztree][Tree diff]]
#+begin_src emacs-lisp
(use-package ztree
  :custom
  (ztree-draw-unicode-lines t)
  (ztree-show-number-of-children t))
#+end_src

** Version Control
*** Common
**** Limit version control systems to most used ones
#+begin_src emacs-lisp
(setq vc-handled-backends '(git svn))
#+end_src

**** Always open actual file under source control when visited through a symbolic link
#+begin_src emacs-lisp
(setq vc-follow-symlinks t)
#+end_src

**** [[https://github.com/emacsorphanage/git-gutter-fringe][Show uncommitted lines in the fringe]]
#+begin_src emacs-lisp
(use-package git-gutter
  :custom
  (git-gutter:hide-gutter t)
  (git-gutter:update-interval 0.2)
  (git-gutter:visual-line t)
  :config (global-git-gutter-mode))

(use-package git-gutter-fringe
  :after git-gutter
  :config
  (fringe-helper-define 'git-gutter-fr:added nil
    "...XX..."
    "...XX..."
    "...XX..."
    "XXXXXXXX"
    "XXXXXXXX"
    "...XX..."
    "...XX..."
    "...XX...")
  (fringe-helper-define 'git-gutter-fr:deleted nil
    "........"
    "........"
    "........"
    "XXXXXXXX"
    "XXXXXXXX"
    "........"
    "........"
    "........")
  (fringe-helper-define 'git-gutter-fr:modified nil
    ".XX....X"
    "XXXXX.X."
    "XXXX.X.."
    ".XX.X..."
    "...X...."
    "..X.XXXX"
    ".X..XXXX"
    "X......."))
#+end_src

**** Colorize commit age
#+begin_src emacs-lisp
(setq shark-bytes/commit-age-colors `((7 . ,shark-bytes-burning)
                                      (14 . ,shark-bytes-hot)
                                      (31 . ,shark-bytes-cozy)
                                      (93 . ,shark-bytes-bleak)
                                      (183 . ,shark-bytes-cold)
                                      (365 . ,shark-bytes-freezing)))

(defun shark-bytes/get-commit-age-color(commit-date)
  "Determine forground color from COMMIT-DATE."
  (let* ((commit-age (floor (/ (float-time (time-since (encode-time (decoded-time-set-defaults (parse-time-string commit-date))))) 60 60 24)))
         (age-colors-sorted (-sort  (lambda (first second)
                                      (< (car first) (car second)))
                                    shark-bytes/commit-age-colors))
         (color (cdr (or (--first (< commit-age (car it))
                                  age-colors-sorted)
                         (car (last age-colors-sorted))))))
    color))
#+end_src

*** Git
**** [[https://github.com/magit/magit][Magit]]
#+begin_src emacs-lisp
(use-package magit
  :after (consult projectile super-save)
  :custom
  (magit-clone-set-remote.pushDefault t)
  (magit-repository-directories (append (mapcar (lambda (directory)
                                                  (cons directory 5))
                                                shark-bytes/project-directories)
                                        '(("~/.dotfiles/" . 1))))
  (magit-clone-default-directory (file-name-as-directory (or (car shark-bytes/project-directories)
                                                             (getenv "HOME"))))
  (git-commit-style-convention-checks nil)
  (git-commit-summary-max-length 80)
  (magit-auto-revert-mode t)
  (magit-diff-expansion-threshold 3)
  (magit-diff-highlight-hunk-region-functions '(magit-diff-highlight-hunk-region-dim-outside magit-diff-highlight-hunk-region-using-underline))
  (magit-diff-highlight-indentation '((".*" . tabs)))
  (magit-diff-refine-hunk 'all)
  (magit-display-buffer-function 'magit-display-buffer-fullframe-status-v1)
  (magit-log-auto-more t)
  (magit-popup-manpage-package 'woman)
  (magit-popup-show-common-commands nil)
  (magit-process-popup-time 3)
  (magit-repolist-columns '(("Name"    25 magit-repolist-column-ident ())
                            (""       40 magit-repolist-column-version ())
                            (""        1 magit-repolist-column-dirty ())
                            ("⇣"        3 magit-repolist-column-unpulled-from-upstream ((:right-align t)
                                                                                        (:help-echo "Upstream changes not in branch")))
                            ("⇡"        3 magit-repolist-column-unpushed-to-upstream ((:right-align t)
                                                                                      (:help-echo "Local changes not in upstream")))
                            (""       99 magit-repolist-column-path ())))
  (magit-save-repository-buffers 'dontask)
  (magit-section-initial-visibility-alist '((stashes . hide) (untracked . hide) (unpushed . hide)))
  (magit-status-show-hashes-in-headers nil)
  (magit-log-arguments '("--graph"
                         "--color"
                         "--decorate"
                         "-n200"))
  (magit-diff-arguments '("--function-context" "--stat" "-M" "-C"))
  :config
  (setq projectile-project-search-path magit-repository-directories)
  (defun shark-bytes/update-known-projects ()
    (interactive)
    (mapc #'projectile-add-known-project (mapcar #'file-name-as-directory (magit-list-repos)))
    nil)
  (shark-bytes/update-known-projects)
  (defun shark-bytes/projectile-invalidate-cache (&rest arguments)
    "Invalidate projectile cache for current project."
    (projectile-invalidate-cache nil))
  (advice-add 'magit-checkout :after #'shark-bytes/projectile-invalidate-cache)
  (advice-add 'magit-branch-and-checkout :after #'shark-bytes/projectile-invalidate-cache)
  (push "\\`\\*?magit.*" consult-buffer-filter)
  (add-to-list 'super-save-triggers 'magit-status)
  (defun shark-bytes/git-rebase-kill-line ()
    "Kill the current action line.
If the region is active, act on all lines touched by the region."
    (interactive)
    (git-rebase-set-action "drop"))
  (advice-add 'git-rebase-kill-line :override #'shark-bytes/git-rebase-kill-line)
  (setq git-rebase-short-options
  '((?b . "break")
    (?d . "drop")
    (?e . "edit")
    (?f . "fixup")
    (?l . "label")
    (?m . "merge")
    (?p . "pick")
    (?r . "reword")
    (?s . "squash")
    (?t . "reset")
    (?x . "exec")))
  (transient-append-suffix 'magit-dispatch "X" '("x" "Clean" magit-clean)))

(use-package magit-popup)
#+end_src


***** Full screen magit-status
#+begin_src emacs-lisp
(defadvice magit-status (around magit-fullscreen activate)
  (window-configuration-to-register :magit-fullscreen)
  ad-do-it
  (delete-other-windows))
#+end_src

***** Restore previous window configuration on quit
#+begin_src emacs-lisp
(defun magit-quit-session ()
  "Restores the previous window configuration and kills the magit buffer"
  (interactive)
  (kill-buffer)
  (jump-to-register :magit-fullscreen))
#+end_src

***** Show ToDos in status window
#+begin_src emacs-lisp
(use-package magit-todos
  :ensure-system-package ripgrep
  :custom
  (magit-todos-auto-group-items 'always)
  (magit-todos-group-by '(magit-todos-item-keyword magit-todos-item-filename))
  (magit-todos-ignore-case t)
  (magit-todos-ignored-keywords '("NOTE" "INFO" "DONE"))
  (magit-todos-insert-at 'untracked)
  (magit-todos-keyword-suffix "")
  (magit-todos-nice nil)
  (magit-todos-update 10)
  :config (magit-todos-mode))
#+end_src

***** Highlight Bug References
(add-hook 'magit-mode-hook 'bug-reference-mode)
#+begin_src emacs-lisp
#+end_src

***** [[https://github.com/magit/forge][Git forge integration]]
#+begin_src emacs-lisp
(use-package forge
  :after magit)
#+end_src

[[https://github.com/charignon/github-review][GitHub review]]
#+begin_src emacs-lisp
(use-package github-review
  :after magit forge
  :config
  (transient-append-suffix 'forge-dispatch "c u"
    '("c r" "Review pull request" github-review-forge-pr-at-point)))
#+end_src

***** [[https://github.com/terranpro/magit-gerrit][Gerrit integration]]
#+begin_src emacs-lisp
(use-package magit-gerrit
  :after (magit magit-popup)
  :straight (magit-gerrit
             :type git
             :host github
             :repo "ispras/magit-gerrit")
  :custom
  (magit-gerrit-remote "")
  (magit-gerrit-ssh-creds ""))
#+end_src

***** Icons for changes
#+begin_src emacs-lisp
(defvar prettify-magit-alist (list (list (rx (= 8 (in "0-9a-f")) space (+ (in space punctuation "*" "/" "\\" "|")) (group "|")) "│")
                                   (list (rx (= 8 (in "0-9a-f")) space (+ (in space punctuation "*" "/" "\\" "|")) (group "/")) "╱")
                                   (list (rx (= 8 (in "0-9a-f")) space (+ (in space punctuation "*" "/" "\\" "|")) (group "\\")) "╲")
                                   (list (rx (= 8 (in "0-9a-f")) space (+ (in space punctuation "*" "/" "\\" "|")) (group "*")) "┝")
                                   (list (rx bol (= 8 (in "0-9a-f")) space (+ (in space punctuation)) bow (group "add" (? (or "s" "ed"))) eow) "")
                                   (list (rx bol (= 8 (in "0-9a-f")) space (+ (in space punctuation)) bow (group "allow" (? (or "s" "ed"))) eow) "")
                                   (list (rx bol (= 8 (in "0-9a-f")) space (+ (in space punctuation)) bow (group (or "remove" "delete") (? (in "sd"))) eow) "")
                                   (list (rx bol (= 8 (in "0-9a-f")) space (+ (in space punctuation)) bow (group (? "bug") "fix" (? (or "up" (group "e" (in "sd"))))) eow) "")
                                   (list (rx bol (= 8 (in "0-9a-f")) space (+ (in space punctuation)) bow (group "call" (? (or "s" "ed"))) eow) "↴")
                                   (list (rx bol (= 8 (in "0-9a-f")) space (+ (in space punctuation)) bow (group "fixup" (? "!"))) "")
                                   (list (rx bol (= 8 (in "0-9a-f")) space (+ (in space punctuation)) bow (group "clea" (or "n" "r") (? (or "s" "ed")) (? (? " ") "up")) eow) "")
                                   (list (rx bol (= 8 (in "0-9a-f")) space (+ (in space punctuation)) bow (group "update" (? (in "sd"))) eow) "⇪")
                                   (list (rx bol (= 8 (in "0-9a-f")) space (+ (in space punctuation)) bow (group "sync" (? (or "s" "ed"))) eow) "")
                                   (list (rx bol (= 8 (in "0-9a-f")) space (+ (in space punctuation)) bow (group "refactor" (? (or "s" "ed"))) eow) "")
                                   (list (rx bol (= 8 (in "0-9a-f")) space (+ (in space punctuation)) bow (group (or "replace" "exchange") (? (in "sd"))) eow) "")
                                   (list (rx bol (= 8 (in "0-9a-f")) space (+ (in space punctuation)) bow (group "import" (? (or "s" "ed"))) eow) "")
                                   (list (rx bol (= 8 (in "0-9a-f")) space (+ (in space punctuation)) bow (group "increase" (? (in "sd"))) eow) "")
                                   (list (rx bol (= 8 (in "0-9a-f")) space (+ (in space punctuation)) bow (group "decrease" (? (in "sd"))) eow) "")
                                   (list (rx bol (= 8 (in "0-9a-f")) space (+ (in space punctuation)) bow (group (or "enable" "activate") (? (in "sd"))) eow) "")
                                   (list (rx bol (= 8 (in "0-9a-f")) space (+ (in space punctuation)) bow (group (or "disable" "deactivate") (? (in "sd"))) eow) "")
                                   (list (rx bol (= 8 (in "0-9a-f")) space (+ (in space punctuation)) bow (group "move" (? (in "sd"))) eow) "")
                                   (list (rx bol (= 8 (in "0-9a-f")) space (+ (in space punctuation)) bow (group "optimize" (? (in "sd"))) eow) "輪")
                                   (list (rx bol (= 8 (in "0-9a-f")) space (+ (in space punctuation)) bow (group "set" (? "s")) eow) "=" '(:weight 'black :height 1.3))
                                   (list (rx bol (= 8 (in "0-9a-f")) space (+ (in space punctuation)) bow (group "show" (? (in "s"))) eow) "")
                                   (list (rx bol (= 8 (in "0-9a-f")) space (+ (in space punctuation)) bow (group "hide" (? (in "s"))) eow) "")
                                   (list (rx bol (= 8 (in "0-9a-f")) space (+ (in space punctuation)) bow (group "lock" (? (or "s" "ed"))) eow) "𓄗")
                                   (list (rx bol (= 8 (in "0-9a-f")) space (+ (in space punctuation)) bow (group "unlock" (? (or "s" "ed"))) eow) "")
                                   (list (rx bol (= 8 (in "0-9a-f")) space (+ (in space punctuation)) bow (group "use" (? (or "s" "ed"))) eow) "")
                                   (list (rx bol (not (in "+@-")) (+ any) bow (group "master") eow) "")
                                   (list (rx bol (not (in "+@-")) (+ any) bow (group "origin") eow) "")
                                   (list (rx bol (not (in "+@-")) (+ any) bow (group "HEAD") eow) "")
                                   (list (rx bol (not (in "+@-")) (+ any) bow (group "Merge" (? " branch")) eow) "")
                                   (list (rx bol (group (or (group "edit" (? (or "s" "ed"))) (group "modif" (or "y" (group "ie" (in "sd")))))) eow) "")
                                   (list (rx bol (group "new file") eow) "ﱐ")
                                   (list (rx bol (group "delete" (? (in "sd"))) eow) "")
                                   (list (rx bol (group "rename" (? (in "sd"))) eow) "")
                                   (list (rx bol (group "@@")) "𓄥")
                                   (list (rx bol "@@" (+ any) (group "@@")) "")
                                   (list (rx bol (group "pick")) "")
                                   (list (rx bol (group "kill")) "")
                                   (list (rx bol (group "squash")) "ﲐ")
                                   (list (rx bol (group "exec")) "")
                                   (list (rx bol (group "break")) ""))
  "An alist of expressions and icon properties to replace strings with icons in magit logs.")

(defun shark-bytes/prettify-magit (&rest arguments)
  "Add face properties and compose symbols for buffer from pretty-magit."
  (interactive)
  (with-silent-modifications
    (dolist (entry prettify-magit-alist)
      (let ((expression (nth 0 entry))
            (icon (nth 1 entry))
            (properties (nth 2 entry)))
        (save-excursion
          (goto-char (point-min))
          (while (search-forward-regexp expression nil t)
            (when (and (match-beginning 1)
                       (match-end 1))
              (compose-region (match-beginning 1) (match-end 1) icon)
              (when properties
                (add-face-text-property (match-beginning 1) (match-end 1) properties)))))))))

(advice-add 'magit-status :after 'shark-bytes/prettify-magit)
(advice-add 'magit-refresh-buffer :after 'shark-bytes/prettify-magit)
(add-hook 'diff-mode-hook #'shark-bytes/prettify-magit)
#+end_src

***** Import file from stash or branch
#+begin_src emacs-lisp
(with-eval-after-load "magit"
  (defun shark-bytes/list-refs-and-stashes (wrapped-function &rest arguments)
    "Create a list of branches and stashes."
    (append
     (apply wrapped-function arguments)
     (magit-list-stashes)))

  (defun shark-bytes/import-git-file ()
    "Import a git-versioned file from either a branch or the stash."
    (interactive)
    (advice-add #'magit-list-refnames :around #'shark-bytes/list-refs-and-stashes)
    (call-interactively #'magit-file-checkout)
    (advice-remove #'magit-list-refnames #'shark-bytes/list-refs-and-stashes))

  (magit-define-popup-action 'magit-dispatch-popup
    ?I "Import" 'shark-bytes/import-git-file ?!)
  (define-key magit-status-mode-map
    "I" 'shark-bytes/import-git-file))
#+end_src

***** Open file from stash or branch
#+begin_src emacs-lisp
(with-eval-after-load "magit"
  (defun shark-bytes/open-git-file ()
    "Open a git-versioned file from either a branch or the stash."
    (interactive)
    (advice-add #'magit-list-refnames :around #'shark-bytes/list-refs-and-stashes)
    (let* ((rev (magit-read-branch-or-commit
                 "Open from revision" magit-buffer-revision))
           (file (magit-read-file-from-rev rev "Open file"))
           (project (magit-toplevel)))
      (magit-find-file rev file)
      (let ((name (concat file "-" rev)))
        (setq buffer-file-name (expand-file-name name project))
        (rename-buffer (file-name-nondirectory name)))
      (read-only-mode t)))

  (magit-define-popup-action 'magit-dispatch-popup
    ?Z "Open" 'shark-bytes/open-git-file ?!)
  (define-key magit-status-mode-map
    "Z" 'shark-bytes/open-git-file))
#+end_src

***** Automatically commit changes to WIP branches
#+begin_src emacs-lisp
(with-eval-after-load "magit"
  (magit-wip-after-save-mode))
#+end_src

**** [[https://github.com/Artawower/blamer.el][Show git commit information inline]]
#+begin_src emacs-lisp
(use-package blamer
  :custom
  (blamer--overlay-popup-position 'smart)
  (blamer-idle-time 0.3)
  (blamer-max-commit-message-length 30)
  (blamer-max-lines 100)
  :config
  (defun shark-bytes/blamer-set-foreground-color (_ _ _ date _ &optional _ _)
    "Set foreground color according to commit age."
    (set-face-attribute 'blamer-face nil :foreground (shark-bytes/get-commit-age-color date)))
  (advice-add 'blamer--format-commit-info :before #'shark-bytes/blamer-set-foreground-color)
  (global-blamer-mode 1))
#+end_src

**** [[https://github.com/pidu/git-timemachine][Switch to previous version]]
#+begin_src emacs-lisp
(use-package git-timemachine
  :straight (git-timemachine
             :type git
             :host nil
             :repo "https://codeberg.org/pidu/git-timemachine"
             :build t)
  :custom (git-timemachine-abbreviation-length 8))
#+end_src

**** [[https://github.com/jwiegley/git-undo-el][Git undo]]
#+begin_src emacs-lisp
(use-package git-undo
  :straight (git-undo
             :type git
             :host github
             :repo "jwiegley/git-undo-el"))
#+end_src

**** [[https://github.com/defunkt/gist.el][Gist support]]
#+begin_src emacs-lisp
(use-package gist
  :custom (gist-ask-for-description t))
#+end_src

**** [[github:magit/git-modes][Config file support]]
#+begin_src emacs-lisp
(use-package git-modes)
#+end_src

**** [[https://github.com/sei40kr/gitignore-snippets][Snippets]]
#+begin_src emacs-lisp
(use-package gitignore-snippets
  :config (gitignore-snippets-init))
#+end_src

**** Show contributors
#+begin_src emacs-lisp
(defun shark-bytes/get-contributor-info (files &optional start end)
  "Get contributor information for file(s) or region."
  (let ((lines (if (and start end)
                   (format "-L %d,%d" (line-number-at-pos start t) (line-number-at-pos end t))
                 ""))
        (contributor-list)
        (linecount 0)
        (output "Contributors:\n"))
    (setq contributor-list (sort (dolist (file files contributor-list)
                                   (dolist (entry (split-string (shell-command-to-string (concat "git blame " lines " --line-porcelain " file))
                                                                "\n"
                                                                t))
                                     (when (string-match (rx bol "author " (group (+ any))) entry)
                                       (let* ((contributor (match-string 1 entry))
                                              (count (alist-get contributor contributor-list 0 nil 'string=)))
                                         (setf (alist-get contributor contributor-list 0 nil 'string=) (1+ count)))
                                       (setq linecount (1+ linecount)))))
                                 (lambda (first second) (> (cdr first) (cdr second)))))
    (dolist (entry contributor-list output)
      (setq output (format "%s    %s (%d%%)\n" output (car entry) (/ (* (cdr entry) 100) linecount))))
    (concat output "\n")))

(defun shark-bytes/get-change-info (files &optional start end)
  "Get last change date for file(s) or region."
  (let ((changes (sort (mapcar (lambda (file)
                                 (split-string (shell-command-to-string (concat "git log -1 "
                                                                                (if (and start end)
                                                                                    (format "-L %d,%d" (line-number-at-pos start t) (line-number-at-pos end t))
                                                                                  "")
                                                                                " --format=\"%aI; %an, %ar ◉ %s\" -- "
                                                                                file))
                                               ";"))
                               files)
                       (lambda (first second) (> (iso8601-parse (car first) (iso8601-parse (car second))))))))
    (propertize (cadar changes) 'face `(:foreground ,(shark-bytes/get-commit-age-color (caar changes))))))

(defun shark-bytes/show-contributor-info (files position type &optional start end)
  "Show contributor information."
  (remove-overlays nil nil type t)
  (let ((overlay (make-overlay position position))
        (text (concat (shark-bytes/get-contributor-info files start end)
                      (shark-bytes/get-change-info files start end))))
    (add-face-text-property 0 (length text) `(:family ,(face-attribute 'shark-bytes-ui :family) :background ,shark-bytes-menu-window-background :extend t) nil text)
    (overlay-put overlay 'before-string text)
    (overlay-put overlay type t)))

(defun shark-bytes/show-project-contributor-info ()
  "Show contributor information for current project."
  (interactive)
  (let* ((backend (vc-deduce-backend))
         (project-root (when backend
                         (ignore-errors (vc-call-backend backend 'root default-directory))))
         (default-directory project-root))
    (when project-root
      (shark-bytes/show-contributor-info (mapcar (lambda (file)
                                             (expand-file-name file project-root))
                                           (split-string (shell-command-to-string (concat "git ls-files --full-name")) "\n" t))
                                   (save-excursion
                                     (save-restriction
                                       (point-min)))
                                   'shark-bytes/project-contributor-info))))

(defun shark-bytes/show-file-contributor-info ()
  "Show contributor information for current file."
  (interactive)
  (when (and buffer-file-name
             (vc-state buffer-file-name)
             (not (string-equal (vc-state buffer-file-name) 'unregistered)))
    (shark-bytes/show-contributor-info `(,buffer-file-name)
                                 (save-excursion
                                   (save-restriction
                                     (point-min)))
                                   'shark-bytes/show-file-contributor-info)))

(defun shark-bytes/show-region-contributor-info ()
  "Show contributor information for current region. If no region is selected, defaults to current function"
  (interactive)
  (when (and buffer-file-name
             (vc-state buffer-file-name)
             (not (string-equal (vc-state buffer-file-name) 'unregistered)))
    (let ((start (if (region-active-p)
                     (region-beginning)
                   (save-excursion
                     (save-restriction
                       (funcall shark-bytes/beginning-of-function)
                       (point)))))
          (end (if (region-active-p)
                   (region-end)
                 (save-excursion
                   (save-restriction
                     (funcall shark-bytes/end-of-function)
                     (point))))))
      (shark-bytes/show-contributor-info `(,buffer-file-name)
                                   (save-excursion
                                     (save-restriction
                                       (goto-char start)
                                       (line-beginning-position)))
                                   'shark-bytes/region-contributor-info
                                   start
                                   end))))

(add-hook 'find-file-hook 'shark-bytes/show-file-contributor-info)
(add-hook 'after-save-hook 'shark-bytes/show-file-contributor-info)
(add-hook 'magit-post-commmit-hook 'shark-bytes/show-file-contributor-info)
(add-hook 'magit-post-refresh-hook 'shark-bytes/show-file-contributor-info)
#+end_src

*  Viewer
** Web pages
*** Imenu integration
#+begin_src emacs-lisp
(defun shark-bytes/imenu-eww-headings ()
    "Add HTML headings to imenu."
    (let ((faces '(shr-h1 shr-h2 shr-h3 shr-h4 shr-h5 shr-h6 shr-heading)))
      (save-excursion
        (save-restriction
          (widen)
          (goto-char (point-min))
          (cl-loop for next-pos = (next-single-property-change (point) 'face)
                   while next-pos
                   do (goto-char next-pos)
                   for face = (get-text-property (point) 'face)
                   when (cl-typecase face
                          (list (cl-intersection face faces))
                          (symbol (member face faces)))
                   collect (cons (buffer-substring (point-at-bol) (point-at-eol)) (point))
                   and do (forward-line 1))))))

(add-hook 'eww-mode-hook (lambda ()
                           (setq-local imenu-create-index-function #'shark-bytes/imenu-eww-headings)))
#+end_src

** Man Pages
#+begin_src emacs-lisp
(setq woman-fill-frame t
      woman-imenu t
      woman-use-topic-at-point t
      woman-use-topic-at-point-default t)
#+end_src

** Info Pages
Hide info buffer in buffer list
#+begin_src emacs-lisp
(with-eval-after-load "consult"
  (push "\\`\\*info\\*\\'" consult-buffer-filter))
#+end_src

*** [[https://github.com/ubolonton/info-colors][Add extra coloring]]
#+begin_src emacs-lisp
(use-package info-colors
  :hook (Info-selection . info-colors-fontify-node))
#+end_src

** [[https://github.com/politza/pdf-tools][PDF]]
#+begin_src emacs-lisp
(use-package pdf-tools
  :after (popwin)
  :ensure-system-package (poppler-devel poppler-glib-devel)
  :bind (:map pdf-view-mode-map ("q" . kill-this-buffer))
  :mode ("\\.pdf\\'" . pdf-view-mode)
  :hook (pdf-view-mode . pdf-view-midnight-minor-mode)
  :custom
  (pdf-info-epdfinfo-program "/usr/local/bin/epdfinfo")
  (pdf-view-display-size 'fit-page)
  (pdf-annot-activate-created-annotations t)
  (pdf-view-resize-factor 1.1)
  (pdf-view-midnight-colors `(,(face-attribute 'default :foreground) . ,(face-attribute 'default :background)))
  :config
  (push '("%PDF" . pdf-view-mode) magic-mode-alist)
  (pdf-tools-install t t t)
  (push "\\.pdf\\'" shark-bytes/no-hexedit-extensions)
  (push '("*PDF-Metadata*" :width 60 :position right :noselect t :stick t) popwin:special-display-config)
  (advice-add 'pdf-view-mode :before (lambda (&rest arguments)
                                       (nlinum-mode -1))))
#+end_src

[[https://github.com/nicolaisingh/saveplace-pdf-view][Save last position]]
#+begin_src emacs-lisp
(use-package saveplace-pdf-view
  :after pdf-tools doc-view)
#+end_src

** Doc-View
#+begin_src emacs-lisp
(require 'doc-view)

(setq doc-view-continuous t
      doc-view-scale-internally nil)

(define-key doc-view-mode-map (kbd "q") 'doc-view-kill-proc-and-buffer)
#+end_src

*** ODF
#+begin_src emacs-lisp
(push '("\\.odt\\'" . doc-view-mode) auto-mode-alist)
(push "\\.odt\\'" shark-bytes/no-hexedit-extensions)
#+end_src

*** DOC
#+begin_src emacs-lisp
(push '("\\.doc\\'" . doc-view-mode) auto-mode-alist)
(push "\\.doc\\'" shark-bytes/no-hexedit-extensions)
#+end_src

*** DVI
#+begin_src emacs-lisp
(push '("\\.dvi\\'" . doc-view-mode) auto-mode-alist)
(push "\\.dvi\\'" shark-bytes/no-hexedit-extensions)
#+end_src

*** Postscript
#+begin_src emacs-lisp
(push '("\\.ps\\'" . doc-view-mode) auto-mode-alist)
(push "\\.ps\\'" shark-bytes/no-hexedit-extensions)
#+end_src

** [[https://github.com/doublep/logview][System Logs]]
#+begin_src emacs-lisp
(use-package logview
  :mode "\\.log\\'"
  :hook (logview-mode . (lambda()
                          (auto-revert-tail-mode)
                          (read-only-mode)))
  :custom (logview-auto-revert-mode 'auto-revert-tail-mode))
#+end_src

** STrace Logs
#+begin_src emacs-lisp
(use-package strace-mode)
#+end_src

** Certificates
#+begin_src emacs-lisp
(defvar certificate-mode-font-lock-keywords
  '(("^\\(-----[^-]*-----\\)"
     (1 font-lock-comment-face)))
  "Highlight rules for `certificate-mode'.")

(define-derived-mode certificate-mode text-mode "Certificate-Mode"
  "A major mode for viewing certificate files."
  (setq-local comment-start "-----")
  (setq-local comment-end "-----")
  (setq-local comment-start-skip "-----")
  (setq-local comment-end-skip "-----")
  (setq-local font-lock-defaults '(certificate-mode-font-lock-keywords))

  (setq-local outline-regexp "-----"))

(push '("-----BEGIN CERTIFICATE-----" . certificate-mode) magic-mode-alist)

(define-key certificate-mode-map (kbd "q") 'shark-bytes/kill-default-buffer)

(provide 'certificate-mode)

(defun shark-bytes/show-certificate-info ()
  "Show certificate information"
  (remove-overlays  nil nil 'shark-bytes/certificate-info t)
  (let* ((begin (save-excursion
                  (save-restriction
                    (point-min))))
         (overlay (make-overlay begin begin)))
    (overlay-put overlay 'before-string (replace-regexp-in-string "issuer=" "  "
                                                                  (replace-regexp-in-string "subject=" "  "
                                                                                            (replace-regexp-in-string "notBefore=" "  "
                                                                                                                      (replace-regexp-in-string "notAfter=" "  "
                                                                                                                                                (replace-regexp-in-string "SHA1 Fingerprint=" "  "
                                                                                                                                                                          (concat (shell-command-to-string (concat "openssl x509 -in '" buffer-file-name "' -noout -issuer -subject -dates -fingerprint")) "\n")))))))
    (overlay-put overlay 'shark-bytes/certificate-info t)))

(add-hook 'certificate-mode-hook '(lambda ()
                                    (shark-bytes/show-certificate-info)
                                    (read-only-mode)))
#+end_src

*  Org-Mode
#+begin_src emacs-lisp
(use-package org
  :after (consult rainbow-mode); popwin)
  :mode ("\\.org\\'" . org-mode)
  :bind (("C-c l" . org-store-link))
  :custom
  (org-blank-before-new-entry '((heading . t)))
  (org-catch-invisible-edits 'error)
  (org-columns-default-format "%50ITEM(Task) %2PRIORITY %10Effort(Effort){:} %10CLOCKSUM")
  (org-cycle-separator-lines 0)
  (org-duration-format 'h:mm)
  (org-ellipsis " ")
  (org-enforce-todo-checkbox-dependencies t)
  (org-enforce-todo-dependencies t)
  (org-extend-today-until 3)
  (org-fast-tag-selection-single-key t)
  (org-global-properties '((Effort_ALL . "0:00 0:10 0:30 1:00 2:00 4:00 8:00 16:00 24:00 40:00 80:00")))
  (org-hide-emphasis-markers t)
  (org-highlight-latex-and-related '(native latex script entities))
  (org-imenu-depth 10)
  (org-image-actual-width t)
  (org-indent-indentation-per-level shark-bytes/default-indentation)
  (org-log-redeadline 'time)
  (org-log-reschedule 'time)
  (org-log-into-drawer t)
  (org-outline-path-complete-in-steps nil)
  (org-pretty-entities t)
  (org-refile-targets '((nil . (:maxlevel . 6))
                        (org-agenda-files . (:maxlevel . 5))))
  (org-refile-use-outline-path 'file)
  (org-refile-allow-creating-parent-nodes 'confirm)
  (org-src-fontify-natively t)
  (org-hidden-keywords '(title author date email))
  (org-fontify-done-headline t)
  (org-fontify-quote-and-verse-blocks t)
  (org-fontify-whole-heading-line t)
  (org-remove-highlights-with-change t)
  (org-return-follows-link t)
  (org-special-ctrl-a/e nil)
  (org-special-ctrl-k nil)
  (org-src-preserve-indentation t)
  (org-src-tab-acts-natively t)
  (org-src-window-setup 'current-window)
  (org-startup-with-inline-images t)
  (org-startup-folded nil)
  (org-startup-indented t)
  (org-support-shift-select t)
  (org-use-sub-superscripts '{})
  (org-use-speed-commands t)
  (org-yank-adjusted-subtrees t)
  :config
  (font-lock-add-keywords 'org-mode `(("^[ \t]*\\(?:[-+*]\\|[0-9]+[).]\\)[ \t]+\\(\\(?:\\[@\\(?:start:\\)?[0-9]+\\][ \t]*\\)?\\[\\(?:X\\|\\([0-9]+\\)/\\2\\)\\][^\n]*\n\\)" 1 'org-headline-done prepend)) 'append)
  (add-hook 'org-mode-hook #'org-update-all-dblocks)
  (push "\\`\\*Org Agenda\\*\\'" consult-buffer-filter)
  (defun shark-bytes/org-update-all-dblocks ()
    "Update all dynamic blocks in org-mode."
    (when (equal major-mode 'org-mode)
      (org-update-all-dblocks)))
)
#+end_src

** Unhide org items to edit
#+begin_src emacs-lisp
(use-package org-appear
  :hook org-mode
  :custom
  (org-appear-autoemphasis t)
  (org-appear-autolinks t)
  (org-appear-autosubmarkers t)
  (org-appear-autoentities t)
  (org-appear-autokeywords t))
#+end_src

** Priorities
#+begin_src emacs-lisp
(defface org-priority-high '((t :inherit default)) "Face used for high priority." :group 'org)
(defface org-priority-medium '((t :inherit default)) "Face used for medium priority." :group 'org)
(defface org-priority-low '((t :inherit default)) "Face used for low priority." :group 'org)

(setq org-priority-faces '((?A . org-priority-high)
                           (?B . org-priority-medium)
                           (?C . org-priority-low)))
#+end_src

** Tangling
#+begin_src emacs-lisp
(use-package org-auto-tangle
  :hook (org-mode . org-auto-tangle-mode))
#+end_src

** Lists
*** Automatically create lists
#+begin_src emacs-lisp
(use-package org-autolist
  :after org
  :hook (org-mode . org-autolist-mode))

*** Hide stars for header items
#+BEGIN_SRC emacs-lisp
(use-package org-superstar
  :after org
  :hook (org-mode . (lambda () (org-superstar-mode 1)))
  :custom
  (org-superstar-headline-bullets-list '(""))
  (org-superstar-leading-bullet ?\s)
  (org-superstar-item-bullet-alist '((?* . ?•)
                                     (?+ . ?•)
                                     (?- . ?•)))
  (org-superstar-special-todo-items t))
#+end_src

** Use current heading as function name
#+begin_src emacs-lisp
(defun shark-bytes/org-log-current-defun ()
  (save-excursion
    (let ((defun (org-get-heading t t t t)))
      (if (string-match org-link-bracket-re defun)
          (match-string 2 defun)
        defun))))

(add-hook 'org-mode-hook (lambda ()
                           (make-variable-buffer-local 'add-log-current-defun-function)
                           (setq add-log-current-defun-function 'shark-bytes/org-log-current-defun)))
#+end_src

** Links
*** [[https://orgmode.org/manual/Link-Abbreviations.html#Link-Abbreviations][Shortcuts]]
#+begin_src emacs-lisp
(push '("google" . "https://www.google.de/?gws_rd=ssl#q=%s") org-link-abbrev-alist)
(push '("wikipedia" . "https://en.wikipedia.org/wiki/%s") org-link-abbrev-alist)
(push '("github" . "https://github.com/%s") org-link-abbrev-alist)
#+end_src

*** Insertion
#+begin_src emacs-lisp
(defun shark-bytes/url-to-title (url)
  "Returns the content of the <title> tag of the page at url."
  (with-temp-buffer
    (url-insert-file-contents url)
    (beginning-of-buffer)
    (let ((begin (search-forward "<title>"))
          (end (progn
                 (search-forward "</title>")
                 (search-backward "<"))))
      (buffer-substring-no-properties begin end))))

(defun shark-bytes/shorten-url (url)
  "Shorten URL if in 'org-link-abbrev-alist'."
  (mapc #'(lambda (entry)
            (let ((prefix (format (cdr entry) "")))
              (when (string-match (concat (regexp-quote prefix) ".*") url)
                (setq url (concat (car entry) ":" (replace-regexp-in-string (regexp-quote prefix) "" url))))))
        org-link-abbrev-alist)
  url)

(defun shark-bytes/org-insert-link-dwim (url)
  "Insert an org link with the target page title as description. The URL is taken from either argument, region, thing-at-point or user input."
  (interactive (list (let (url begin end)
                       (if (region-active-p)
                           (setq begin (region-beginning)
                                 end (region-end)
                                 url (buffer-substring-no-properties begin end))
                         (progn
                           (setq url (thing-at-point 'url))
                           (if (not (= 0 (length url)))
                               (let ((bounds (bounds-of-thing-at-point 'url)))
                                 (setq begin (car bounds)
                                       end (cdr bounds)))
                             (let ((bounds (bounds-of-thing-at-point 'word)))
                               (setq url (if (string-match-p "^http" (current-kill 0))
                                             (current-kill 0)
                                           (read-string "URL: "))
                                     begin (car bounds)
                                     end (cdr bounds))))))
                       (when (and begin
                                  end)
                         (delete-region begin end))
                       url)))
  (when (not (string-match-p (rx line-start "http" (zero-or-one "s") "://") url))
      (setq url (concat "https://" url)))
  (org-insert-link nil (shark-bytes/shorten-url url) (shark-bytes/url-to-title url)))

(defun shark-bytes/org-convert-to-link-dwim (url title)
  "Convert the region or thing-at-point to a link with thing-at-point as the description."
  (interactive (list (read-string "URL: " "http://www.")
                     (let (title begin end)
                       (if (region-active-p)
                           (setq begin (region-beginning)
                                 end (region-end)
                                 title (buffer-substring-no-properties begin end))
                         (let* ((bounds (bounds-of-thing-at-point 'word)))
                           (setq title (buffer-substring-no-properties (car bounds) (cdr bounds))
                                 begin (car bounds)
                                 end (cdr bounds)))
                         (delete-region begin end)
                         title))))
  (org-insert-link nil url title))
#+end_src

** Inline code
*** Auto-save
#+begin_src emacs-lisp
(setq org-edit-src-auto-save-idle-delay super-save-idle-duration)
#+end_src

*** Allow evaluation
Disable evaluation confirmation for some languages
#+begin_src emacs-lisp
(defun shark-bytes/org-confirm-babel-evaluate (lang body)
  "Do not confirm evaluation for these languages."
  (not (or (string= lang "bash")
           (string= lang "calc")
           (string= lang "dot")
           (string= lang "gnuplot")
           (string= lang "latex")
           (string= lang "emacs-lisp")
           (string= lang "plantuml")
           (string= lang "python")
           (string= lang "sed")
           (string= lang "shell")
           (string= lang "zsh"))))
#+end_src

Note: For this to work, Org must be version 8.3 or higher. Org is bundled with emacs and must be updated manually from the repository.
#+begin_src emacs-lisp
(org-babel-do-load-languages 'org-babel-load-languages
                             '((calc . t)
                               (dot . t)
                               (gnuplot . t)
                               (latex . t)
                               (lisp . t)
                               (plantuml . t)
                               (python . t)
                               (sed . t)
                               (shell . t)))

(setq org-confirm-babel-evaluate 'shark-bytes/org-confirm-babel-evaluate)
(org-babel-shell-initialize)
(add-hook 'org-babel-after-execute-hook 'org-display-inline-images)
#+end_src

*** Set file name for edit buffer
#+begin_src emacs-lisp
(defadvice org-edit-src-code (around set-buffer-file-name activate compile)
  (let ((file-name (buffer-file-name)))
    ad-do-it
    (setq buffer-file-name file-name)))
#+end_src

*** Support Dockerfiles
#+begin_src emacs-lisp
(use-package ob-docker-build
  :after org
  :ensure-system-package podman
  :straight (ob-docker-build
             :type git
             :host github
             :repo "ifitzpat/ob-docker-build")
  :config
  (add-to-list 'org-babel-load-languages '(docker-build . t))
  (org-babel-do-load-languages 'org-babel-load-languages org-babel-load-languages))
#+end_src

** Structure Templates
#+begin_src emacs-lisp
(setq org-structure-template-alist '(("a" . "ascii")
                                     ("b" . "src bash")
                                     ("*" . "src calc")
                                     ("c" . "center")
                                     ("+" . "src c++")
                                     ("d" . "src dot :file :cmdline -Kdot -Tpng")
                                     ("e" . "example")
                                     ("h" . "html")
                                     ("l" . "src emacs-lisp")
                                     ("p" . "src gnuplot :file")
                                     ("/" . "comment")
                                     ("q" . "quote")
                                     ("r" . "src")
                                     ("s" . "src shell")
                                     ("u" . "src plantuml :file ")
                                     ("v" . "verbatim")
                                     ("z" . "src zsh")))
#+end_src

** TODO-States
#+begin_src emacs-lisp
(setq shark-bytes/org-todo-keyword-todo "ToDo"
      shark-bytes/org-todo-keyword-done "Done"
      shark-bytes/org-todo-keyword-bug "Bug"
      shark-bytes/org-todo-keyword-analysis "Analysis"
      shark-bytes/org-todo-keyword-correction "Correction"
      shark-bytes/org-todo-keyword-fixed "Fixed"
      shark-bytes/org-todo-keyword-fixme "Fixme"
      shark-bytes/org-todo-keyword-in-progress "InProgress"
      shark-bytes/org-todo-keyword-waiting "Waiting"
      shark-bytes/org-todo-keyword-suspended "Suspended"
      shark-bytes/org-todo-keyword-review "Review"
      shark-bytes/org-todo-keyword-canceled "Canceled"
      org-todo-keywords `((sequence ,(concat shark-bytes/org-todo-keyword-todo "(t)")
                                    ,(concat shark-bytes/org-todo-keyword-in-progress "(p!)")
                                    ,(concat shark-bytes/org-todo-keyword-review "(r!/@)")
                                    "|"
                                    ,(concat shark-bytes/org-todo-keyword-done "(d!/@)"))
                          (sequence ,(concat shark-bytes/org-todo-keyword-bug "(b)")
                                    ,(concat shark-bytes/org-todo-keyword-analysis "(a!/@)")
                                    ,(concat shark-bytes/org-todo-keyword-correction "(c!)")
                                    "|"
                                    ,(concat shark-bytes/org-todo-keyword-fixed "(f!/@)"))
                          (sequence ,(concat shark-bytes/org-todo-keyword-fixme "(m)")
                                    "|"
                                    ,(concat shark-bytes/org-todo-keyword-done "(f/@)"))
                          (sequence ,(concat shark-bytes/org-todo-keyword-waiting "(w@/!)")
                                    ,(concat shark-bytes/org-todo-keyword-suspended "(s@/!)"))
                          (sequence "|" ,(concat shark-bytes/org-todo-keyword-canceled "(x@/@)"))))
#+end_src

Format according to the state.
#+begin_src emacs-lisp
(defface org-todo-keyword-todo '((t :inherit default)) "Face used for todo items." :group 'org)
(defface org-todo-keyword-in-progress '((t :inherit default)) "Face used for in-progress items." :group 'org)
(defface org-todo-keyword-waiting '((t :inherit default)) "Face used for waiting items." :group 'org)
(defface org-todo-keyword-suspended '((t :inherit default)) "Face used for suspended items." :group 'org)
(defface org-todo-keyword-done '((t :inherit default)) "Face used for done items." :group 'org)
(defface org-todo-keyword-canceled '((t :inherit default)) "Face used for canceled items." :group 'org)

(setq org-todo-keyword-faces `((,shark-bytes/org-todo-keyword-todo . org-todo-keyword-todo)
                               (,shark-bytes/org-todo-keyword-done . org-todo-keyword-done)
                               (,shark-bytes/org-todo-keyword-bug . org-todo-keyword-todo)
                               (,shark-bytes/org-todo-keyword-analysis . org-todo-keyword-in-progress)
                               (,shark-bytes/org-todo-keyword-correction . org-todo-keyword-in-progress)
                               (,shark-bytes/org-todo-keyword-fixed . org-todo-keyword-done)
                               (,shark-bytes/org-todo-keyword-fixme . org-todo-keyword-todo)
                               (,shark-bytes/org-todo-keyword-in-progress . org-todo-keyword-in-progress)
                               (,shark-bytes/org-todo-keyword-review . org-todo-keyword-in-progress)
                               (,shark-bytes/org-todo-keyword-waiting . org-todo-keyword-waiting)
                               (,shark-bytes/org-todo-keyword-suspended . org-todo-keyword-suspended)
                               (,shark-bytes/org-todo-keyword-canceled . org-todo-keyword-canceled)))

(with-eval-after-load "org-superstar"
  (setq org-superstar-todo-bullet-alist `((,shark-bytes/org-todo-keyword-todo . ?)
                                          (,shark-bytes/org-todo-keyword-done . ?)
                                          (,shark-bytes/org-todo-keyword-bug . ?)
                                          (,shark-bytes/org-todo-keyword-analysis . ?)
                                          (,shark-bytes/org-todo-keyword-correction . ?)
                                          (,shark-bytes/org-todo-keyword-fixed . ?)
                                          (,shark-bytes/org-todo-keyword-fixme . ?)
                                          (,shark-bytes/org-todo-keyword-in-progress . ?)
                                          (,shark-bytes/org-todo-keyword-waiting . ?)
                                          (,shark-bytes/org-todo-keyword-suspended . ?🛌)
                                          (,shark-bytes/org-todo-keyword-review . ?)
                                          (,shark-bytes/org-todo-keyword-canceled . ?🚫)))
   (org-superstar-restart))
#+end_src

Archive when done, remove flag if reset to todo.
#+begin_src emacs-lisp
(setq org-archive-mark-done nil
      org-archive-location "%s_archive::* Archived")
#+end_src

** Prettify symbols
#+begin_src emacs-lisp :tangle no
(defun shark-bytes/enable-org-mode-prettification ()
  "Enable prettification of org-mode elements."
  (interactive)
  (push '("[#A]" . ?) prettify-symbols-alist)
  (push '("[#B]" . ?) prettify-symbols-alist)
  (push '("[#C]" . ?⏾) prettify-symbols-alist)
  (push '("[ ]" . ?) prettify-symbols-alist)
  (push '("[X]" . ?) prettify-symbols-alist)
  (push '("[-]" . ?) prettify-symbols-alist)
  (push '("#+begin_src" . ?) prettify-symbols-alist)
  (push '("#+end_src" . ?) prettify-symbols-alist)
  (push '("#+results" . ?⇒) prettify-symbols-alist)
  (push '("#+begin_example" . ?﬒) prettify-symbols-alist)
  (push '("#+end_example" . ?﬒) prettify-symbols-alist)
  (push '("#+begin_html" . ?爵) prettify-symbols-alist)
  (push '("#+end_html" . ?爵) prettify-symbols-alist)
  (push '("#+begin_quote" . ?“) prettify-symbols-alist)
  (push '("#+end_quote" . ?”) prettify-symbols-alist)
  (push '("#+begin_verbatim" . ?) prettify-symbols-alist)
  (push '("#+end_verbatim" . ?) prettify-symbols-alist)
  (push '(":LOGBOOK:" . ?) prettify-symbols-alist)
  (push '("#+BEGIN:" . ?⌜) prettify-symbols-alist)
  (push '("#+END:" . ?⌞) prettify-symbols-alist)
  (push '("#+CAPTION:" . ?🗩) prettify-symbols-alist)
  (push '(":END:" . ?⌞) prettify-symbols-alist)
  (push '("CLOCK:" . ?) prettify-symbols-alist)
  (push '("clocktable" . ?) prettify-symbols-alist)
  (push '("\\_" . ?⮩) prettify-symbols-alist)
  (prettify-symbols-mode))

(add-hook 'org-mode-hook #'shark-bytes/enable-org-mode-prettification)
#+end_src

** Capture Templates
#+begin_src emacs-lisp
(with-eval-after-load "org"
  (defun shark-bytes/select-agenda-file (name)
  "Select a customer agenda file."
  (if-let ((file (shark-bytes/agenda-file (shark-bytes/project-dir) name)))
      (progn (find-file file)
             (goto-char (point-max))
             (org-capture-put-target-region-and-position)
             (widen))
    (error "No file found")))

(defun shark-bytes/select-tasks-file ()
  "Select the customer tasks file."
  (interactive)
  (shark-bytes/select-agenda-file "tasks.org"))

(defun shark-bytes/select-events-file ()
  "Select the customer events file."
  (interactive)
  (shark-bytes/select-agenda-file "events.org"))

(defun shark-bytes/select-notes-file ()
  "Select the customer notes file."
  (interactive)
  (shark-bytes/select-agenda-file "notes.org"))

(defun org-src-language-from-major-mode (local-major-mode)
  "Infer an 'org-mode' source block type from the major mode LOCAL-MAJOR-MODE."
  (car (rassq (intern (replace-regexp-in-string "-mode"
                                                ""
                                                (format "%s"
                                                        local-major-mode)))
              org-src-lang-modes)))

(setq org-capture-templates
      `(("t" "To Do" entry (function shark-bytes/select-tasks-file) ,(concat "* " shark-bytes/org-todo-keyword-todo " [#B] %?\n%U\n%i\n") :empty-lines 1 :kill-buffer t)
        ("p" "Priority To Do" entry (function shark-bytes/select-tasks-file) ,(concat "* " shark-bytes/org-todo-keyword-todo " [#A] %?\n%T\nDEADLINE: %t\n%i\n") :empty-lines 1 :kill-buffer t)
        ("b" "Bug" entry (function shark-bytes/select-tasks-file) ,(concat "* " shark-bytes/org-todo-keyword-bug " [#B] %?\n%U\n%i\n") :empty-lines 1 :kill-buffer t)
        ("f" "Fixme" entry (function shark-bytes/select-tasks-file) ,(concat "* " shark-bytes/org-todo-keyword-fixme " [#A] %?\n%U\nSCHEDULED: %t\nIn function *[[file:%F::%(with-current-buffer (org-capture-get :original-buffer) (number-to-string (line-number-at-pos)))][%(with-current-buffer (org-capture-get :original-buffer) (which-function))()]]*\n#+begin_src %(with-current-buffer (org-capture-get :original-buffer) (org-src-language-from-major-mode major-mode))\n%i\n#+end_src\n") :empty-lines 1 :kill-buffer t)
        ("s" "Support" entry (function shark-bytes/select-tasks-file) ,(concat "* " shark-bytes/org-todo-keyword-in-progress " [#B] %?\n%U\n%i\n") :empty-lines 1 :kill-buffer t :clock-in t :clock-keep t)
        ("n" "Note" entry (function shark-bytes/select-notes-file) "* %?\n%U\n%i\n" :empty-lines 1 :kill-buffer t)
        ("m" "Meeting" entry (function shark-bytes/select-events-file) ,(concat "* " shark-bytes/org-todo-keyword-todo " [#A] %?\n%T\n%i\n") :empty-lines 1 :kill-buffer t)
        ("i" "Instant Meeting" entry (function shark-bytes/select-events-file) ,(concat "* " shark-bytes/org-todo-keyword-in-progress " [#A] %?\ns%T\n%i\n") :empty-lines 1 :kill-buffer t :clock-in t :clock-keep t)
        ("c" "Source Code" entry (function shark-bytes/select-notes-file) ,(concat "* %?\n"
                                                                            "%U\n\n"
                                                                            "In function *[[file:%F::%(with-current-buffer (org-capture-get :original-buffer) (number-to-string (line-number-at-pos)))][%(with-current-buffer (org-capture-get :original-buffer) (which-function))()]]*\n"
                                                                            "#+begin_src %(with-current-buffer (org-capture-get :original-buffer) (org-src-language-from-major-mode major-mode))\n"
                                                                            "%i\n"
                                                                            "#+end_src\n") :empty-lines 1 :kill-buffer t)))
)
#+end_src

** Agenda
(setq org-agenda-compact-blocks t
      org-agenda-current-time-string "now ────────────────────────────────────────"
      org-agenda-deadline-faces '((0.7 . error)
                                  (0.5 . warning)
                                  (0.0 . default))
      org-agenda-files (list org-default-bugs-file
                             org-default-todos-file
                             org-default-events-file
                             org-default-notes-file)
      org-agenda-format-date "%A, %e.%m.%Y"
      org-agenda-include-diary t
      org-agenda-prefix-format '((agenda  . "  %(org-format-outline-path (org-get-outline-path)) %?-6T%?-12t")
                                 (timeline  . "  %l")
                                 (todo  . "  %(org-format-outline-path (org-get-outline-path)) %?-6T%?-12t")
                                 (tags  . "  %(org-format-outline-path (org-get-outline-path)) %?-6T")
                                 (search . "  %(org-format-outline-path (org-get-outline-path))%?-6T"))
      org-agenda-remove-tags 'prefix
      org-agenda-restore-windows-after-quit t
      org-agenda-show-all-dates nil
      org-agenda-skip-unavailable-files t
      org-agenda-skip-deadline-if-done t
      org-agenda-skip-deadline-prewarning-if-scheduled t
      org-agenda-skip-scheduled-if-done t
      org-agenda-skip-timestamp-if-done t
      org-agenda-skip-scheduled-delay-if-deadline t
      org-agenda-skip-scheduled-if-deadline-is-shown t
      org-agenda-start-on-weekday nil
      org-agenda-time-grid '((daily today require-timed)
                             (800 930 1000 1230 1300 1600 1800)
                             "──────────" "──────────")
      org-agenda-todo-keyword-format "%-14s")
#+begin_src emacs-lisp
#+end_src

*** Custom Views
#+begin_src emacs-lisp
(setq org-agenda-custom-commands '(("D" "Default agenda view"
                                    ((agenda "" ((org-agenda-skip-function '(let ((tags (save-excursion
                                                                                          (outline-back-to-heading)
                                                                                          (org-get-tags))))
                                                                              (if (or (member "Appointment" tags)
                                                                                      (member "Birthday" tags)
                                                                                      (member "Holiday" tags))
                                                                                  nil
                                                                                (org-agenda-skip-entry-if 'done 'todo `(,shark-bytes/org-todo-keyword-waiting ,shark-bytes/org-todo-keyword-suspended)))))
                                                 (org-agenda-span (if (= 5 (nth 6 (decode-time)))
                                                                      4
                                                                    2))))
                                     (todo (concat shark-bytes/org-todo-keyword-bug "|" shark-bytes/org-todo-keyword-fixme "|" shark-bytes/org-todo-keyword-analysis "|" shark-bytes/org-todo-keyword-correction "|" shark-bytes/org-todo-keyword-review)
                                           ((org-agenda-skip-function '(org-agenda-skip-entry-if 'done 'scheduled))
                                            (org-agenda-prefix-format '((todo  . "  %(org-format-outline-path (org-get-outline-path))%?-12t")))
                                            (org-agenda-overriding-header shark-bytes/org-todo-keyword-bug)
                                            (org-agenda-todo-keyword-format "")))
                                     (todo (concat shark-bytes/org-todo-keyword-todo "|" shark-bytes/org-todo-keyword-in-progress)
                                           ((org-agenda-skip-function '(org-agenda-skip-entry-if 'scheduled 'deadline 'done))
                                            (org-agenda-overriding-header shark-bytes/org-todo-keyword-todo)
                                            (org-agenda-todo-keyword-format "")))
                                     (todo shark-bytes/org-todo-keyword-waiting
                                           ((org-agenda-overriding-header shark-bytes/org-todo-keyword-waiting)
                                            (org-agenda-todo-keyword-format "")))
                                     (todo shark-bytes/org-todo-keyword-suspended
                                           ((org-agenda-overriding-header shark-bytes/org-todo-keyword-suspended)
                                            (org-agenda-todo-keyword-format "")))))
                                   ("n" "Notes" tags "+CATEGORY=\"Notes\""
                                    ((org-agenda-overriding-header "Notes")
                                     (org-agenda-prefix-format '((tags . "%(org-format-outline-path (org-get-outline-path)) ")))))
                                   ("d" "Scrum Daily Timesheet" agenda ""
                                    ((org-agenda-overriding-header "Last Day")
                                     (org-agenda-span (if (= 1 (nth 6 (decode-time)))
                                                          4
                                                        2))
                                     (org-agenda-start-day (if (= 1 (nth 6 (decode-time)))
                                                               "-3d"
                                                             "-1d"))
                                     (org-agenda-start-on-weekday nil)
                                     (org-agenda-start-with-clockreport-mode t)
                                     (org-agenda-time-grid nil)
                                     (org-agenda-include-diary nil)
                                     (org-agenda-clockreport-parameter-plist '(:scope agenda-with-archives :indent t :link t :emphasize t :tcolumns 1 :maxlevel 3 :properties ("CATEGORY") :sort (1 . ?a) :fileskip0 t :hidefiles t :formula %))))
                                   ("t" "Today's Timesheet" agenda ""
                                    ((org-agenda-overriding-header "Today")
                                     (org-agenda-span 'day)
                                     (org-agenda-start-on-weekday nil)
                                     (org-agenda-start-with-clockreport-mode t)
                                     (org-agenda-time-grid nil)
                                     (org-agenda-include-diary nil)
                                     (org-agenda-include-deadlines nil)
                                     (org-agenda-clockreport-parameter-plist '(:scope agenda-with-archives :indent t :link t :emphasize t :tcolumns 1 :maxlevel 3 :properties ("CATEGORY") :sort (1 . ?a) :fileskip0 t :hidefiles t :formula %))))
                                   ("p" "This Month's Timesheet" agenda ""
                                    ((org-agenda-overriding-header "This Month")
                                     (org-agenda-span 'month)
                                     (org-agenda-start-day (let ((time (decode-time)))
                                                             (format "%04d-%02d-01" (nth 5 time) (nth 4 time))))
                                     (org-agenda-start-on-weekday nil)
                                     (org-agenda-start-with-clockreport-mode t)
                                     (org-agenda-time-grid nil)
                                     (org-agenda-include-diary nil)
                                     (org-agenda-include-deadlines nil)
                                     (org-agenda-clockreport-parameter-plist '(:scope agenda-with-archives :indent t :link t :emphasize t :tcolumns 1 :maxlevel 3 :properties ("CATEGORY") :sort (1 . ?a) :fileskip0 t :hidefiles t :step month :stepskip0 t :formula %))))
                                   ("y" "This Year's Timesheet" agenda ""
                                    ((org-agenda-span 'year)
                                     (org-agenda-start-day (format "%04d-01-01" (nth 5 (decode-time))))
                                     (org-agenda-start-on-weekday nil)
                                     (org-agenda-start-with-clockreport-mode t)
                                     (org-agenda-time-grid nil)
                                     (org-agenda-include-diary nil)
                                     (org-agenda-include-deadlines nil)
                                     (org-agenda-clockreport-parameter-plist '(:scope agenda-with-archives :indent t :link t :emphasize t :tcolumns 1 :maxlevel 3 :properties ("CATEGORY") :sort (1 . ?a) :fileskip0 t :hidefiles t :formula %))))))
#+end_src

*** Reschedule to today
#+begin_src emacs-lisp
(defun shark-bytes/org-agenda-reschedule-to-today ()
  "Reschedule the selected item to today."
  (interactive)
  (cl-letf (((symbol-function 'org-read-date) '(lambda (&rest args)
                                                 (current-time))))
    (call-interactively 'org-agenda-schedule)))
#+end_src

** [[https://github.com/bard/org-dashboard/blob/master/org-dashboard.el][Progress Report]]
#+begin_src emacs-lisp
(require 'url)
(setq url-privacy-level 'high)

(use-package org-dashboard
  :custom (org-dashboard-omit-completed t))
#+end_src

** Alert messages
#+begin_src emacs-lisp
(use-package org-alert
  :after org
  :hook (after-make-frame-functions . (lambda (_)
                                        (org-alert-enable)))
  :custom
  (alert-default-style 'libnotify)
  (org-alert-interval 86400)
  (org-alert-notification-title "TODO"))
#+end_src

** EDiff Compatibility
(defun cpped-run-in-org-buffer (buffer command &rest arguments)
  "Execute command if given buffer is in org mode"
  (when (and buffer
             (eq (buffer-local-value 'major-mode (get-buffer buffer)) 'org-mode)
             (save-excursion
               (set-buffer buffer)
#+begin_src emacs-lisp
               (apply command arguments)))))

(defun shark-bytes/ediff-org-unfold ()
  "Unfold at diff location"
  (shark-bytes/run-in-org-buffer ediff-buffer-A 'org-reveal)
  (shark-bytes/run-in-org-buffer ediff-buffer-B 'org-reveal)
  (shark-bytes/run-in-org-buffer ediff-buffer-C 'org-reveal))

(defun shark-bytes/ediff-org-fold ()
  "Fold back to top level"
  (shark-bytes/run-in-org-buffer ediff-buffer-A 'hide-sublevels 1)
  (shark-bytes/run-in-org-buffer ediff-buffer-B 'hide-sublevels 1)
  (shark-bytes/run-in-org-buffer ediff-buffer-C 'hide-sublevels 1))

(add-hook 'ediff-select-hook 'shark-bytes/ediff-org-unfold)
(add-hook 'ediff-unselect-hook 'shark-bytes/ediff-org-fold)
#+end_src

** Magit compatibility
#+begin_src emacs-lisp
(with-eval-after-load "magit"
  (defun shark-bytes/expand-org-entry ()
  "Expand all entries leading to the selected entry."
  (when (derived-mode-p 'org-mode)
    (org-reveal '(4)))))

(add-hook 'magit-diff-visit-file-hook 'shark-bytes/expand-org-entry)
#+end_src

** Change todo state of subtree
#+begin_src emacs-lisp
(defun shark-bytes/todo-subtree ()
  "Change the todo state of a subtree."
  (interactive)
  (org-mark-subtree)
  (let ((state (org-fast-todo-selection))
        (begin (point)))
    (when state
      (save-excursion
        (exchange-point-and-mark)
        (while (> (point) begin)
          (org-todo state)
          (outline-previous-visible-heading 1))
        (org-todo state)))))
#+end_src

** Mark heading done when all subheadings are done
#+begin_src emacs-lisp
(defun shark-bytes/org-summary-change-todo (done todo)
  "Switch entry to DONE when all subentries are done, to TODO otherwise."
  (let (org-log-done org-log-states) ; turn off logging
    (org-todo (if (= todo 0)
                  shark-bytes/org-todo-keyword-done
                shark-bytes/org-todo-keyword-todo))))

(add-hook 'org-after-todo-statistics-hook 'shark-bytes/org-summary-change-todo)
#+end_src

** Mark heading done when all checkboxes are checked.
#+begin_src emacs-lisp
(defun shark-bytes/checkbox-list-complete ()
  (interactive)
  (save-excursion
    (org-back-to-heading t)
    (let ((begin (point)))
      (end-of-line)
      (when (re-search-backward "\\[\\([0-9]+%\\)\\]\\|\\[\\([0-9]+\\)/\\([0-9]+\\)\\]" begin t)
        (if (or (equal (match-string 1) "100%")
                (and (match-string 2)
                     (equal (match-string 2) (match-string 3))))
            (org-todo shark-bytes/org-todo-keyword-done)
          (org-todo shark-bytes/org-todo-keyword-todo))))))

(add-hook 'org-checkbox-statistics-hook 'shark-bytes/checkbox-list-complete)
#+end_src

** Wrap Region
#+begin_src emacs-lisp
(with-eval-after-load "wrap-region"
  (wrap-region-add-wrappers
   '(("*" "*" nil org-mode)
     ("~" "~" nil org-mode)
     ("/" "/" nil org-mode)
     ("=" "=" nil org-mode)
     ("_" "_" nil org-mode)
     ("$" "$" nil org-mode)))
  (add-hook 'org-mode-hook 'wrap-region-mode))
#+end_src

** Clocking
#+begin_src emacs-lisp
(setq org-clock-history-length 200
      org-clock-idle-time nil
      org-clock-in-resume t
      org-clock-in-switch-to-state shark-bytes/org-todo-keyword-in-progress
      org-clock-into-drawer t
      org-clock-out-remove-zero-time-clocks t
      org-clock-out-when-done t
      org-clock-persist 'history
      org-clock-persist-query-resume nil
      org-clock-auto-clock-resolution nil
      org-clock-report-include-clocking-task t)

(org-clock-persistence-insinuate)

(add-hook 'org-clock-in-hook 'org-save-all-org-buffers)
(add-hook 'org-clock-out-hook 'org-save-all-org-buffers)
#+end_src

*** Remaining work time
#+begin_src emacs-lisp
(defvar shark-bytes/show-work-time t "Whether to show work time in the sidebar.")

(defvar shark-bytes/weekly-work-days 5.5 "The number of days of work per week.")

(defun shark-bytes/daily-work-minutes (&optional customer)
  "The number of minutes of work per day."
  (/ (shark-bytes/weekly-work-minutes customer) shark-bytes/weekly-work-days))

(defun shark-bytes/weekly-work-minutes (&optional customer)
  "The number of minutes of work per week."
  (* (or (if customer
             (cdr (assoc customer shark-bytes/customer-weekly-hours))
           (apply '+ (-non-nil (mapcar 'cdr shark-bytes/customer-weekly-hours)))) 40) 60))

(defun shark-bytes/monthly-work-minutes (&optional customer)
  "The number of minutes of work per month."
  (* 4 (shark-bytes/weekly-work-minutes customer)))

(defun shark-bytes/clocked-time (range &optional customer)
  "Return the clocked time for range."
  (interactive)
  (let ((shark-bytes/clocked-time 0)
        (org-range (org-clock-special-range range))
        (files (org-agenda-files)))
    (org-agenda-prepare-buffers files)
    (dolist (file files)
      (with-current-buffer (find-buffer-visiting file)
        (setq shark-bytes/clocked-time (+ shark-bytes/clocked-time (org-clock-sum (car org-range) (cadr org-range) (lambda ()
                                                                                                                     (if customer
                                                                                                                         (string= (org-get-category) customer)
                                                                                                                       t)))))))
    shark-bytes/clocked-time))

(defun shark-bytes/remaining-work-minutes (range &optional customer clocked-time)
  "Return the remaining minutes between clocked time and work time."
  (interactive)
  (- (or clocked-time
         (shark-bytes/clocked-time range customer))
     (pcase range
       ('today (shark-bytes/daily-work-minutes customer))
       ('thisweek (shark-bytes/weekly-work-minutes customer))
       ('thismonth (shark-bytes/monthly-work-minutes customer)))))

(defun shark-bytes/format-remaining-minutes (minutes)
  "Format the remaining minutes."
  (propertize (concat (if (< minutes 0)
                          "-"
                        "+")
                      (org-duration-from-minutes (abs minutes)))
              'face
              (list ':foreground (if (< minutes 0)
                                     (face-attribute 'error :foreground)
                                   (face-attribute 'info :foreground)))))

(defun cpped-print-remaining-work-time ()
  "Return the remaining time to work today/this week/this month."
  (interactive)
  (when cpped-show-work-time
    (let ((clocked-time-today (cpped-clocked-time 'today))
          (clocked-time-this-week (cpped-clocked-time 'thisweek))
          (clocked-time-this-month (cpped-clocked-time 'thismonth)))
      (format " %s (%s/%s) 📅 %s (%s/%s) %s (%s/%s)"
              (cpped-format-remaining-minutes (cpped-remaining-work-minutes 'today clocked-time-today))
              (org-duration-from-minutes clocked-time-today)
              (org-duration-from-minutes (cpped-daily-work-minutes))
              (cpped-format-remaining-minutes (cpped-remaining-work-minutes 'thisweek clocked-time-this-week))
              (org-duration-from-minutes clocked-time-this-week)
              (org-duration-from-minutes (cpped-weekly-work-minutes))
              (cpped-format-remaining-minutes (cpped-remaining-work-minutes 'thismonth clocked-time-this-month))
              (org-duration-from-minutes clocked-time-this-month)
              (org-duration-from-minutes (cpped-monthly-work-minutes))))))
#+end_src

*** Current task
#+begin_src emacs-lisp
(defun shark-bytes/print-current-task ()
  "Return the currently clocked-in task and clocked time."
  (interactive)
  (when (org-clock-is-active)
    (format "⏱ %s%s %s"
            (org-duration-from-minutes (org-clock-get-clocked-time))
            (if org-clock-effort
                (concat "/" (org-duration-from-minutes (org-clock-effort)))
              "")
            (shark-bytes/truncate org-clock-heading 15))))
#+end_src

*** Do not show default clocking information in mode line
#+BEGIN_SRC emacs-lisp
(advice-add 'org-clock-update-mode-line :override #'force-mode-line-update)
#+END_SRC

*** Automatically stop clocking when exiting emacs.
#+begin_src emacs-lisp
(add-hook 'kill-emacs-hook '(lambda ()
                              (when (org-clock-is-active)
                                (org-clock-out))))
#+end_src

*** Automatically stop clocking when entering system suspend/lock and restart on resume/unlock
#+begin_src emacs-lisp
(defvar shark-bytes/was-clocking nil "Indicates whether it was clocked-in before screensaver ran.")

(defun shark-bytes/org-clock-in-out (stop-clocking)
  (if stop-clocking
      (progn
        (setq shark-bytes/was-clocking (org-clock-is-active))
        (org-clock-save)
        (org-clock-out))
    (shark-bytes/org-clock-in)))

(dbus-register-signal :session
                      "org.freedesktop.ScreenSaver"
                      "/org/freedesktop/ScreenSaver"
                      "org.freedesktop.ScreenSaver"
                      "ActiveChanged"
                      #'shark-bytes/org-clock-in-out)
(dbus-register-signal :system
                      "org.freedesktop.login1"
                      "/org/freedesktop/login1"
                      "org.freedesktop.login1.Manager"
                      "PrepareForSleep"
                      #'shark-bytes/org-clock-in-out)
#+end_src

*** Clock in/out of task when starting/stopping
#+begin_src emacs-lisp
(defun shark-bytes/org-clock-in-if-starting ()
  "Clock in when a task is started."
  (when (and (string= org-state shark-bytes/org-todo-keyword-in-progress)
             (not (string= org-last-state org-state)))
    (org-clock-in)))

(add-hook 'org-after-todo-state-change-hook #'shark-bytes/org-clock-in-if-starting)

(defun shark-bytes/org-clock-out-if-inactive ()
  "Clock out when a task is stopped."
  (when (and (member org-state '(shark-bytes/org-todo-keyword-done
                                 shark-bytes/org-todo-keyword-fixed
                                 shark-bytes/org-todo-keyword-waiting
                                 shark-bytes/org-todo-keyword-suspended
                                 shark-bytes/org-todo-keyword-canceled))
             (equal (marker-buffer org-clock-marker) (current-buffer))
             (< (point) org-clock-marker)
             (> (save-excursion
                  (outline-next-heading)
                  (point))
                org-clock-marker)
             (not (string= org-last-state org-state)))
    (org-clock-out)))

(add-hook 'org-after-todo-state-change-hook #'shark-bytes/org-clock-out-if-inactive)
#+end_src

*** [[https://github.com/unhammer/org-mru-clock][Switch to last used clock]]
#+begin_src emacs-lisp
(use-package org-mru-clock
  :after org
  :custom
  (org-mru-clock-how-many 100)
  (org-mru-clock-files 'org-agenda-files)
  (org-mru-clock-predicate #'org-mru-clock-exclude-done-and-archived)
  :config
  (defun shark-bytes/org-mru-clock-format-entry ()
    "Format an entry with an optional icon for org-mru-clock."
    (let* ((heading (replace-regexp-in-string org-link-bracket-re "\\2" (substring-no-properties (org-get-heading 'no-tags 'no-todo 'no-priority))))
           (category (org-get-category))
           (icon (org-agenda-get-category-icon category)))
      (concat (if icon
                  (propertize " " 'display icon)
                " ")
              "  "
              (propertize category 'invisible t)
              heading)))
  (advice-add 'org-mru-clock-format-entry :override 'shark-bytes/org-mru-clock-format-entry))
#+end_src

*** Customer journal
#+begin_src emacs-lisp
(use-package org-ql)

(defvar shark-bytes/customer-weekly-hours nil "An alist of customer names and weekly work hours.")

(defun shark-bytes/create-customer (customer)
  "Create a customer project directory and setup."
  (interactive "sName: ")
  (let ((customer-project-directory (expand-file-name customer (car shark-bytes/project-directories))))
    (make-directory customer-project-directory t)
    (mapc (lambda (file)
            (when (not (file-exists-p file))
              (with-temp-buffer
                (insert (format "#+CATEGORY: %s\n\n" customer))
                (write-file (expand-file-name file customer-project-directory)))))
        '("tasks.org" "events.org" "notes.org"))
    (when-let ((icon-url (read-string "Logo URL: "))
               (icon-file (expand-file-name ".customer.svg" customer-project-directory)))
      (url-copy-file icon-url icon-file t)
      (shark-bytes/xdg-open-with icon-file)
      (shark-bytes/add-customer-icon customer-project-directory))
    (with-temp-buffer
      (insert (format "(push '(\"%s\" . \"https://%s/%0s-%%s\") org-link-abbrev-alist)\n"
                      (read-string "Ticket ID: ")
                      (read-string "Ticket URL: ")))
      (insert (format "(push '(\"%s\" . %s) shark-bytes/customer-weekly-hours)\n"
                      customer
                      (read-number "Hours per Week: " 40)))
      (insert (format "(push (cons \"%s\" '(:range '%s :items (%s) :date-format '%s)) shark-bytes/customer-journal-options)\n"
                      customer
                      (if-let ((journal-file (read-file-name "Journal file: " "~/Documents/" nil nil (concat " " customer))))
                          (format ":file \" \"" journal-file)
                        "")
                      (completing-read "Journal Range: " '(daily weekly monthly))
                      (completing-read "Journal Date Format: " '(de_DE en_US))
                      (read-string "Journal Items: " (string-join (mapcar #'symbol-name (plist-get shark-bytes/customer-journal-default-options :items)) " "))))
      (eval-buffer)
      (write-file (expand-file-name ".customer.el" customer-project-directory)))))

(defvar shark-bytes/customer-journal-default-options '(:range daily
                                                       :date-format de_DE
                                                       :duration-format h:mm
                                                       :items (date begin end sum pause tasks)
                                                       :unlisted-tasks '(Misc Daily "Sprint Review" Refinement Retro)
                                                       :clockreport nil)
  "A list of default options for journal entries.")
(defvar shark-bytes/customer-journal-options nil "An alist of customer names and options for journal entries.")

(defun shark-bytes/load-customer-configs (&optional project-directories)
  "Load customer configurations from project directories."
  (interactive (list shark-bytes/project-directories))
  (mapc (lambda (customer-directory)
          (when-let* ((config-directory (locate-dominating-file customer-directory ".customer.el"))
                      (config (expand-file-name ".customer.el" config-directory)))
            (load config))
          (when-let* ((config-directory (locate-dominating-file customer-directory ".customer.svg"))
                      (icon (expand-file-name ".customer.svg" config-directory)))
            (add-to-list 'org-agenda-category-icon-alist `(,(file-name-nondirectory customer-directory) ,icon nil nil :width 16 :ascent center))))
        (-flatten (mapcar (lambda (directory)
                            (seq-filter #'file-directory-p (when (file-directory-p directory)
                                                             (directory-files directory t))))
                          shark-bytes/project-directories))))

(shark-bytes/load-customer-configs)

(defun shark-bytes/customer-journal-option (customer option)
  "Get OPTION value for CUSTOMER or default."
  (or (plist-get (cdr (assoc customer shark-bytes/customer-journal-options)) option)
      (plist-get shark-bytes/customer-journal-default-options option)))

(defun shark-bytes/clocked-customers (&optional range)
  "Return all customers with clocked hours in RANGE."
  (let ((range (org-clock-special-range (or range 'today))))
    (delete-dups (org-ql-select org-agenda-files
                   '(and (clocked :from ,(nth 0 range) :to ,(nth 1 range)))
                   :action #'org-get-category))))

(defun shark-bytes/format-range (range)
  "Format a time range (start - end)."
  (if (> (- (time-to-days (cdr range)) (time-to-days (car range))) 2)
      (concat (format-time-string "%x" (car range)) " – " (format-time-string "%x" (cdr range)))
    (format-time-string "%x" (car range))))

(defun shark-bytes/range-components (precision)
  "Get all date ranges in the last two months for a given PRECISION (one of 'daily, 'weekly or 'monthly)."
  (-flatten (mapcar #'(lambda (range)
                        (let* ((range-end (time-convert (nth 1 range) 'integer))
                               (start (time-convert (nth 0 range) 'integer))
                               (end start)
                               (entries))
                          (while (time-less-p end range-end)
                            (setq end (time-add start (pcase precision
                                                        ('monthly (time-subtract range-end start))
                                                        ('weekly (days-to-time (- 7 (nth 6 (decode-time start)))))
                                                        ('daily (days-to-time 1)))))
                            (when (time-less-p range-end end)
                              (setq end range-end))
                            (push (cons start end) entries)
                            (setq start end))
                          entries))
                    (list (org-clock-special-range 'thismonth) (org-clock-special-range 'lastmonth)))))

(defun shark-bytes/select-range (precision)
  "Select a date range from the last two months for a given PRECISION (one of 'daily, 'weekly or 'monthly)."
  (interactive (list (completing-read "Precision" '(daily weekly monthly))))
  (let* ((entries (mapcar #'(lambda (range)
                              (cons (shark-bytes/format-range range)
                                    range))
                          (shark-bytes/range-components precision))))
    (cdr (assoc (completing-read "Included Dates:" entries nil t (car (let ((time (time-to-seconds (current-time))))
                                                                        (car (seq-filter #'(lambda (entry)
                                                                                             (and (< (cadr entry) time) (< time (cddr entry))))
                                                                                         entries))))) entries))))

(defun shark-bytes/collect-clocking-tasks (customer &optional range)
  "Collect all clocked tasks in RANGE for CUSTOMER."
  (let ((log-range (or range (shark-bytes/select-range (shark-bytes/customer-journal-option customer :range)))))
    (-non-nil (org-ql-select org-agenda-files
                `(and (clocked :from ,(format-time-string "%F" (car log-range)) :to ,(format-time-string "%F" (cdr log-range))) (category ,customer))
                :action #'(lambda ()
                            (let ((element-end (org-element-property :end (org-element-at-point)))
                                  (range-start (time-to-seconds (car log-range)))
                                  (range-end (time-to-seconds (cdr log-range)))
                                  (task-data))
                              (while (re-search-forward org-element-clock-line-re element-end t)
                                (let ((clock-end (point)))
                                  (beginning-of-line)
                                  (let* ((clock (car (cdr (org-element-clock-parser clock-end))))
                                         (timestamp (car (cdr (plist-get clock :value))))
                                         (start-time (max range-start
                                                          (time-to-seconds (encode-time 0
                                                                                        (or (plist-get timestamp :minute-start) 0)
                                                                                        (or (plist-get timestamp :hour-start) 0)
                                                                                        (or (plist-get timestamp :day-start) 1)
                                                                                        (or (plist-get timestamp :month-start) 1)
                                                                                        (or (plist-get timestamp :year-start) 1970)))))
                                         (end-time (min range-end
                                                        (time-to-seconds (if (string-equal (plist-get clock :status) 'running)
                                                                             (current-time)
                                                                           (encode-time 0
                                                                                        (plist-get timestamp :minute-end)
                                                                                        (plist-get timestamp :hour-end)
                                                                                        (plist-get timestamp :day-end)
                                                                                        (plist-get timestamp :month-end)
                                                                                        (plist-get timestamp :year-end)))))))
                                    (when (>= end-time start-time)
                                      (setq task-data (plist-put task-data :begin (if-let ((start (plist-get task-data :begin)))
                                                                                      (min start start-time)
                                                                                    start-time)))
                                      (setq task-data (plist-put task-data :end (if-let ((end (plist-get task-data :end)))
                                                                                    (max end end-time)
                                                                                  end-time)))
                                      (setq task-data (plist-put task-data :duration (+ (or (plist-get task-data :duration) 0)
                                                                                        (- end-time start-time))))))
                                  (end-of-line)))
                              (when (plist-get task-data :duration)
                                (let ((headline (substring-no-properties (org-get-heading t t t t))))
                                  (save-match-data
                                    (setq task-data (plist-put task-data :title (if (string-match (rx "[[" (group (+ (not ":"))) ":" (group (+ (in numeric))) "][" (group (+ (not "]"))) "]]") headline)
                                                                                    (if (assoc (match-string 1 headline) org-link-abbrev-alist)
                                                                                        (format "%s-%s" (match-string 1 headline) (match-string 2 headline))
                                                                                      (match-string 3 headline))
                                                                                  headline))))))
                              task-data))))))

;;shark-bytes/org-heading-text

(defun shark-bytes/show-clocktable (customer range)
  "Display a clock table for CUSTOMER and RANGE."
  (switch-to-buffer (format "*%s %s*" customer (shark-bytes/format-range range)))
  (local-set-key (kbd "q") 'shark-bytes/kill-default-buffer)
  (erase-buffer)
  (org-dblock-write:clocktable `(:scope agenda
                                 :match ,(format "CATEGORY=\"%s\"" customer)
                                 :tstart ,(org-format-time-string "%F" (time-to-seconds (car range)))
                                 :tend ,(org-format-time-string "%F" (time-to-seconds (cdr range)))
                                 :fileskip0 t
                                 :hidefiles t
                                 :tcolumns 1
                                 :narrow ,(window-total-width)
  ;                               :emphasize t
                                 :formula %))
  (beginning-of-buffer)
  (let (kill-ring)
    (kill-line 2))
  (while (re-search-forward org-link-bracket-re nil t)
    (replace-match (concat "\\2" (make-string (+ 6 (length (match-string 1))) ? ))))
  (beginning-of-buffer)
  (while (re-search-forward "\\\\_" nil t)
    (replace-match "  "))
  (beginning-of-buffer)
  (org-pretty-table-mode)
  (read-only-mode))

(defun shark-bytes/create-journal-entry (customer)
  "Create a journal entry string of all tasks clocked today for CUSTOMER and add it to the kill ring. Open the respective customer file if defined."
  (interactive (list (completing-read "Customer: "
                                      (shark-bytes/clocked-customers 'thismonth)
                                      nil t "")))
  (let* ((system-time-locale (shark-bytes/customer-journal-option customer :date-format))
         (duration-format (shark-bytes/customer-journal-option customer :duration-format))
         (range (shark-bytes/select-range (shark-bytes/customer-journal-option customer :range)))
         (tasks (shark-bytes/collect-clocking-tasks customer range))
         (begin (if-let ((begin (-non-nil (mapcar #'(lambda (task)
                                                        (plist-get task :begin))
                                                    tasks))))
                  (apply 'min begin)
                  0))
         (end (if-let ((end (-non-nil (mapcar #'(lambda (task)
                                                    (plist-get task :end))
                                                tasks))))
                  (apply 'max end)
                0))
         (sum (if-let ((sum (-non-nil (mapcar #'(lambda (task)
                                                    (plist-get task :duration))
                                                tasks))))
                  (apply '+ sum)
                0)))
    (kill-new (string-join (mapcar #'(lambda (entry)
                                       (pcase entry
                                         ('date (format-time-string "%x" (seconds-to-time begin)))
                                         ('begin (format-time-string "%k:%M" (seconds-to-time begin)))
                                         ('end (format-time-string "%k:%M" (seconds-to-time end)))
                                         ('sum (org-duration-from-minutes (/ sum 60) 'h:mm))
                                         ('pause (org-duration-from-minutes (/ (- end begin sum) 60) 'h:mm))
                                         ('tasks (string-join (-non-nil (mapcar #'(lambda (task)
                                                                                    (when-let ((task-title (plist-get task :title)))
                                                                                      (unless (cl-member task-title (-flatten (shark-bytes/customer-journal-option customer :unlisted-tasks)) :test #'string-equal)
                                                                                        task-title)))
                                                                                tasks))
                                                              ", "))
                                         ('nil "")
                                         (_ entry)))
                                   (shark-bytes/customer-journal-option customer :items))
                           "\t"))
    (when (shark-bytes/customer-journal-option customer :clockreport)
      (shark-bytes/show-clocktable customer range))
    (when-let ((file-basename (shark-bytes/customer-journal-option customer :file)))
      (let ((process-connection-type nil))
        (start-process ""
                       nil
                       shell-file-name
                       shell-command-switch
                       (format "nohup 1>/dev/null 2>/dev/null xdg-open '%s'" (file-truename (expand-file-name (format-time-string file-basename (seconds-to-time begin)) "~/Documents"))))))))
#+end_src

*  Utilities
** System
*** [[https://github.com/tecosaur/emacs-everywhere][Use emacs for editing everywhere]]
Add global shortcut with
#+begin_src shell :tangle no
emacsclient --eval "(emacs-everywhere)"
#+end_src

#+begin_src emacs-lisp
(use-package emacs-everywhere)
#+end_src

*** Process Management
#+begin_src emacs-lisp
(setq proced-auto-update-flag t)
(setq proced-auto-update-interval 5)
(setq proced-descend t)
(setq proced-filter 'user)
(setq proced-tree-flag t)

(with-eval-after-load "consult"
  (push "\\*Proced\\*" consult-buffer-filter))
#+end_src

** Use rx syntax for regular expression builder
#+begin_src emacs-lisp
(setq reb-re-syntax 'rx)
#+end_src

** Calculator
Do not use scientific form so quickly
#+begin_src emacs-lisp
(setq calc-display-sci-low -5)
#+end_src

** Calendar
#+begin_src emacs-lisp
(use-package german-holidays
  :straight (german-holidays
             :type git
             :host github
             :repo  "rudolfochrist/german-holidays")
  :custom (calendar-holidays holiday-german-HH-holidays))
#+end_src

Required to mark events in the calendar
#+begin_src emacs-lisp
(let ((diary-file (expand-file-name "diary" user-emacs-directory)))
  (unless (file-exists-p diary-file)
      (write-region "%%(org-diary)" nil diary-file)))
#+end_src

#+begin_src emacs-lisp
(setq calendar-date-style 'european
      calendar-week-start-day 1
      european-calendar-style t
      mark-diary-entries-in-calendar t
      mark-holidays-in-calendar t
      calendar-mark-holidays-flag t
      calendar-view-holidays-initially-flag t
      calendar-mark-diary-entries-flag t
      calendar-time-display-form '(24-hours ":" minutes (and time-zone (concat " (" time-zone ")")))
      calendar-intermonth-text '(propertize (format "%2d" (car (calendar-iso-from-absolute (calendar-absolute-from-gregorian (list month day year)))))
                                            'face 'shark-bytes-ui-insignificant))
#+end_src

** GNUPlot
#+begin_src emacs-lisp
(use-package gnuplot
  :ensure-system-package gnuplot
  :mode ("\\.gnuplot\\'" . gnuplot-mode)
  :hook (gnuplot-mode . flyspell-prog-mode)
  :custom
  (gnuplot-eldoc-mode t)
  (gnuplot-image-format "svg")
  (gnuplot-inline-image-mode 'dedicated)
  (gnuplot-tab-completion t))
#+end_src

*** Documentation
#+begin_src emacs-lisp
(with-eval-after-load "devdocs-browser"
  (shark-bytes/add-apidocs 'gnuplot-mode '("gnuplot")))
#+end_src

* 🖧 Remote
** Serial Devices
#+begin_src emacs-lisp
(defcustom shark-bytes/serial-port nil "The last used serial port.")
(defcustom shark-bytes/serial-port-baudrate 115200 "The last used serial port baud rate.")

(defun shark-bytes/serial-ports ()
  "Check if a serial port is available."
  (directory-files "/dev/" nil "ttyUSB[0-9]+" t))

(defun shark-bytes/serial-terminal (port baudrate)
  (interactive (let ((ports (shark-bytes/serial-ports)))
                 (list (cond ((= (length ports) 0) nil)
                             ((= (length ports) 1) (car ports))
                             (t (completing-read "Serial Port: " (directory-files "/dev/" nil "ttyUSB[0-9]+" t) nil t shark-bytes/serial-port)))
                       (when (> (length ports) 0)
                         (completing-read "Baudrate: " '(300 600 1200 2400 4800 9600 19200 38400 57600 115200 230400 460800 576000 921600) nil nil shark-bytes/serial-port-baudrate)))))
  (if port
      (progn
        (serial-term (expand-file-name port "/dev") baudrate)
        (rename-buffer (format "*Serial Terminal %s*" port))
        (set-buffer-process-coding-system 'utf-8-unix 'utf-8-unix)
        (customize-save-variable 'shark-bytes/serial-port port)
        (customize-save-variable 'shark-bytes/serial-port-baudrate baudrate))
    (message "No serial port found.")))
#+end_src

** [[https://www.emacswiki.org/emacs/TrampMode][Network Devices]]
#+begin_src emacs-lisp
(use-package tramp
  :custom
  (tramp-adb-connect-if-not-connected t)
  (tramp-connection-properties nil)
  (tramp-connection-timeout 10)
  (tramp-default-host nil)
  (tramp-default-user "root")
  (tramp-histfile-override nil))

(defun shark-bytes/ssh-hosts (&optional file)
  "Collect SSH hosts from FILE."
  (let ((hosts '(("SUDO" . "/sudo:root@localhost:"))))
    (dolist (line (split-string (with-temp-buffer
                                  (insert-file-contents (or file
                                                            "~/.ssh/config"))
                                  (buffer-string))
                                "\n"))
      (when (string-match "Include +\\(.+\\)$" line)
        (let* ((include-argument (match-string 1 line))
               (include-file (if (file-name-absolute-p include-argument)
                                 include-argument
                               (concat (file-name-as-directory "~/.ssh") include-file))))
          (when (file-exists-p include-file)
            (setq hosts (append hosts (shark-bytes/ssh-hosts include-file))))))

      (when (string-match "[H\\|h]ost +\\(.+?\\) *$" line)
        (dolist (name (split-string (match-string 1 line)))
          (push (cons name (format "/ssh:%s:/" name)) hosts))))
    hosts))

(defun shark-bytes/remote-shell (path)
    "Tramp open shell at PATH."
    (interactive (list (let ((hosts (shark-bytes/ssh-hosts)))
                         (cdr (assoc (completing-read "Host: " hosts) hosts)))))
    (let ((default-directory path))
      (eshell)))

(defun shark-bytes/remote-dired (path)
    "Open shell at PATH."
    (interactive (list (let ((hosts (shark-bytes/ssh-hosts)))
                         (cdr (assoc (completing-read "Host: " hosts) hosts)))))
    (dired path))
#+end_src

** [[https://github.com/cjohansson/emacs-ssh-deploy][Automatic Deployment]]
#+begin_src emacs-lisp
(use-package ssh-deploy
  :commands (ssh-deploy-upload-handler
             ssh-deploy-upload-handler-forced
             ssh-deploy-diff-handler
             ssh-deploy-browse-remote-handler
             ssh-deploy-remote-changes-handler)
  :init (setq ssh-deploy-revision-folder (file-name-as-directory (expand-file-name "ssh-revisions" user-emacs-directory)))
  :custom
  (ssh-deploy-async 1)
  (ssh-deploy-async-with-threads 1)
  :config
  (dolist (variable '((ssh-deploy-root-local . stringp)
                      (ssh-deploy-root-remote . stringp)
                      (ssh-deploy-script . functionp)
                      (ssh-deploy-on-explicit-save . booleanp)
                      (ssh-deploy-async . booleanp)
                      (ssh-deploy-exclude-list . listp)))
    (put (car variable) 'safe-local-variable (cdr variable)))
  (advice-add 'ssh-deploy-rename-handler :around 'shark-bytes/post-rename))
#+end_src

** [[github:fejfighter/toolbox-tramp][Tramp support for toolbox containers]]
#+begin_src emacs-lisp
(use-package toolbox-tramp
  :straight (toolbox-tramp
             :type git
             :host github
             :repo "fejfighter/toolbox-tramp"))
#+end_src

** [[https://kubernetes-el.github.io/kubernetes-el/][Kubernetes]]
#+begin_src emacs-lisp
(use-package kubernetes
  :commands (kubernetes-overview))
#+end_src

* [[https://github.com/abo-abo/hydra][ Keybindings]]
** Quit from any context
#+begin_src emacs-lisp
(defun shark-bytes/keyboard-quit-context ()
  "Quit from any context."
  (interactive)
  (cond ((region-active-p)
         (setq saved-region-selection nil)
         (let (select-active-region-regions)
           (deactivate-mark)))
        ((eq last-command 'mode-exited) nil)
        (current-prefix-arg nil)
        ((active-minibuffer-window)
         (when (get-buffer-window "*Completions*")
           (minibuffer-hide-completions))
         (abort-recursive-edit))
        (t
         (keyboard-quit))))

(global-set-key [remap keyboard-quit] #'shark-bytes/keyboard-quit-context)
#+end_src

** Use Escape instead of C-g
#+begin_src emacs-lisp
(define-key key-translation-map (kbd "ESC") (kbd "C-g"))
#+end_src

** Smart close
#+begin_src emacs-lisp
(defun cpped-close-editor ()
  "Close the editor (either frame or emacs), depending on the current mode of operation."
  (interactive)
  (if (= (length (cl-remove-if (lambda (frame)
                                 (frame-parent frame))
                               (frame-list)))
                 1)
      (kill-emacs)
    (delete-frame)))
#+end_src

** Hydra
#+BEGIN_SRC emacs-lisp
(use-package hydra)
#+END_SRC

** Projects
#+BEGIN_SRC emacs-lisp
(defhydra cpped-hydra-projects (:exit t :hint nil)
  "
☰ Project %s(cpped-powerline-project-id)%s(let ((build-dir (cpped-build-dir)))
                                            (if build-dir
                                              (concat \"  \" build-dir)
                                             \"\"))

  _x_: Close           _v_: Clone
                     ^^_V_: Clone from GitHub
CMake                           ^^Git                           ^^Directories                ^^Shell                    ^^Other
  _o_: Load                         _g_: Status                     _/_: Project                 _#_: Project directory     _f_: Find
  _c_: Configure                    _G_: Other Project Status       _._: Current                 _:_: Current directory     _L_: Add change log entry
  _r_: Reconfigure                  _l_: Log                        _d_: Subdirectory            _B_: Build directory       _C_: Count lines of code
  _-_: Reset                                                      ^^_b_: Build                                            ^^_t_: Show ToDos
  _T_: Show target dependencies
"
  ("o" cpped-load-project)
  ("c" cpped-cmake-configure)
  ("r" cpped-cmake-reconfigure)
  ("-" cpped-cmake-reset)
  ("x" projectile-kill-buffers)
  ("T" cpped-show-target-dependencies)
  ("g" magit-status)
  ("G" magit-list-repositories)
  ("l" magit-log)
  ("v" magit-clone)
  ("/" projectile-dired)
  ("." dired-jump)
  ("d" projectile-find-dir)
  ("b" (if cmake-ide-build-dir
           (dired cmake-ide-build-dir)))

  ("#" (let ((default-directory (cpped-project-dir)))
         (if default-directory
             (helm-switch-shell))))
  (":" helm-switch-shell)
  ("B" (let ((build-dir (cpped-build-dir)))
         (when build-dir
           (let ((default-directory (cpped-cmake-build-dir)))
             (helm-switch-shell)))))
  ("t" magit-todos-list)
  ("L" add-change-log-entry)
  ("C" cpped-cloc-project)
  ("t" cpped-find-todos-in-project))

(global-set-key (kbd "C-p") #'cpped-hydra-projects/body)
#+END_SRC

** Files
#+BEGIN_SRC emacs-lisp
(defun cpped-create-scratch-buffer ()
  "Create a scratch buffer."
  (interactive)
  (switch-to-buffer (get-buffer-create "*scratch*"))
  (lisp-interaction-mode))
#+END_SRC

#+BEGIN_SRC emacs-lisp
(defun cpped-buffersize ()
  (when (not vlf-mode)
    (format " %s  %s"
     (format-mode-line " %I ")
     (save-excursion
       (goto-char (point-max))
       (format-mode-line " %l")))))
#+END_SRC

#+BEGIN_SRC emacs-lisp
(defun cpped-file-encoding ()
  (format " %s %s"
          (symbol-name (coding-system-type buffer-file-coding-system))
          (pcase (coding-system-eol-type buffer-file-coding-system)
                 (`0 "")
                 (`1 "")
                 (`2 "")
                 (_ ""))))
#+END_SRC

#+BEGIN_SRC emacs-lisp
(defhydra cpped-hydra-files (:exit t :hint nil)
  "
☰ File %s(concat (cpped-powerline-project-id) \"/\" (cpped-powerline-mode-icon 'default) \" \" (cpped-powerline-buffer-id 'default) \" \" (cpped-buffersize) \" \"  (cpped-file-encoding))

Open                             ^^Save                      ^^Close                  ^^Switch             ^^Version                    ^^Display                       ^^File                           ^^^^^^Encoding
      _o_: Open                      _s_: Save                   _x_: File                _l_: Last file       _v_: Show old version        _V_: Filter                 _<DEL>_: Delete                      ^^^^_C-d_: DOS
      _O_: From docker container     _S_: Save as                _X_: Other files         _f_: Find            _d_: Diff                    _!_: Toggle read-only mode      _m_: Rename                      ^^^^_C-u_: UNIX
      _n_: New                                                 ^^_w_: File and window                        ^^_g_: Log                     _h_: Hexadecimal mode           _D_: Diff to
      _N_: New scratch buffer        _i_: Public gist            _u_: Unused files                           ^^_G_: Autocommit-Log                                        ^^_z_: Clear content
                                   ^^_I_: Private gist           _a_: Close editor                           ^^_b_: Blame                   _6_: Decode Base64              _r_: Run command
      _j_: Header/Source                                                                                 ^^^^^^_T_: Trace lines             _&_: Encode Base64              _c_: Copy name to clipboard
      _t_: Test                      _e_: Encrypt                                                                                                                   ^^^^^^^^_._: Open directory
  _<RET>_: File under cursor                                                                                                                                      ^^^^^^^^^^_+_: Show Directory Tree
      _k_: Gist                      _F_: Toggle auto-format
"
  ("o" cpped-helm-find-files)
  ("O" docker-container-find-file)
  ("n" helm-find-files)
  ("N" cpped-create-scratch-buffer)
  ("j" helm-projectile-find-other-file :exit nil)
  ("t" projectile-toggle-between-implementation-and-test :exit nil)
  ("<RET>" helm-projectile-find-file-dwim)
  ("k" gist-list)

  ("s" save-buffer)
  ("S" cpped-save-copy)
  ("i" (when (yes-or-no-p "Upload as gist?")
         (gist-region-or-buffer)))
  ("I" (when (yes-or-no-p "Upload as private gist?")
         (gist-region-or-buffer-private)))
  ("F" (format-all-mode 'toggle))
  ("e" epa-encrypt-file)

  ("x" cpped-kill-default-buffer)
  ("X" crux-kill-other-buffers)
  ("w" kill-buffer-and-window)
  ("u" clean-buffer-list)
  ("a" cpped-close-editor)

  ("l" cpped-previous-buffer :exit nil)

  ("v" git-timemachine)
  ("d" magit-diff-buffer-file)
  ("g" magit-log-buffer-file)
  ("G" magit-log)
  ("b" magit-blame)
  ("T" magit-log-trace-definition)

  ("<DEL>" crux-delete-file-and-buffer)
  ("m" crux-rename-file-and-buffer)
  ("z" erase-buffer)
  ("r" cpped-execute-command-on-buffer-file)
  ("D" ediff-files)
  ("C-d" cpped-unix2dos)
  ("C-u" cpped-dos2unix)
  ("V" (let ((word (thing-at-point 'word)))
         (if word
             (loccur word)
           (call-interactively 'loccur))))
  ("!" (read-only-mode))
  ("h" hexl-mode)
  ("6" (base64-decode-region (point-min) (point-max)))
  ("&" (base64-encode-region (point-min) (point-max)))
  ("c" cpped-copy-file-name-to-clipboard)
  ("." dired-jump)
  ("C" cpped-cloc-file)
  ("+" treemacs-toggle))

(global-set-key (kbd "C-f") 'cpped-hydra-files/body)
(global-set-key (kbd "M-^") 'cpped-switch-buffer)

;(define-key term-raw-map (kbd "C-f") 'cpped-hydra-files/body)
#+END_SRC

** Info
#+BEGIN_SRC emacs-lisp
(defun cpped-search-github-code ()
  "Search for code on GitHub."
  (interactive)
  (eww (format "https://github.com/search?q=%s&type=Code" (or (when (region-active-p)
                                                                (buffer-substring-no-properties (region-beginning) (region-end)))
                                                              (read-string "Code: ")))))
#+END_SRC

#+BEGIN_SRC emacs-lisp
(defhydra cpped-hydra-info (:exit t :hint nil)
  "
☰ Information %s(format \"%s %s\" (cpped-print-date) (cpped-print-time))

Text                    ^^Code                                ^^Version Control               ^^System             ^^Other
  _._: Character            _d_: Documentation                    _c_: Commit Message             _p_: Processes       _t_: ToDos
  _#_: Number               _r_: References                       _b_: Blame                      _B_: Boot log        _w_: Weather
  _f_: Define               _h_: Caller hierarchy                                               ^^_S_: System log
  _x_: Translate            _m_: Member hierarchy                 _C_: Region Contributors
  _s_: Synonym              _i_: Inheritance hierarchy                                          ^^_M_: Man page
  _g_: Google                                                                                 ^^^^_I_: Info page
  _G_: Find on GitHub       _+_: Preprocess
  _o_: Preview markdown     _l_: Count lines of code
  _R_: Compare Regions      _j_: Copy JSON path

                          ^^_D_: Toggle shell documentation
"
  ("#" cpped-show-number-info)
  ("f" define-word-at-point)
  ("x" cpped-translate-word-or-region)
  ("s" synosaurus-lookup)
  ("g" helm-google-suggest)
  ("G" cpped-search-github-code)
  ("o" flymd-flyit)
  ("." what-cursor-position)
  ("R" (ediff-regions-linewise (current-buffer) (current-buffer)))

  ("d" (if (or (derived-mode-p 'asm-mode)
               (derived-mode-p 'nasm-mode))
           (call-interactively 'x86-lookup)
         (call-interactively 'devdocs-browser-open)))
  ("r" lsp-ui-peek-find-references)
  ("h" (cquery-call-hierarchy nil))
  ("m" cquery-member-hierarchy)
  ("i" cquery-inheritance-hierarchy)

  ("+" cquery-preprocess-file)
  ("l" cpped-sloccount)
  ("j" jsons-print-path)
  ("D" shelldoc-toggle-doc-window)

  ("c" git-messenger:popup-message)
  ("b" magit-blame)
  ("C" cpped-show-region-contributor-info)

  ("p" helm-top)
  ("B" journalctl-boot)
  ("S" journalctl-unit)
  ("M" helm-man-woman)
  ("I" info)

  ("t" cpped-find-todos-in-file)
  ("w" wttrin))

(global-set-key (kbd "C-ß") 'cpped-hydra-info/body)

(global-set-key (kbd "C-c m") (lambda ()
                                (interactive)
                                (popwin:display-buffer "*Messages*")))
#+END_SRC

** Navigation
#+BEGIN_SRC emacs-lisp
(defhydra cpped-hydra-flyspell (:exit nil :columns 1)
  "
☰ Spell Check
"
  ("C-y" flyspell-goto-next-error "Next error")
  ("C-c" helm-flyspell-auto-correct "Correct"))

(defhydra cpped-hydra-flycheck (:exit nil :columns 1)
"
☰ Code Check
"
  ("C-S-e" flycheck-previous-error  "Previous error")
  ("C-e" flycheck-next-error "Next error")
  ("C-w" flycheck-copy-errors-as-kill "Copy errors" :exit t)
  ("C-x" flycheck-clear "Clear errors" :exit t))

(defhydra cpped-hydra-navigation (:exit nil :hint nil)
  "
☰ Navigation

Text                           ^^Code                                 Marker                     ^^Diff                 ^^Other
   _<left>_: Left                  _C-S-s_: Previous S-EXPR          _C-S-i_: Previous instance      _C-S-h_: Previous hunk   _C-c_: Last change
  _<right>_: Right                   _C-s_: Next S-EXPR                _C-i_: Next instance          _C-h_: Next hunk         _M-c_: Select location
 _C-<left>_: Previous word             _w_: Up block                 _C-S-t_: Previous ToDo                                 ^^_C-u_: URL
_C-<right>_: Next word                 _y_: Down block                 _C-t_: Next ToDo                                     ^^_C-x_: XPath
   _<home>_: Beginning of line         _q_: Left block                   _t_: Select ToDo
    _<end>_: End of line           _C-S-f_: Beginning of function    _C-S-e_: Previous error
     _<up>_: Previous line           _C-f_: End of function            _C-e_: Next error
   _<down>_: Next line               _C-s_: Symbol declaration       _C-S-a_: Previous Annotation
   _<C-up>_: Previous paragraph      _C-m_: Function                   _C-a_: Next Annotation
 _<C-down>_: Next paragraph        _C-S-m_: Function (all buffers)
 _<C-home>_: Begining of file      _C-S-n_: Previous namespace
  _<C-end>_: End of file             _C-n_: Next namespace
    _C-S-l_: Previous list           _M-n_: Namespace
      _C-l_: Next list
      _C-j_: jump to character
      _C-l_: Line
   _C-S-c_ : Character
"
  ("<left>" left-char)
  ("<right>" right-char)
  ("C-<left>" left-word)
  ("C-<right>" right-word)
  ("<home>" crux-move-beginning-of-line)
  ("<end>" end-of-visual-line)
  ("<up>" previous-line)
  ("<down>" next-line)
  ("<C-up>" backward-paragraph)
  ("<C-down>" forward-paragraph)
  ("<C-home>" beginning-of-buffer)
  ("<C-end>" end-of-buffer)
  ("C-S-l" backward-up-list)
  ("C-l" down-list)
  ("C-j" avy-goto-char-timer :exit t)
  ("C-S-c" goto-char-preview :exit t)

  ("C-S-s" backward-sexp)
  ("C-s" forward-sexp)
  ("w" smart-up)
  ("y" smart-down)
  ("q" smart-left)
  ("d" smart-right)
  ("C-S-f" beginning-of-defun)
  ("C-f" end-of-defun)
  ("C-s" lsp-ui-peek-find-definitions :exit t)
  ("C-m" helm-imenu :exit t)
  ("C-S-m" helm-imenu-anywhere :exit t)
  ("C-S-n" outre-goto-namespace-previous)
  ("C-n" outre-goto-namespace-next)
  ("M-n" outrespace-jump-to-ns)

  ("C-S-t" hl-todo-previous)
  ("C-t" hl-todo-next)
  ("t" cpped-find-todos-in-file)
  ("C-S-e" (progn (flycheck-previous-error)
                  (cpped-hydra-flycheck/body) :exit t))
  ("C-e" (progn (flycheck-next-error)
                (cpped-hydra-flycheck/body) :exit t))
  ("C-y" (progn (flyspell-goto-next-error)
                (cpped-hydra-flyspell/body)) :exit t)
  ("C-S-a" annotate-previous-annotation)
  ("C-a" annotate-next-annotation)

  ("C-S-h" diff-hl-previous-hunk)
  ("C-h" diff-hl-next-hunk)

  ("C-c" goto-last-change :exit t)
  ("M-c" cpped-gumshow-list :exit t)
  ("C-u" cpped-jump-to-url :exit t)
  ("C-x" helm-x-path-walker :exit t))

(global-set-key (kbd "C-<left>") 'left-word)
(global-set-key (kbd "C-<right>") 'right-word)
(global-set-key (kbd "<home>") 'crux-move-beginning-of-line)
(global-set-key (kbd "<end>") 'end-of-visual-line)
(global-set-key (kbd "C-<up>") 'backward-paragraph)
(global-set-key (kbd "C-<down>") 'forward-paragraph)
(global-set-key (kbd "C-<home>") 'beginning-of-buffer)
(global-set-key (kbd "C-<end>") 'end-of-buffer)

(global-set-key (kbd "C-n") 'cpped-hydra-navigation/body)
(global-set-key (kbd "C-j") 'avy-goto-char-timer)
#+END_SRC

** Folding
#+BEGIN_SRC emacs-lisp
(defhydra cpped-hydra-fold (:exit t :columns 1)
  "
☰ Fold
"
  ("f" origami-forward-toggle-node "(un)fold")
  ("r" origami-recursive-toggle-node "(un)fold recursive")
  ("a" origami-toggle-all-nodes "(un)fold all nodes")
  ("n" cpped-narrow-or-widen-dwim "narrow/widen"))

(global-set-key (kbd "C-+") 'cpped-hydra-fold/body)
#+END_SRC

** Finding
#+BEGIN_SRC emacs-lisp
(global-set-key (kbd "C-s") 'helm-occur)
(global-set-key (kbd "C-S-s") 'shark-bytes/consult-line-preset)
#+END_SRC

** Mark
#+BEGIN_SRC emacs-lisp
(defhydra cpped-hydra-mark (:exit nil :hint nil :foreign-keys run :pre (set-mark (point)))
  "
☰ Mark

Mark                            ^^Modify                        ^^Act
  _w_: Word                         _+_: Expand region              _c_: Copy
  _W_: Rest of word                 _x_: Exchange mark and point    _d_: Delete
  _s_: S-EXPR                       _j_: Jump to character          _k_: Kill
  _f_: Function
  _n_: Namespace
  _l_: Rest of line
  _L_: Line up to here
  _b_: Everything before cursor
  _a_: Everything after cursor
  _e_: Everything
"
  ("w" (progn
         (backward-word)
         (mark-word)))
  ("W" mark-word)
  ("s" mark-sexp)
  ("f" (funcall cpped-mark-function))
  ("n" outre-highlight-ns-by-name)
  ("r" rectangle-mark-mode)
  ("+" er/expand-region)
  ("x" exchange-point-and-mark)
  ("j" avy-goto-char-timer)
  ("l" end-of-line)
  ("L" beginning-of-line)
  ("b" mark-buffer-before-point)
  ("a" mark-buffer-after-point)
  ("e" mark-whole-buffer)
  ("c" (kill-ring-save nil nil t) :exit t)
  ("d" (call-interactively #'delete-region) :exit t)
  ("k" (kill-region nil nil t) :exit t))

(global-set-key (kbd "C-SPC") #'cpped-hydra-mark/body)
#+END_SRC

** Editing
#+BEGIN_SRC emacs-lisp
(defhydra cpped-hydra-edit-case (:exit t :columns 1)
  "
☰ Change Case
"
  ("u" fix-word-upcase "Upper case")
  ("l" fix-word-downcase "Lower case")
  ("c" fix-word-capitalize "Capitalize")
  ("i" string-inflection-cycle "Change inflection" :exit nil))

(defhydra cpped-hydra-edit-insert (:exit t :hint nil)
  "
☰ Insert

Date         ^^Time         ^^Timestamp    ^^Block                    ^^Special
  _d_: local     _t_: local     _s_: local     _3_: License               _l_: Link
  _D_: ISO                    ^^_S_: ISO       _f_: File                  _u_: Unicode Character
                                         ^^^^^^_c_: Snippet               _e_: Emoji
                                         ^^^^^^_C_: Automatic snippet     _i_: UUID
                                                                  ^^^^^^^^_T_: Markdown table of contents
                                                                  ^^^^^^^^_H_: Org-mode Heading
                                                                  ^^^^^^^^_h_: Org-mode Subheading
"
  ("d" cpped-insert-date)
  ("D" cpped-insert-iso-date)
  ("t" cpped-insert-time)
  ("s" cpped-insert-timestamp)
  ("S" cpped-insert-iso-timestamp)
  ("3" legalese)
  ("f" insert-file)
  ("c" yas-insert-snippet)
  ("C" aya-expand)
  ("l" cpped-org-insert-link-dwim)
  ("u" helm-ucs :exit nil)
  ("e" emojify-insert-emoji)
  ("i" cpped-insert-uuid)
  ("T" markdown-toc-generate-or-refresh-toc)
  ("H" org-insert-heading)
  ("h" org-insert-subheading))

(defhydra cpped-hydra-edit-sort (:exit t :columns 1)
  "
☰ Sort
"
  ("L" sort-lines "Lines")
  ("l" cpped-sort-lines-case-insensitive "Lines (case insensitive)")
  ("w" sort-words "Words"))

(defhydra cpped-hydra-edit-move (:exit nil :hint nil)
  "
☰ Move

    ^^↑
    ^_w_
← _a_   _d_ →
    ^_s_
    ^^↓
"
  ("w" smart-shift-up)
  ("<up>" smart-shift-up)
  ("s" smart-shift-down)
  ("<down>" smart-shift-down)
  ("a" smart-shift-left)
  ("<left>" smart-shift-left)
  ("d" smart-shift-right)
  ("<right>" smart-shift-right))

(defhydra cpped-hydra-edit-transpose (:exit t :columns 1)
  "
☰ Transpose
"
  ("c" transpose-chars "Characters")
  ("w" (if (equal major-mode 'org-mode)
           org-transpose-words
         transpose-words) "Words")
  ("l" transpose-lines "Lines")
  ("s" transpose-sentences "Sentences")
  ("e" org-transpose-elements "Org mode elements")
  ("p" transpose-paragraphs "Paragraphs")
  ("t" org-table-transpose-table-at-point "Org mode table"))

(defhydra cpped-hydra-color (:exit nil :hint nil)
  "
☰ Modify color

Brightness ^^Saturation ^^Hue
  _b_: +       _s_: +       _h_: +
  _B_: -       _S_: -       _H_: -
"
  ("b" kurecolor-increase-brightness-by-step)
  ("B" kurecolor-decrease-brightness-by-step)
  ("s" kurecolor-increase-saturation-by-step)
  ("S" kurecolor-decrease-saturation-by-step)
  ("h" kurecolor-increase-hue-by-step)
  ("H" kurecolor-decrease-hue-by-step))

(defhydra cpped-hydra-refactor (:exit t :hint nil)
  "
☰ Refactor

Identifier    ^^Namespace
  _r_: Rename     _w_: Wrap function/region
                ^^_n_: Rename enclosing
                ^^_N_: Rename
                ^^_d_: Delete enclosing
                ^^_D_: Delete
"
  ("r" lsp-rename)
  ("w" (progn
         (when (not (region-active-p))
           (c-mark-function))
         (call-interactively 'outrespace-wrap-namespace-region)))
  ("n" outrespace-change-enclosing-ns-name)
  ("N" outrespace-change-ns-name)
  ("d" outrespace-delete-enclosing-ns)
  ("D" outrespace-delete-ns-by-name))

(defhydra cpped-hydra-edit (:exit t :hint nil)
  "
☰ Edit

                                ^^Rename           ^^Replace                     ^^Change          ^^^Format                        ^^Text             ^^Transform            ^^Code
  _d_: Duplicate                    _n_: Local         _r_: String/Regex             _c_: Case          _>_: Indentation                _t_: Translate     _6_: Encode Base64     _/_: Comment
  _D_: Duplicate & Comment                           ^^_p_: in Project               _\"_: String        _m_: Move                       _y_: Synonym       _&_: Decode Base64     _f_: Refactor
  _i_: Insert                                        ^^_G_: With previous commit     _+_: Value +       _j_: Join lines                 _l_: Spelling                           ^^_e_: Evaluate
  _'_: Quoted insert                                                             ^^^^_-_: Value -       _:_: Fill paragraph             _s_: Sort          _k_: Encrypt           _E_: Evaluate & Replace
  _R_: Remove duplicate lines                                                    ^^^^_#_: Base          _<tab>_: Spaces → Tabs          _x_: Transpose     _K_: Decrypt           _._: Suggestion
  _<_: Complete                                                                  ^^^^_!_: Flip      _<backtab>_: Tabs → Spaces
  _g_: Edit area                                                                 ^^^^_C_: Color         _=_: Align                                                            ^^^^_o_: Split org-mode code block
  ___: Overwrite Mode                                                            ^^^^_L_: To Link
  _&_: Typographic Mode

  _a_: Create Automatic snippet
"
  ("d" crux-duplicate-current-line-or-region)
  ("D" crux-duplicate-and-comment-current-line-or-region)
  ("i" cpped-hydra-edit-insert/body)
  ("'" quoted-insert)
  ("R" cpped-remove-duplicate-lines)
  ("g" (if (equal major-mode 'org-mode)
           (org-edit-special)
         (narrow-to-defun)))
  ("_" overwrite-mode)
  ("&" typo-mode)
  ("a" aya-create)

  ("n" iedit-mode)

  ("r" vr/query-replace)
  ("p" projectile-replace)
  ("G" git-undo)

  ("c" cpped-hydra-edit-case/body :exit t)
  ("\"" string-edit-at-point)
  ("#" cpped-convert-number)
  ("+" shift-number-up)
  ("-" shift-number-down)
  ("!" bool-flip-do-flip :exit nil)
  ("C" cpped-hydra-color/body :exit t)
  ("L" cpped-org-convert-to-link-dwim :exit t)

  (">" indent-tools-hydra/body :exit t)
  ("m" cpped-hydra-edit-move/body :exit t)
  ("j" cpped-join-lines)
  ("=" ialign)
  (":" (if (derived-mode-p 'prog-mode)
           (if (nth 4 (syntax-ppss))
               (fill-paragraph)
             (prog-fill))
         (fill-paragraph)))
  ("<tab>" (let* ((region (region-active-p))
                  (begin (if region
                            (region-beginning)
                          (point-min)))
                 (end (if region
                          (region-end)
                        (point-max))))
             (tabify begin end)
             (indent-region begin end)))
  ("<backtab>" (let* ((region (region-active-p))
                      (begin (if region
                                 (region-beginning)
                               (point-min)))
                      (end (if region
                               (region-end)
                             (point-max))))
                 (untabify begin end)
                 (indent-region begin end)))

  ("t" (cpped-translate-word-or-region nil t))
  ("y" synosaurus-choose-and-replace)
  ("." howdoi-query-line-at-point-replace-by-code-snippet)
  ("l" flyspell-auto-correct-previous-word)
  ("s" cpped-hydra-edit-sort/body :exit t)
  ("x" cpped-hydra-edit-transpose/body :exit t)
  ("k" epa-encrypt-region :exit t)
  ("K" epa-decrypt-region :exit t)

  ("6" base64-encode-region)
  ("&" base64-decode-region)

  ("/" comment-dwim-2)
  ("f" cpped-hydra-refactor/body :exit t)
  ("e" (if (region-active-p)
           (eval-region (region-beginning) (region-end))
         (eval-last-sexp)))
  ("E" (if (region-active-p)
           (let* ((beginning (region-beginning))
                  (end (region-end))
                  (expression (buffer-substring-no-properties beginning end)))
             (kill-region beginning end)
             (eval-expression (car (read-from-string (format "(progn %s)" expression))) t))
           (crux-eval-and-replace)))
  ("o" org-babel-demarcate-block))

(global-set-key (kbd "C-e") 'cpped-hydra-edit/body)
#+END_SRC

*** Indent new lines
#+BEGIN_SRC emacs-lisp
(global-set-key (kbd "RET") 'newline-and-indent)
(global-set-key (kbd "<C-return>") 'cpped-newline-after-current-line)
#+END_SRC

*** Undo/Redo
#+BEGIN_SRC emacs-lisp
(global-set-key (kbd "C-z") #'undo-tree-undo)
(global-set-key (kbd "C-S-z") #'undo-tree-redo)
(global-set-key (kbd "M-z") #'undo-tree-visualize)
#+END_SRC

*** Kill/yank
Insert at position
#+BEGIN_SRC emacs-lisp
(cua-selection-mode 1)
(delete-selection-mode 0)
(setq cua-global-mark-keep-visible nil)

(global-set-key (kbd "C-M-y") #'cua-toggle-global-mark)

(defun cpped-yank-to-global-mark (prefix)
  (interactive "P")
  (if cua--global-mark-active
      (with-current-buffer (marker-buffer cua--global-mark-marker)
        (goto-char (marker-position cua--global-mark-marker))
        (yank)
        (cua--activate-global-mark)
        (message "Copied to global mark in %s:%d"
	         (buffer-name (marker-buffer cua--global-mark-marker))
	         (marker-position cua--global-mark-marker)))))
#+END_SRC

#+BEGIN_SRC emacs-lisp
(defhydra cpped-hydra-copy (:exit t :hint nil)
  "
☰ Copy

Copy                     ^^Other
  _k_: line or region        _a_: Append next copy
  _K_: line (back)
  _w_: word
  _W_: word (back)
  _s_: sentence
  _S_: sentence (back)
  _x_: expression
  _X_: expression (back)
  _e_: enclosed area
"
  ("k" whole-line-or-region-kill-ring-save :exit nil)
  ("K" (let ((kill-read-only-ok t)
             (buffer-read-only t))
         (cpped-backward-kill-dwim)
         (cpped-yank-to-global-mark)))
  ("w" (let ((kill-read-only-ok t)
             (buffer-read-only t))
         (kill-word 1)
         (cpped-yank-to-global-mark)))
  ("W" (let ((kill-read-only-ok t)
             (buffer-read-only t))
         (backward-kill-word 1)
         (cpped-yank-to-global-mark)))
  ("s" (let ((kill-read-only-ok t)
           (buffer-read-only t))
         (kill-sentence)
         (cpped-yank-to-global-mark)))
  ("S" (let ((kill-read-only-ok t)
             (buffer-read-only t))
         (backward-kill-sentence)
         (cpped-yank-to-global-mark)))
  ("x" (let ((kill-read-only-ok t)
             (buffer-read-only t))
         (kill-sexp)
         (cpped-yank-to-global-mark)))
  ("X" (let ((kill-read-only-ok t)
             (buffer-read-only t))
         (backward-kill-sexp)
         (cpped-yank-to-global-mark)))
  ("e" (let ((kill-read-only-ok)
             (buffer-read-only t))
         (call-interactively 'change-inner)
         (cpped-yank-to-global-mark)))
  ("a" append-next-kill :exit nil))

(global-set-key (kbd "M-w") '(lambda(prefix)
                               (interactive "P")
                               (call-interactively #'whole-line-or-region-kill-ring-save)
                               (cpped-yank-to-global-mark prefix)))
(global-set-key (kbd "M-k") #'cpped-hydra-copy/whole-line-or-region-kill-ring-save)

(defhydra cpped-hydra-kill (:exit t :hint nil)
  "
☰ Cut / Delete

Cut                   ^^Delete                               ^^Other
  _k_: line or region     _SPC_: limit to one space              _a_: Append next kill
  _K_: line (back)        _C-SPC_: blank lines
  _w_: word               _d_: Duplicate lines
  _W_: word (back)        _r_: Lines not matching expression
  _s_: sentence
  _S_: sentence (back)
  _x_: expression
  _X_: expression (back)
  _e_: enclosed area
"
  ("k" whole-line-or-region-kill-region :exit nil)
  ("K" (progn
         (cpped-backward-kill-dwim)
         (cpped-yank-to-global-mark)))
  ("w" (progn
         (kill-word)
         (cpped-yank-to-global-mark)))
  ("W" (progn
         (backward-kill-word)
         (cpped-yank-to-global-mark)))
  ("s" (progn
         (kill-sentence)
         (cpped-yank-to-global-mark)))
  ("S" (progn
         (backward-kill-sentence)
         (cpped-yank-to-global-mark)))
  ("x" (progn
         (kill-sexp)
         (cpped-yank-to-global-mark)))
  ("X" (progn
         (backward-kill-sexp)
         (cpped-yank-to-global-mark)))
  ("e" (progn
         (change-inner)
         (cpped-yank-to-global-mark)))
  ("SPC" just-one-space)
  ("C-SPC" delete-blank-lines)
  ("d" delete-duplicate-lines)
  ("r" keep-lines)
  ("a" append-next-kill :exit nil))

(global-set-key (kbd "C-w") '(lambda(prefix)
                               (interactive "P")
                               (call-interactively #'whole-line-or-region-kill-region)
                               (cpped-yank-to-global-mark prefix)))
(global-set-key (kbd "C-k") #'cpped-hydra-kill/body)

(defhydra cpped-hydra-yank (:hint nil :exit nil)
  "Yank"
  ("C-y" yank :exit nil)
  ("M-y" helm-show-kill-ring :exit t))

(global-set-key (kbd "C-y") #'cpped-hydra-yank/yank)
(global-set-key (kbd "M-y") #'helm-show-kill-ring)

(with-eval-after-load "term"
  (define-key term-raw-map (kbd "C-c C-y") 'term-paste)
  (define-key term-raw-map (kbd "C-c M-y") (lambda ()
                                             (interactive)
                                             (term-send-raw-string (substring-no-properties (helm-show-kill-ring))))))
#+END_SRC

** Org-Mode
*** Structure templates
#+BEGIN_SRC emacs-lisp
(defun cpped-org-expand-template (shortcut)
  "Expand org structure templates."
  (org-insert-structure-template (cdr (assoc shortcut org-structure-template-alist))))

(defhydra cpped-hydra-org-structure-template (:exit t :hint nil)
  "
☰ Structure templates

Format          ^^Markup         ^^Script            ^^Diagram        ^^Other
  _c_: Center       _a_: ASCII       _l_: Emacs Lisp     _d_: Dot         _*_: Calculator
  _e_: Example      _h_: HTML        _z_: Zsh            _u_: UML
  _q_: Quote        _/_: Comment     _+_: C++            _p_: Gnuplot
  _v_: Verbatim                    ^^_b_: Bash
                                 ^^^^_s_: Shell
                                 ^^^^_r_: Source
"
  ("c" (cpped-org-expand-template "c"))
  ("e" (cpped-org-expand-template "e"))
  ("q" (cpped-org-expand-template "q"))
  ("v" (cpped-org-expand-template "v"))
  ("a" (cpped-org-expand-template "a"))
  ("h" (cpped-org-expand-template "h"))
  ("/" (cpped-org-expand-template "/"))
  ("l" (cpped-org-expand-template "l"))
  ("z" (cpped-org-expand-template "z"))
  ("+" (cpped-org-expand-template "+"))
  ("b" (cpped-org-expand-template "b"))
  ("s" (cpped-org-expand-template "s"))
  ("r" (cpped-org-expand-template "r"))
  ("d" (cpped-org-expand-template "d"))
  ("u" (cpped-org-expand-template "u"))
  ("p" (cpped-org-expand-template "p"))
  ("*" (cpped-org-expand-template "*")))

(define-key org-mode-map (kbd "#") (lambda ()
                                     (interactive)
                                     (if (looking-back "^")
                                         (cpped-hydra-org-structure-template/body)
                                       (self-insert-command 1))))
#+END_SRC

** PDF-View-Mode
#+BEGIN_SRC emacs-lisp
(with-eval-after-load "pdf-tools"
  (progn
    (defhydra cpped-hydra-pdf-view (:exit nil :hint nil)
      "
☰ PDF

Navigation           ^^Zoom                 ^^Annotations               ^^Information
  _p_: Previous page     _+_: Zoom in           _l_: List                   _m_: Show metadata
  _n_: Next page         _-_: Zoom out          _._: List attachments

  _a_: First page        _f_: Fit to page       _t_: Add text
  _e_: Last page         _w_: Fit to width      _#_: Highlight
                       ^^_h_: Fit to height     _\__: Underline
  _g_: Go to page                             ^^_~_: Squiggly underline
                                            ^^^^_/_: Strikethrough
  _o_: Show outline
                                            ^^^^_d_: Delete
"
      ("p" pdf-view-previous-page)
      ("<prior>" pdf-view-previous-page)
      ("n" pdf-view-next-page)
      ("<next>" pdf-view-next-page)
      ("a" pdf-view-first-page)
      ("<home>" pdf-view-first-page)
      ("e" pdf-view-last-page)
      ("<end>" pdf-view-last-page)
      ("g" pdf-view-goto-page)
      ("o" pdf-outline)

      ("+" pdf-view-enlarge)
      ("-" pdf-view-shrink)
      ("f" pdf-view-fit-page-to-window)
      ("w" pdf-view-fit-width-to-window)
      ("h" pdf-view-fit-height-to-window)

      ("l" pdf-annot-list-annotations)
      ("." pdf-annot-attachment-dired)
      ("t" pdf-annot-add-text-annotation)
      ("#" pdf-annot-add-highlight-markup-annotation)
      ("_" pdf-annot-add-underline-markup-annotation)
      ("~" pdf-annot-add-squiggly-markup-annotation)
      ("/" pdf-annot-add-strikeout-markup-annotation)
      ("d" pdf-annot-delete)

      ("m" (if (get-buffer "*PDF-Metadata*")
               (kill-buffer "*PDF-Metadata*")
             (pdf-misc-display-metadata))))

    (add-hook 'pdf-view-mode-hook 'cpped-hydra-pdf-view/body)))
#+END_SRC

** DocView-Mode
#+BEGIN_SRC emacs-lisp
(defhydra cpped-hydra-doc-view (:exit nil :hint nil)
  "
☰ Document

Navigation           ^^Zoom
  _p_: Previous page     _+_: Zoom in
  _n_: Next page         _-_: Zoom out

  _a_: First page        _f_: Fit to page
  _e_: Last page         _w_: Fit to width
                       ^^_h_: Fit to height
  _g_: Go to page
"
  ("p" doc-view-previous-page)
  ("<prior>" doc-view-previous-page)
  ("n" doc-view-next-page)
  ("<next>" doc-view-next-page)
  ("a" doc-view-first-page)
  ("<home>" doc-view-first-page)
  ("e" doc-view-last-page)
  ("<end>" doc-view-last-page)
  ("g" doc-view-goto-page)

  ("+" doc-view-enlarge)
  ("-" doc-view-shrink)
  ("f" doc-view-fit-page-to-window)
  ("w" doc-view-fit-width-to-window)
  ("h" doc-view-fit-height-to-window))

(add-hook 'doc-view-minor-mode-hook 'cpped-hydra-doc-view/body)

;(define-key doc-view-mode-map (kbd "C-s") #'doc-view-search)
#+END_SRC

** Logview-Mode
#+BEGIN_SRC emacs-lisp
(defhydra cpped-hydra-logview (:exit nil :hint nil :foreign-keys run)
  "
☰ Log

Navigation                      ^^Levels                       ^^Filter
  _p_: Previous entry               _1_: Errors                    _f_: Edit
  _n_: Next entry                   _2_: Warnings                  _x_: Reset
                                  ^^_3_: Information
  _P_: Previous important entry     _4_: Debug                     _h_: Hide entries
  _N_: Next important entry         _5_: All                       _s_: Show entries

                                  ^^_+_: Show all as important     _d_: Toggle details
"
  ("n" logview-next-entry)
  ("p" logview-previous-entry)
  ("N" logview-next-as-important-entry)
  ("P" logview-previous-as-important-entry)
  ("1" logview-show-only-errors)
  ("2" logview-show-errors-and-warnings)
  ("3" logview-show-errors-warnings-and-information)
  ("4" logview-show-errors-warnings-information-and-debug)
  ("5" logview-show-all-levels)
  ("+" logview-show-only-as-important)
  ("f" logview-edit-filters)
  ("x" logview-reset-all-filters)
  ("h" logview-hide-entry)
  ("s" (if (region-active-p)
           (logview-show-entries)
         (logview-show-region-entries)))
  ("d" (if (region-active-p)
           (logview-toggle-entry-details)
         (logview-toggle-region-entry-details)))
  ("q" cpped-kill-default-buffer :exit t)
  ("ESC" cpped-kill-default-buffer :exit t))

(add-hook 'logview-mode-hook 'cpped-hydra-logview/body)
#+END_SRC

** Remote
#+BEGIN_SRC emacs-lisp
(defhydra cpped-hydra-remote (:exit t :columns 1)
  "
☰ Remote
"
  ("t" cpped-serial-terminal "Serial Terminal")
  ("s" helm-tramp "Remote Shell"))

(global-set-key (kbd "C-r") 'cpped-hydra-remote/body)

(defun shark-bytes/zoom-in ()
  "Increase the font size by 10 points."
  (interactive)
  (cond ((and (boundp 'doc-view-mode)
              (derived-mode-p 'doc-view-mode))
         (doc-view-enlarge))
        ((and (boundp 'pdf-view-mode)
              (derived-mode-p 'pdf-view-mode))
         (pdf-view-enlarge))
        (t
         (set-face-attribute 'default nil :height (+ (face-attribute 'default :height) 10)))))

(defun shark-bytes/zoom-out ()
  "Decrease the font size by 10 points."
  (interactive)
  (cond ((and (boundp 'doc-view-mode)
           (derived-mode-p 'doc-view-mode))
         (doc-view-shrink))
        ((and (boundp 'pdf-view-mode)
              (derived-mode-p 'pdf-view-mode))
         (pdf-view-shrink))
        (t
         (set-face-attribute 'default nil :height (- (face-attribute 'default :height) 10)))))
#+END_SRC

** Windows
#+BEGIN_SRC emacs-lisp
(defhydra cpped-hydra-windows (:exit nil :hint nil)
  "
☰ Window Management

Focus                  ^^^^Close                ^^Split               ^^Align               ^^View                                ^^Zoom               ^^Size                    ^^Misc
  _\\^_: Switch window       _x_: Window            ^_v_: Vertically       _t_: Swap windows     _<left>_: Scroll left                 _C-+_: Zoom in       _f_: Toggle fullscreen    _l_: Lock screen
                         ^^^^_X_: Other windows     _h_: Horizontally     _+_: Enlarge         _<right>_: Scroll right                _C--_: Zoom out
                         ^^^^_q_: Frame                                 ^^_-_: Shrink           _<C-up>_: Scroll other window up
                                                                                    ^^^^^^^^^^_<C-down>_: Scroll other window down
                                                                                    ^^^^^^^^^^_<C-home>_: Beginning of other window
                                                                                     ^^^^^^^^^^_<C-end>_: End of other window
                                                                                           ^^^^^^^^^^_1_: Toggle line numbers
                                                                                           ^^^^^^^^^^_#_: Toggle relative line numbers
                                                                                           ^^^^^^^^^^_w_: Widen
"
  ("x" delete-window :exit t)
  ("X" delete-other-windows :exit t)
  ("^" (call-interactively #'switch-window) :exit t)
  ("q" cpped-close-editor)
  ("v" split-window-below)
  ("h" split-window-right)
  ("t" crux-transpose-windows)
  ("+" enlarge-window-horizontally)
  ("-" shrink-window-horizontally)
  ("<left>" scroll-left)
  ("<right>" scroll-right)
  ("<up>" scroll-up)
  ("<down>" scroll-down)
  ("<home>" beginning-of-buffer)
  ("<end>" end-of-buffer)
  ("<C-up>" scroll-other-window)
  ("<C-down>" scroll-other-window-down)
  ("<C-home>" beginning-of-buffer-other-window)
  ("<C-end>" end-of-buffer-other-window)
  ("1" display-line-numbers-mode)
  ("#" (if (eq display-line-numbers 'relative)
           (setq display-line-numbers t)
         (setq display-line-numbers 'relative)))
  ("w" widen)
  ("f" toggle-frame-fullscreen :exit t)
  ("l" cpped-lock-screen :exit t))

(global-set-key (kbd "C-^") #'cpped-hydra-windows/body)
(global-set-key (kbd "C-x C-c") #'cpped-close-editor)
#+END_SRC

** Settings
#+BEGIN_SRC emacs-lisp
(with-eval-after-load "ob-tangle"
(defun cpped-check-emacs-config ()
  "Test if emacs starts correctly."
  (interactive)
  (require 'async)
  (async-start (lambda ()
                 (shell-command-to-string (format "emacs --quick --batch --eval \"(condition-case e
                                                                              (progn
                                                                                (load \\\"%s\\\")
                                                                                (message \\\"-OK-\\\"))
                                                                              (error
                                                                                (message \\\"ERROR!\\\")
                                                                                (signal (car e) (cdr e))))\""
                                                  (let ((kill-buffer-query-functions))
                                                    (with-temp-buffer
                                                      (insert-file-contents (expand-file-name cpped-config-file))
                                                      (beginning-of-buffer)
                                                      (mapcar #'expand-file-name (org-babel-tangle nil (expand-file-name (make-temp-name "emacs-config-test") temporary-file-directory)))))))
                 `(lambda (output)
                    (if (string-match "-OK-" output)
                        (when ,(called-interactively-p 'any)
                          (message "Config file is valid."))
                      (switch-to-buffer-other-window "*Config Error*")
                      (delete-region (point-min) (point-max))
                      (insert output)
                      (search-backward "ERROR!")))))))
#+END_SRC

#+BEGIN_SRC emacs-lisp
(defhydra cpped-hydra-settings (:exit t :hint nil)
  "
☰ Settings

Settings                       ^^Projects                      ^^Snippets            ^^Abbreviations
  _c_: Open config file            _t_: Edit Treemacs projects     _Y_: New snippet      _A_: New abbreviation
  _m_: Open customization file                                   ^^_y_: Edit snippet     _a_: Edit abbreviations
  _t_: Edit theme
  _v_: Customize variable
  _g_: Customize group

  _s_: Set variable

  _#_: Profile startup

  _d_: %s(if debug-on-error
             \"Disable\"
           \"Enable\") debug on error
"
  ("c" (find-file cpped-config-file))
  ("m" (find-file custom-file))
  ("y" yas-visit-snippet-file)
  ("Y" yas-new-snippet)
  ("a" edit-abbrevs)
  ("A" add-inverse-global)
  ("t" (custom-theme-visit-theme cpped-theme))
  ("v" customize-variable)
  ("g" customize-group)
  ("s" set-variable)
  ("d" (setq debug-on-error (not debug-on-error)
             eval-expression-debug-on-error (not eval-expression-debug-on-error)))
  ("#" esup)

  ("t" treemacs-edit-workspaces))

(global-set-key (kbd "C-S-s") #'cpped-hydra-settings/body)
#+END_SRC

** Help
#+BEGIN_SRC emacs-lisp
(defhydra cpped-hydra-help (:exit t :columns 1)
  "
☰ Help
"
  ("h" helm-apropos "Help")
  ("k" describe-key "Key")
  ("p" finder-commentary "Package")
  ("y" describe-syntax "Syntax")
  ("m" helm-man-woman "Man Page")
  ("i" info "Info Page"))

(global-set-key (kbd "C-h") #'helpful-at-point)
(global-set-key (kbd "C-S-h") #'cpped-hydra-help/body)
#+END_SRC

** Tools
#+BEGIN_SRC emacs-lisp
(defhydra cpped-hydra-tools-docker (:exit t :hint nil)
  "
☰ Docker

  _i_: Images
  _c_: Containers
  _v_: Volumes
  _n_: Networks
  _m_: Machines
"
  ("i" docker-images)
  ("c" docker-containers)
  ("v" docker-volumes)
  ("n" docker-networks)
  ("m" docker-machines)
  ("l" docker-container-logs-popup))

(defhydra cpped-hydra-tools (:exit t :hint nil)
  "
☰ Tools

Tools                      ^^Last Command    ^^System
  _c_: Calculator              _r_: Repeat       _a_: Run application
  _u_: Convert unit            _f_: Resume       _p_: Show processes
  _b_: Bookmarks                               ^^_s_: Show system services
  _x_: Regex Builder                           ^^_P_: Manage system packages
  _e_: Evaluate expression                     ^^_d_: Docker
  _/_: Open directory                          ^^_t_: Trash

_=_: Directory Diff
"
  ("c" helm-calcul-expression)
  ("u" helm-convert-unit)
  ("b" helm-bookmarks)
  ("x" re-builder)
  ("e" eval-expression)
  ("/" dired)
  ("=" ztree-diff)
  ("r" repeat)
  ("f" (let ((current-prefix-arg '(4)))
         (call-interactively 'helm-resume)))
  ("a" cpped-run-application)
  ("p" helm-top)
  ("s" helm-systemd)
  ("P" helm-system-packages)
  ("d" cpped-hydra-tools-docker/body)
  ("t" trashed))

(global-set-key (kbd "C-t") #'cpped-hydra-tools/body)
#+END_SRC

*** Docker
**** Images
#+BEGIN_SRC emacs-lisp
(defhydra cpped-hydra-docker-images (:exit nil :hint nil :foreign-keys run)
  "
☰ Docker Images

              ^^Sync        ^^Info
  _r_: Run        _f_: Pull     _ß_: Inspect
              ^^^^_p_: Push
  _k_: Remove     _t_: Tag
"
  ("r" docker-images-run-popup)
  ("k" docker-images-rmi-popup)
  ("f" docker-images-pull-popup)
  ("p" docker-images-push-popup)
  ("t" docker-images-tag-entry)
  ("ß" docker-images-inspect-popup)
  ("q" nil :exit t))

(add-hook 'docker-images-mode-hook 'cpped-hydra-docker-images/body)
#+END_SRC

**** Containers
#+BEGIN_SRC emacs-lisp
(defhydra cpped-hydra-docker-containers (:exit nil :hint nil :foreign-keys run)
  "
☰ Docker Containers

Run            ^^Info
  _s_: Start       _ß_: Inspect
  _t_: Stop        _d_: Diff
  _p_: Pause
  _r_: Restart
  _k_: Kill
"
  ("s" docker-containers-start-popup)
  ("t" docker-containers-stop-popup)
  ("p" docker-containers-pause-popup)
  ("r" docker-containers-restart-popup)
  ("k" docker-containers-kill-popup)
  ("ß" docker-containers-inspect-popup)
  ("d" docker-containers-diff-popup)
  ("q" nil :exit t))

(add-hook 'docker-containers-mode-hook 'cpped-hydra-docker-containers/body)
#+END_SRC

**** Machines
#+BEGIN_SRC emacs-lisp
(defhydra cpped-hydra-docker-machines (:exit nil :hint nil :foreign-keys run)
  "
☰ Docker Machines

              ^^Run           ^^Info
  _c_: Create    _s_: Start       _ß_: Inspect
               ^^_t_: Stop        _e_: Environment
  _k_: Remove    _r_: Restart
"
  ("c" docker-machine-create)
  ("k" docker-machine-rm-popup)
  ("s" docker-machine-start-popup)
  ("t" docker-machine-stop-popup)
  ("r" docker-machine-restart-popup)
  ("ß" docker-machine-inspect)
  ("e" docker-machine-env-popup)
  ("q" nil :exit t))

(add-hook 'docker-machines-mode-hook 'cpped-hydra-docker-machines/body)
#+END_SRC

** Build
#+BEGIN_SRC emacs-lisp
(defhydra cpped-hydra-build (:exit t :columns 1)
  "
☰ Build 🞋 %s(if cpped-cmake-current-target
     cpped-cmake-current-target
    \"none\")
"
  ("t" cpped-cmake-select-target "Select Target")
  ("b" cpped-build-target "Build target")
  ("B" (let ((cpped-cmake-current-target nil))
         (call-interactively #'cpped-build-target)) "Select and build target")
  ("c" cpped-cmake-clean-build-directory "Clean build directory"))

(global-set-key (kbd "C-b") #'cpped-hydra-build/body)
#+END_SRC

** Planning
#+BEGIN_SRC emacs-lisp
(defhydra cpped-hydra-planning (:exit t :hint nil)
  "
☰ Planning %s(s-join \" \" (list (cpped-print-time) (cpped-print-remaining-work-time) (cpped-print-current-task)))

Open                ^^Create       ^^Work         ^^Task                        ^^Timesheet
  _a_: Agenda           _c_: Entry     _b_: Break     _r_: Clock in recent task     _d_: Daily Scrum
  _u_: Current Task                               ^^^^_i_: Clock in                 _D_: Today
                                                ^^^^^^_o_: Clock out                _m_: This Month
  _t_: ToDos                                      ^^^^_E_: Set estimate             _y_: This Year
  _b_: Bugs                                       ^^^^_+_: Increase estimate
  _n_: Notes
  _e_: Events
"
  ("a" (org-agenda nil "D"))
  ("u" org-clock-goto)
  ("t" (find-file org-default-todos-file))
  ("b" (find-file org-default-bugs-file))
  ("n" (find-file org-default-notes-file))
  ("e" (find-file org-default-events-file))

  ("c" helm-org-capture-templates)

  ("b" (cpped-lock-screen))

  ("r" org-mru-clock-in)
  ("i" org-clock-in)
  ("o" org-clock-out)
  ("E" (when (and (org-clocking-p)
                  org-clock-marker)
         (with-current-buffer (marker-buffer org-clock-marker)
           (goto-char (marker-position org-clock-marker))
           (org-set-effort (helm :sources (helm-build-sync-source "Effort"
                                            :candidates (split-string (cdr (assoc 'Effort_ALL org-global-properties)) " "))
                                 :prompt "Effort: "
                                 :preselect org-clock-effort
                                 :buffer "*helm effort*")))))
  ("+" (when (and (org-clocking-p)
                  org-clock-marker)
         (with-current-buffer (marker-buffer org-clock-marker)
           (goto-char (marker-position org-clock-marker))
           (org-set-effort nil t))))

  ("d" (org-agenda nil "d"))
  ("D" (org-agenda nil "D"))
  ("m" (org-agenda nil "p"))
  ("y" (org-agenda nil "y")))

(global-set-key (kbd "C-l") #'cpped-hydra-planning/body)
#+END_SRC

#+BEGIN_SRC emacs-lisp
#+END_SRC
